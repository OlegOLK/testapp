{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadUserData = exports.requireUserSession = exports.addUserGroupKey = exports.addPersonalSigningKey = exports.userGroupKeys = exports.clearStorage = exports.encryptObject = exports.decryptObject = exports.GROUP_MEMBERSHIPS_STORAGE_KEY = void 0;\n\nvar _encryption = require(\"blockstack/lib/encryption\");\n\nvar _config = require(\"./config\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar GROUP_MEMBERSHIPS_STORAGE_KEY = 'GROUP_MEMBERSHIPS_STORAGE_KEY';\nexports.GROUP_MEMBERSHIPS_STORAGE_KEY = GROUP_MEMBERSHIPS_STORAGE_KEY;\n\nvar valueToString = function valueToString(value, clazz) {\n  if (clazz === Boolean) {\n    return value ? 'true' : 'false';\n  }\n\n  if (clazz === Number) {\n    return String(value);\n  }\n\n  if (clazz === Array || clazz === Object) {\n    return JSON.stringify(value);\n  }\n\n  return value;\n};\n\nvar stringToValue = function stringToValue(value, clazz) {\n  if (clazz === Boolean) {\n    return value === 'true';\n  }\n\n  if (clazz === Number) {\n    return parseFloat(value);\n  }\n\n  if (clazz === Array || clazz === Object) {\n    return JSON.parse(value);\n  }\n\n  return value;\n};\n\nvar decryptObject =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(encrypted, model) {\n    var privateKey, decrypted, schema;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return model.encryptionPrivateKey();\n\n          case 2:\n            privateKey = _context.sent;\n            decrypted = _objectSpread({}, encrypted);\n            schema = model.schema;\n            Object.keys(encrypted).forEach(function (key) {\n              var value = encrypted[key];\n              var schemaValue = schema[key];\n              var clazz = schemaValue;\n              var schemaAttribute = schema[key];\n\n              if (schemaAttribute && schemaAttribute.type) {\n                clazz = schemaAttribute.type;\n              }\n\n              if (clazz && schemaAttribute && !schemaAttribute.decrypted) {\n                try {\n                  var decryptedValue = (0, _encryption.decryptECIES)(privateKey, value);\n                  decrypted[key] = stringToValue(decryptedValue, clazz);\n                } catch (error) {\n                  console.debug(\"Decryption error for key: '\".concat(key, \"': \").concat(error.message)); // eslint-disable-line\n\n                  decrypted[key] = value;\n                }\n              }\n            });\n            return _context.abrupt(\"return\", decrypted);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function decryptObject(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.decryptObject = decryptObject;\n\nvar encryptObject =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(model) {\n    var publicKey, object, encrypted;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return model.encryptionPublicKey();\n\n          case 2:\n            publicKey = _context2.sent;\n            object = model.attrs;\n            encrypted = _objectSpread({}, object, {\n              _id: model._id\n            });\n            Object.keys(model.schema).forEach(function (key) {\n              var schemaValue = model.schema[key];\n              var schemaAttribute = model.schema[key];\n              var value = object[key];\n              var clazz = schemaValue;\n              if (typeof value === 'undefined') return;\n\n              if (schemaAttribute.type) {\n                clazz = schemaAttribute.type;\n              }\n\n              if (schemaAttribute.decrypted) {\n                encrypted[key] = value;\n                return;\n              }\n\n              var stringValue = valueToString(value, clazz);\n              encrypted[key] = (0, _encryption.encryptECIES)(publicKey, stringValue);\n            });\n            return _context2.abrupt(\"return\", encrypted);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function encryptObject(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.encryptObject = encryptObject;\n\nvar clearStorage = function clearStorage() {\n  localStorage.removeItem(GROUP_MEMBERSHIPS_STORAGE_KEY);\n};\n\nexports.clearStorage = clearStorage;\n\nvar userGroupKeys = function userGroupKeys() {\n  var keysString = localStorage.getItem(GROUP_MEMBERSHIPS_STORAGE_KEY);\n  var keys = keysString ? JSON.parse(keysString) : {};\n  keys = _objectSpread({\n    userGroups: {},\n    signingKeys: {},\n    personal: {}\n  }, keys);\n  return keys;\n};\n\nexports.userGroupKeys = userGroupKeys;\n\nvar addPersonalSigningKey = function addPersonalSigningKey(signingKey) {\n  var keys = userGroupKeys();\n  keys.personal = _objectSpread({\n    _id: signingKey._id\n  }, signingKey.attrs);\n  localStorage.setItem(GROUP_MEMBERSHIPS_STORAGE_KEY, JSON.stringify(keys));\n};\n\nexports.addPersonalSigningKey = addPersonalSigningKey;\n\nvar addUserGroupKey = function addUserGroupKey(userGroup) {\n  var keys = userGroupKeys();\n  keys.userGroups[userGroup._id] = userGroup.attrs.signingKeyId;\n  keys.signingKeys[userGroup.attrs.signingKeyId] = userGroup.privateKey;\n  localStorage.setItem(GROUP_MEMBERSHIPS_STORAGE_KEY, JSON.stringify(keys));\n};\n\nexports.addUserGroupKey = addUserGroupKey;\n\nvar requireUserSession = function requireUserSession() {\n  var _ref3 = (0, _config.getConfig)(),\n      userSession = _ref3.userSession;\n\n  if (!userSession) {\n    // TODO: link to docs\n    throw new Error('You have not properly configured your UserSession.');\n  }\n\n  return userSession;\n};\n\nexports.requireUserSession = requireUserSession;\n\nvar loadUserData = function loadUserData() {\n  var _ref4 = (0, _config.getConfig)(),\n      userSession = _ref4.userSession;\n\n  if (userSession) {\n    return userSession.loadUserData();\n  }\n\n  return null;\n};\n\nexports.loadUserData = loadUserData;","map":null,"metadata":{},"sourceType":"script"}