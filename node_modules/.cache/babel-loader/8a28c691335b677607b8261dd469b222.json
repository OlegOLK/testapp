{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _keys = require(\"blockstack/lib/keys\");\n\nvar _encryption = require(\"blockstack/lib/encryption\");\n\nvar _model = _interopRequireDefault(require(\"../model\"));\n\nvar _signingKey = _interopRequireDefault(require(\"./signing-key\"));\n\nvar _groupMembership = _interopRequireDefault(require(\"./group-membership\"));\n\nvar _helpers = require(\"../helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar decrypted = true;\n\nvar BlockstackUser =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(BlockstackUser, _Model);\n\n  function BlockstackUser() {\n    _classCallCheck(this, BlockstackUser);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BlockstackUser).apply(this, arguments));\n  }\n\n  _createClass(BlockstackUser, [{\n    key: \"createSigningKey\",\n    value: function () {\n      var _createSigningKey = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _signingKey.default.create();\n\n              case 2:\n                key = _context.sent;\n                this.attrs.personalSigningKeyId = key._id;\n                return _context.abrupt(\"return\", key);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createSigningKey() {\n        return _createSigningKey.apply(this, arguments);\n      }\n\n      return createSigningKey;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _ref, appPrivateKey, contentToSign, _ref2, signature;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.attrs.signingKeyId = 'personal';\n                _ref = (0, _helpers.loadUserData)(), appPrivateKey = _ref.appPrivateKey;\n                contentToSign = [this._id];\n\n                if (this.attrs.updatedAt) {\n                  contentToSign.push(this.attrs.updatedAt);\n                }\n\n                _ref2 = (0, _encryption.signECDSA)(appPrivateKey, contentToSign.join('-')), signature = _ref2.signature;\n                this.attrs.radiksSignature = signature;\n                return _context2.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sign() {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }], [{\n    key: \"currentUser\",\n    value: function currentUser() {\n      if (typeof window === 'undefined') {\n        return null;\n      }\n\n      var userData = (0, _helpers.loadUserData)();\n\n      if (!userData) {\n        return null;\n      }\n\n      var username = userData.username,\n          profile = userData.profile,\n          appPrivateKey = userData.appPrivateKey;\n      var publicKey = (0, _keys.getPublicKeyFromPrivate)(appPrivateKey);\n      var Clazz = this;\n      var user = new Clazz({\n        _id: username,\n        username: username,\n        publicKey: publicKey,\n        profile: profile\n      });\n      return user;\n    }\n  }, {\n    key: \"createWithCurrentUser\",\n    value: function createWithCurrentUser() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var resolveUser = function resolveUser(user, _resolve) {\n          user.save().then(function () {\n            _groupMembership.default.cacheKeys().then(function () {\n              _resolve(user);\n            });\n          });\n        };\n\n        try {\n          var user = _this.currentUser();\n\n          user.fetch().catch(function () {// console.error('caught error', e);\n          }).finally(function () {\n            // console.log(user.attrs);\n            var userData = (0, _helpers.loadUserData)();\n            var username = userData.username,\n                profile = userData.profile,\n                appPrivateKey = userData.appPrivateKey;\n            var publicKey = (0, _keys.getPublicKeyFromPrivate)(appPrivateKey);\n            user.update({\n              username: username,\n              profile: profile,\n              publicKey: publicKey\n            });\n\n            if (!user.attrs.personalSigningKeyId) {\n              user.createSigningKey().then(function (key) {\n                (0, _helpers.addPersonalSigningKey)(key);\n                resolveUser(user, resolve);\n              });\n            } else {\n              _signingKey.default.findById(user.attrs.personalSigningKeyId).then(function (key) {\n                (0, _helpers.addPersonalSigningKey)(key);\n                resolveUser(user, resolve);\n              });\n            }\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n  }]);\n\n  return BlockstackUser;\n}(_model.default);\n\nexports.default = BlockstackUser;\n\n_defineProperty(BlockstackUser, \"className\", 'BlockstackUser');\n\n_defineProperty(BlockstackUser, \"schema\", {\n  username: {\n    type: String,\n    decrypted: decrypted\n  },\n  publicKey: {\n    type: String,\n    decrypted: decrypted\n  },\n  profile: {\n    type: String,\n    decrypted: decrypted\n  },\n  personalSigningKeyId: String\n});","map":null,"metadata":{},"sourceType":"script"}