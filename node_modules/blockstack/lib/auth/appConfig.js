"use strict";

exports.__esModule = true;
exports.AppConfig = void 0;

var _authConstants = require("./authConstants");

/**
 * Configuration data for the current app.
 *
 * On browser platforms, creating an instance of this
 * class without any arguments will use
 * `window.location.origin` as the app domain.
 * On non-browser platforms, you need to
 * specify an app domain as the first argument.
 * @type {AppConfig}
 */
class AppConfig {
  /**
   * Blockstack apps are uniquely identified by their app domain.
   * @type {string}
   */

  /**
   * An array of string representing permissions requested by the app.
   * @type {[Array<string>}
   */

  /**
   * Path on app domain to redirect users to after authentication. The
   * authentication response token will be postpended in a query.
   * @type {string}
   */

  /**
   * Path relative to app domain of app's manifest file.
   *
   * This file needs to have CORS headers set so that it can be fetched
   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.
   * @type {string}
   */

  /**
   * The URL of Blockstack core node to use for this app. If this is
   * `null`, the core node specified by the user or default core node
   * will be used.
   * @type {string}
   */

  /**
   * The URL of a web-based Blockstack Authenticator to use in the event
   * the user doesn't have Blockstack installed on their machine. If this
   * is not specified, the current default in this library will be used.
   * @type {string}
   */

  /**
   * @param {Array<string>} scopes - permissions this app is requesting
   * @param {string} appDomain - the app domain
   * @param {string} redirectPath - path on app domain to redirect users to after authentication
   * @param {string} manifestPath - path relative to app domain of app's manifest file
   * @param {string} coreNode - override the default or user selected core node
   * @param {string} authenticatorURL - the web-based fall back authenticator
   */
  constructor(scopes = _authConstants.DEFAULT_SCOPE.slice(), appDomain = window.location.origin, redirectPath = '', manifestPath = '/manifest.json', coreNode = null, authenticatorURL = _authConstants.DEFAULT_BLOCKSTACK_HOST) {
    this.appDomain = appDomain;
    this.scopes = scopes;
    this.redirectPath = redirectPath;
    this.manifestPath = manifestPath;

    if (!coreNode) {
      this.coreNode = _authConstants.DEFAULT_CORE_NODE;
    } else {
      this.coreNode = coreNode;
    }

    this.authenticatorURL = authenticatorURL;
  }
  /**
   * The location to which the authenticator should
   * redirect the user.
   * @returns {string} - URI
   */


  redirectURI() {
    return `${this.appDomain}${this.redirectPath}`;
  }
  /**
   * The location of the app's manifest file.
   * @returns {string} - URI
   */


  manifestURI() {
    return `${this.appDomain}${this.manifestPath}`;
  }

}

exports.AppConfig = AppConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoL2FwcENvbmZpZy5qcyJdLCJuYW1lcyI6WyJBcHBDb25maWciLCJjb25zdHJ1Y3RvciIsInNjb3BlcyIsIkRFRkFVTFRfU0NPUEUiLCJzbGljZSIsImFwcERvbWFpbiIsIndpbmRvdyIsImxvY2F0aW9uIiwib3JpZ2luIiwicmVkaXJlY3RQYXRoIiwibWFuaWZlc3RQYXRoIiwiY29yZU5vZGUiLCJhdXRoZW50aWNhdG9yVVJMIiwiREVGQVVMVF9CTE9DS1NUQUNLX0hPU1QiLCJERUZBVUxUX0NPUkVfTk9ERSIsInJlZGlyZWN0VVJJIiwibWFuaWZlc3RVUkkiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0E7O0FBR0E7Ozs7Ozs7Ozs7QUFVTyxNQUFNQSxTQUFOLENBQWdCO0FBQ3JCOzs7OztBQU1BOzs7OztBQU9BOzs7Ozs7QUFPQTs7Ozs7Ozs7QUFTQTs7Ozs7OztBQVFBOzs7Ozs7O0FBUUE7Ozs7Ozs7O0FBUUFDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBcUIsR0FBR0MsNkJBQWNDLEtBQWQsRUFBekIsRUFDQ0MsU0FBaUIsR0FBR0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxNQURyQyxFQUVDQyxZQUFvQixHQUFHLEVBRnhCLEVBR0NDLFlBQW9CLEdBQUcsZ0JBSHhCLEVBSUNDLFFBQWlCLEdBQUcsSUFKckIsRUFLQ0MsZ0JBQXdCLEdBQUdDLHNDQUw1QixFQUtxRDtBQUM5RCxTQUFLUixTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFNBQUtILE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtPLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQkEsWUFBcEI7O0FBRUEsUUFBSSxDQUFDQyxRQUFMLEVBQWU7QUFDYixXQUFLQSxRQUFMLEdBQWdCRyxnQ0FBaEI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLSCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNEOztBQUVELFNBQUtDLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFDRDtBQUVEOzs7Ozs7O0FBS0FHLEVBQUFBLFdBQVcsR0FBWTtBQUNyQixXQUFRLEdBQUUsS0FBS1YsU0FBVSxHQUFFLEtBQUtJLFlBQWEsRUFBN0M7QUFDRDtBQUVEOzs7Ozs7QUFJQU8sRUFBQUEsV0FBVyxHQUFZO0FBQ3JCLFdBQVEsR0FBRSxLQUFLWCxTQUFVLEdBQUUsS0FBS0ssWUFBYSxFQUE3QztBQUNEOztBQXpGb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuaW1wb3J0IHsgREVGQVVMVF9DT1JFX05PREUsIERFRkFVTFRfU0NPUEUsIERFRkFVTFRfQkxPQ0tTVEFDS19IT1NUIH0gZnJvbSAnLi9hdXRoQ29uc3RhbnRzJ1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBkYXRhIGZvciB0aGUgY3VycmVudCBhcHAuXG4gKlxuICogT24gYnJvd3NlciBwbGF0Zm9ybXMsIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIHRoaXNcbiAqIGNsYXNzIHdpdGhvdXQgYW55IGFyZ3VtZW50cyB3aWxsIHVzZVxuICogYHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5gIGFzIHRoZSBhcHAgZG9tYWluLlxuICogT24gbm9uLWJyb3dzZXIgcGxhdGZvcm1zLCB5b3UgbmVlZCB0b1xuICogc3BlY2lmeSBhbiBhcHAgZG9tYWluIGFzIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAqIEB0eXBlIHtBcHBDb25maWd9XG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBDb25maWcge1xuICAvKipcbiAgICogQmxvY2tzdGFjayBhcHBzIGFyZSB1bmlxdWVseSBpZGVudGlmaWVkIGJ5IHRoZWlyIGFwcCBkb21haW4uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBhcHBEb21haW46IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBzdHJpbmcgcmVwcmVzZW50aW5nIHBlcm1pc3Npb25zIHJlcXVlc3RlZCBieSB0aGUgYXBwLlxuICAgKiBAdHlwZSB7W0FycmF5PHN0cmluZz59XG4gICAqL1xuICBzY29wZXM6IEFycmF5PHN0cmluZz5cblxuXG4gIC8qKlxuICAgKiBQYXRoIG9uIGFwcCBkb21haW4gdG8gcmVkaXJlY3QgdXNlcnMgdG8gYWZ0ZXIgYXV0aGVudGljYXRpb24uIFRoZVxuICAgKiBhdXRoZW50aWNhdGlvbiByZXNwb25zZSB0b2tlbiB3aWxsIGJlIHBvc3RwZW5kZWQgaW4gYSBxdWVyeS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHJlZGlyZWN0UGF0aDogc3RyaW5nXG5cbiAgLyoqXG4gICAqIFBhdGggcmVsYXRpdmUgdG8gYXBwIGRvbWFpbiBvZiBhcHAncyBtYW5pZmVzdCBmaWxlLlxuICAgKlxuICAgKiBUaGlzIGZpbGUgbmVlZHMgdG8gaGF2ZSBDT1JTIGhlYWRlcnMgc2V0IHNvIHRoYXQgaXQgY2FuIGJlIGZldGNoZWRcbiAgICogZnJvbSBhbnkgb3JpZ2luLiBUeXBpY2FsbHkgdGhpcyBtZWFucyByZXR1cm4gdGhlIGhlYWRlciBgQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luOiAqYC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIG1hbmlmZXN0UGF0aDogc3RyaW5nXG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgb2YgQmxvY2tzdGFjayBjb3JlIG5vZGUgdG8gdXNlIGZvciB0aGlzIGFwcC4gSWYgdGhpcyBpc1xuICAgKiBgbnVsbGAsIHRoZSBjb3JlIG5vZGUgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyIG9yIGRlZmF1bHQgY29yZSBub2RlXG4gICAqIHdpbGwgYmUgdXNlZC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGNvcmVOb2RlOiBzdHJpbmdcblxuICAvKipcbiAgICogVGhlIFVSTCBvZiBhIHdlYi1iYXNlZCBCbG9ja3N0YWNrIEF1dGhlbnRpY2F0b3IgdG8gdXNlIGluIHRoZSBldmVudFxuICAgKiB0aGUgdXNlciBkb2Vzbid0IGhhdmUgQmxvY2tzdGFjayBpbnN0YWxsZWQgb24gdGhlaXIgbWFjaGluZS4gSWYgdGhpc1xuICAgKiBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgY3VycmVudCBkZWZhdWx0IGluIHRoaXMgbGlicmFyeSB3aWxsIGJlIHVzZWQuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBhdXRoZW50aWNhdG9yVVJMOiA/c3RyaW5nXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gc2NvcGVzIC0gcGVybWlzc2lvbnMgdGhpcyBhcHAgaXMgcmVxdWVzdGluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwRG9tYWluIC0gdGhlIGFwcCBkb21haW5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZGlyZWN0UGF0aCAtIHBhdGggb24gYXBwIGRvbWFpbiB0byByZWRpcmVjdCB1c2VycyB0byBhZnRlciBhdXRoZW50aWNhdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFuaWZlc3RQYXRoIC0gcGF0aCByZWxhdGl2ZSB0byBhcHAgZG9tYWluIG9mIGFwcCdzIG1hbmlmZXN0IGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvcmVOb2RlIC0gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3IgdXNlciBzZWxlY3RlZCBjb3JlIG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF1dGhlbnRpY2F0b3JVUkwgLSB0aGUgd2ViLWJhc2VkIGZhbGwgYmFjayBhdXRoZW50aWNhdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzY29wZXM6IEFycmF5PHN0cmluZz4gPSBERUZBVUxUX1NDT1BFLnNsaWNlKCksXG4gICAgICAgICAgICAgIGFwcERvbWFpbjogc3RyaW5nID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICAgICAgcmVkaXJlY3RQYXRoOiBzdHJpbmcgPSAnJyxcbiAgICAgICAgICAgICAgbWFuaWZlc3RQYXRoOiBzdHJpbmcgPSAnL21hbmlmZXN0Lmpzb24nLFxuICAgICAgICAgICAgICBjb3JlTm9kZTogP3N0cmluZyA9IG51bGwsXG4gICAgICAgICAgICAgIGF1dGhlbnRpY2F0b3JVUkw6IHN0cmluZyA9IERFRkFVTFRfQkxPQ0tTVEFDS19IT1NUKSB7XG4gICAgdGhpcy5hcHBEb21haW4gPSBhcHBEb21haW5cbiAgICB0aGlzLnNjb3BlcyA9IHNjb3Blc1xuICAgIHRoaXMucmVkaXJlY3RQYXRoID0gcmVkaXJlY3RQYXRoXG4gICAgdGhpcy5tYW5pZmVzdFBhdGggPSBtYW5pZmVzdFBhdGhcblxuICAgIGlmICghY29yZU5vZGUpIHtcbiAgICAgIHRoaXMuY29yZU5vZGUgPSBERUZBVUxUX0NPUkVfTk9ERVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvcmVOb2RlID0gY29yZU5vZGVcbiAgICB9XG5cbiAgICB0aGlzLmF1dGhlbnRpY2F0b3JVUkwgPSBhdXRoZW50aWNhdG9yVVJMXG4gIH1cblxuICAvKipcbiAgICogVGhlIGxvY2F0aW9uIHRvIHdoaWNoIHRoZSBhdXRoZW50aWNhdG9yIHNob3VsZFxuICAgKiByZWRpcmVjdCB0aGUgdXNlci5cbiAgICogQHJldHVybnMge3N0cmluZ30gLSBVUklcbiAgICovXG4gIHJlZGlyZWN0VVJJKCkgOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmFwcERvbWFpbn0ke3RoaXMucmVkaXJlY3RQYXRofWBcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbG9jYXRpb24gb2YgdGhlIGFwcCdzIG1hbmlmZXN0IGZpbGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVVJJXG4gICAqL1xuICBtYW5pZmVzdFVSSSgpIDogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5hcHBEb21haW59JHt0aGlzLm1hbmlmZXN0UGF0aH1gXG4gIH1cbn1cbiJdfQ==