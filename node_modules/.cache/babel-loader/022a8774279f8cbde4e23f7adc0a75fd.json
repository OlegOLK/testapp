{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getAuthRequestFromURL = getAuthRequestFromURL;\nexports.fetchAppManifest = fetchAppManifest;\nexports.redirectUserToApp = redirectUserToApp;\n\nvar _queryString = _interopRequireDefault(require(\"query-string\"));\n\nvar _jsontokens = require(\"jsontokens\");\n\nvar _index = require(\"../index\");\n\nvar _utils = require(\"../utils\");\n\nvar _logger = require(\"../logger\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Retrieves the authentication request from the query string\n * @return {String|null} the authentication request or `null` if\n * the query string parameter `authRequest` is not found\n * @private\n */\n\n\nfunction getAuthRequestFromURL() {\n  var queryDict = _queryString.default.parse(location.search);\n\n  if (queryDict.authRequest !== null && queryDict.authRequest !== undefined) {\n    return queryDict.authRequest.split(\"\".concat(_utils.BLOCKSTACK_HANDLER, \":\")).join('');\n  } else {\n    return null;\n  }\n}\n/**\n * Fetches the contents of the manifest file specified in the authentication request\n *\n * @param  {String} authRequest encoded and signed authentication request\n * @return {Promise<Object|String>} Returns a `Promise` that resolves to the JSON\n * object manifest file unless there's an error in which case rejects with an error\n * message.\n * @private\n */\n\n\nfunction fetchAppManifest(authRequest) {\n  return new Promise(function (resolve, reject) {\n    if (!authRequest) {\n      reject('Invalid auth request');\n    } else {\n      var payload = (0, _jsontokens.decodeToken)(authRequest).payload;\n      var manifestURI = payload.manifest_uri;\n\n      try {\n        _logger.Logger.debug(\"Fetching manifest from \".concat(manifestURI));\n\n        fetch(manifestURI).then(function (response) {\n          return response.text();\n        }).then(function (responseText) {\n          return JSON.parse(responseText);\n        }).then(function (responseJSON) {\n          resolve(responseJSON);\n        }).catch(function (e) {\n          _logger.Logger.debug(e.stack);\n\n          reject('Could not fetch manifest.json');\n        });\n      } catch (e) {\n        _logger.Logger.debug(e.stack);\n\n        reject('Could not fetch manifest.json');\n      }\n    }\n  });\n}\n/**\n * Redirect the user's browser to the app using the `redirect_uri`\n * specified in the authentication request, passing the authentication\n * response token as a query parameter.\n *\n * @param {String} authRequest  encoded and signed authentication request token\n * @param  {String} authResponse encoded and signed authentication response token\n * @return {void}\n * @throws {Error} if there is no redirect uri\n * @private\n */\n\n\nfunction redirectUserToApp(authRequest, authResponse) {\n  var payload = (0, _jsontokens.decodeToken)(authRequest).payload;\n  var redirectURI = payload.redirect_uri;\n\n  _logger.Logger.debug(redirectURI);\n\n  if (redirectURI) {\n    redirectURI = (0, _index.updateQueryStringParameter)(redirectURI, 'authResponse', authResponse);\n  } else {\n    throw new Error('Invalid redirect URI');\n  }\n\n  window.location = redirectURI;\n}","map":null,"metadata":{},"sourceType":"script"}