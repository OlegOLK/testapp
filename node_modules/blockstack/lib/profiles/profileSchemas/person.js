"use strict";

exports.__esModule = true;
exports.Person = void 0;

var _schemaInspector = _interopRequireDefault(require("schema-inspector"));

var _profile = require("../profile");

var _profileTokens = require("../profileTokens");

var _personLegacy = require("./personLegacy");

var _personUtils = require("./personUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const schemaDefinition = {
  type: 'object',
  strict: false,
  properties: {
    '@context': {
      type: 'string',
      optional: true
    },
    '@type': {
      type: 'string'
    },
    '@id': {
      type: 'string',
      optional: true
    },
    name: {
      type: 'string',
      optional: true
    },
    givenName: {
      type: 'string',
      optional: true
    },
    familyName: {
      type: 'string',
      optional: true
    },
    description: {
      type: 'string',
      optional: true
    },
    image: {
      type: 'array',
      optional: true,
      items: {
        type: 'object',
        properties: {
          '@type': {
            type: 'string'
          },
          name: {
            type: 'string',
            optional: true
          },
          contentUrl: {
            type: 'string',
            optional: true
          }
        }
      }
    },
    website: {
      type: 'array',
      optional: true,
      items: {
        type: 'object',
        properties: {
          '@type': {
            type: 'string'
          },
          url: {
            type: 'string',
            optional: true
          }
        }
      }
    },
    account: {
      type: 'array',
      optional: true,
      items: {
        type: 'object',
        properties: {
          '@type': {
            type: 'string'
          },
          service: {
            type: 'string',
            optional: true
          },
          identifier: {
            type: 'string',
            optional: true
          },
          proofType: {
            type: 'string',
            optional: true
          },
          proofUrl: {
            type: 'string',
            optional: true
          },
          proofMessage: {
            type: 'string',
            optional: true
          },
          proofSignature: {
            type: 'string',
            optional: true
          }
        }
      }
    },
    worksFor: {
      type: 'array',
      optional: true,
      items: {
        type: 'object',
        properties: {
          '@type': {
            type: 'string'
          },
          '@id': {
            type: 'string',
            optional: true
          }
        }
      }
    },
    knows: {
      type: 'array',
      optional: true,
      items: {
        type: 'object',
        properties: {
          '@type': {
            type: 'string'
          },
          '@id': {
            type: 'string',
            optional: true
          }
        }
      }
    },
    address: {
      type: 'object',
      optional: true,
      properties: {
        '@type': {
          type: 'string'
        },
        streetAddress: {
          type: 'string',
          optional: true
        },
        addressLocality: {
          type: 'string',
          optional: true
        },
        postalCode: {
          type: 'string',
          optional: true
        },
        addressCountry: {
          type: 'string',
          optional: true
        }
      }
    },
    birthDate: {
      type: 'string',
      optional: true
    },
    taxID: {
      type: 'string',
      optional: true
    }
  }
};

class Person extends _profile.Profile {
  constructor(profile = {}) {
    super(profile);
    this._profile = Object.assign({}, {
      '@type': 'Person'
    }, this._profile);
  }

  static validateSchema(profile, strict = false) {
    schemaDefinition.strict = strict;
    return _schemaInspector.default.validate(schemaDefinition, profile);
  }

  static fromToken(token, publicKeyOrAddress = null) {
    const profile = (0, _profileTokens.extractProfile)(token, publicKeyOrAddress);
    return new Person(profile);
  }

  static fromLegacyFormat(legacyProfile) {
    const profile = (0, _personLegacy.getPersonFromLegacyFormat)(legacyProfile);
    return new Person(profile);
  }

  toJSON() {
    return {
      profile: this.profile(),
      name: this.name(),
      givenName: this.givenName(),
      familyName: this.familyName(),
      description: this.description(),
      avatarUrl: this.avatarUrl(),
      verifiedAccounts: this.verifiedAccounts(),
      address: this.address(),
      birthDate: this.birthDate(),
      connections: this.connections(),
      organizations: this.organizations()
    };
  }

  profile() {
    return Object.assign({}, this._profile);
  }

  name() {
    return (0, _personUtils.getName)(this.profile());
  }

  givenName() {
    return (0, _personUtils.getGivenName)(this.profile());
  }

  familyName() {
    return (0, _personUtils.getFamilyName)(this.profile());
  }

  description() {
    return (0, _personUtils.getDescription)(this.profile());
  }

  avatarUrl() {
    return (0, _personUtils.getAvatarUrl)(this.profile());
  }

  verifiedAccounts(verifications) {
    return (0, _personUtils.getVerifiedAccounts)(this.profile(), verifications);
  }

  address() {
    return (0, _personUtils.getAddress)(this.profile());
  }

  birthDate() {
    return (0, _personUtils.getBirthDate)(this.profile());
  }

  connections() {
    return (0, _personUtils.getConnections)(this.profile());
  }

  organizations() {
    return (0, _personUtils.getOrganizations)(this.profile());
  }

}

exports.Person = Person;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,