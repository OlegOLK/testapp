{"ast":null,"code":"\"use strict\";\n\nvar _possibleConstructorReturn = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nexports.__esModule = true;\nexports.LocalStorageStore = exports.InstanceDataStore = exports.SessionDataStore = void 0;\n\nvar _sessionData = require(\"./sessionData\");\n\nvar _authConstants = require(\"./authConstants\");\n\nvar _errors = require(\"../errors\"); // import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'\n// import { Logger } from '../logger'\n\n/**\n * An abstract class representing the SessionDataStore interface.\n * @type {SessionData}\n */\n\n\nvar SessionDataStore =\n/*#__PURE__*/\nfunction () {\n  function SessionDataStore(sessionOptions) {\n    _classCallCheck(this, SessionDataStore);\n\n    if (sessionOptions) {\n      var newSessionData = new _sessionData.SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  _createClass(SessionDataStore, [{\n    key: \"getSessionData\",\n    value: function getSessionData() {\n      throw new Error('Abstract class');\n    }\n    /* eslint-disable */\n\n  }, {\n    key: \"setSessionData\",\n    value: function setSessionData(session) {\n      throw new Error('Abstract class');\n    }\n  }, {\n    key: \"deleteSessionData\",\n    value: function deleteSessionData() {\n      throw new Error('Abstract class');\n    }\n    /* eslint-enable */\n\n  }]);\n\n  return SessionDataStore;\n}();\n/**\n * Stores session data in the instance of this class.\n * @type {InstanceDataStore}\n */\n\n\nexports.SessionDataStore = SessionDataStore;\n\nvar InstanceDataStore =\n/*#__PURE__*/\nfunction (_SessionDataStore) {\n  _inherits(InstanceDataStore, _SessionDataStore);\n\n  function InstanceDataStore(sessionOptions) {\n    var _this;\n\n    _classCallCheck(this, InstanceDataStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InstanceDataStore).call(this, sessionOptions));\n\n    if (!_this.sessionData) {\n      _this.setSessionData(new _sessionData.SessionData({}));\n    }\n\n    return _this;\n  }\n\n  _createClass(InstanceDataStore, [{\n    key: \"getSessionData\",\n    value: function getSessionData() {\n      if (!this.sessionData) {\n        throw new _errors.NoSessionDataError('No session data was found.');\n      }\n\n      return this.sessionData;\n    }\n  }, {\n    key: \"setSessionData\",\n    value: function setSessionData(session) {\n      this.sessionData = session;\n      return true;\n    }\n  }, {\n    key: \"deleteSessionData\",\n    value: function deleteSessionData() {\n      this.setSessionData(new _sessionData.SessionData({}));\n      return true;\n    }\n  }]);\n\n  return InstanceDataStore;\n}(SessionDataStore);\n/**\n * Stores session data in browser a localStorage entry.\n * @type {LocalStorageStore}\n */\n\n\nexports.InstanceDataStore = InstanceDataStore;\n\nvar LocalStorageStore =\n/*#__PURE__*/\nfunction (_SessionDataStore2) {\n  _inherits(LocalStorageStore, _SessionDataStore2);\n\n  function LocalStorageStore(sessionOptions) {\n    var _this2;\n\n    _classCallCheck(this, LocalStorageStore);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LocalStorageStore).call(this, sessionOptions));\n\n    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && sessionOptions.storeOptions.localStorageKey instanceof String) {\n      _this2.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      _this2.key = _authConstants.LOCALSTORAGE_SESSION_KEY;\n    }\n\n    var data = localStorage.getItem(_this2.key);\n\n    if (!data) {\n      var sessionData = new _sessionData.SessionData({});\n\n      _this2.setSessionData(sessionData);\n    }\n\n    return _this2;\n  }\n\n  _createClass(LocalStorageStore, [{\n    key: \"getSessionData\",\n    value: function getSessionData() {\n      var data = localStorage.getItem(this.key);\n\n      if (!data) {\n        throw new _errors.NoSessionDataError('No session data was found in localStorage');\n      }\n\n      var dataJSON = JSON.parse(data);\n      return _sessionData.SessionData.fromJSON(dataJSON);\n    }\n  }, {\n    key: \"setSessionData\",\n    value: function setSessionData(session) {\n      localStorage.setItem(this.key, session.toString());\n      return true;\n    }\n  }, {\n    key: \"deleteSessionData\",\n    value: function deleteSessionData() {\n      localStorage.removeItem(this.key);\n      this.setSessionData(new _sessionData.SessionData({}));\n      return true;\n    } // checkForLegacyDataAndMigrate(): Promise<SessionData> {\n    //   const legacyTransitKey = localStorage.getItem(BLOCKSTACK_APP_PRIVATE_KEY_LABEL)\n    //   const legacyGaiaConfig = localStorage.getItem(BLOCKSTACK_GAIA_HUB_LABEL)\n    //   const legacyUserData = localStorage.getItem(BLOCKSTACK_STORAGE_LABEL)\n    //\n    //\n    //   if (legacyTransitKey) {\n    //     localStorage.removeItem(BLOCKSTACK_APP_PRIVATE_KEY_LABEL)\n    //   }\n    //\n    //\n    //\n    // }\n\n  }]);\n\n  return LocalStorageStore;\n}(SessionDataStore);\n\nexports.LocalStorageStore = LocalStorageStore;","map":null,"metadata":{},"sourceType":"script"}