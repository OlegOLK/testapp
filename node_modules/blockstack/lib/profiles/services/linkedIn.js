"use strict";

exports.__esModule = true;
exports.LinkedIn = void 0;

var _cheerio = _interopRequireDefault(require("cheerio"));

var _service = require("./service");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class LinkedIn extends _service.Service {
  static getBaseUrls() {
    const baseUrls = ['https://www.linkedin.com/feed/update/', 'http://www.linkedin.com/feed/update/', 'www.linkedin.com/feed/update/'];
    return baseUrls;
  }

  static getProofUrl(proof) {
    const baseUrls = this.getBaseUrls();
    let proofUrl = proof.proof_url.toLowerCase();
    proofUrl = super.prefixScheme(proofUrl);

    for (let i = 0; i < baseUrls.length; i++) {
      if (proofUrl.startsWith(`${baseUrls[i]}`)) {
        return proofUrl;
      }
    }

    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);
  }

  static shouldValidateIdentityInBody() {
    return true;
  }

  static getProofIdentity(searchText) {
    const $ = _cheerio.default.load(searchText);

    const profileLink = $('article').find('.post-meta__profile-link');

    if (profileLink !== undefined) {
      if (profileLink.attr('href') === undefined) {
        return '';
      }

      return profileLink.attr('href').split('/').pop();
    } else {
      return '';
    }
  }

  static getProofStatement(searchText) {
    const $ = _cheerio.default.load(searchText);

    const postContent = $('article').find('.commentary');
    let statement = '';

    if (postContent !== undefined) {
      statement = postContent.text();
    }

    return statement;
  }

}

exports.LinkedIn = LinkedIn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9maWxlcy9zZXJ2aWNlcy9saW5rZWRJbi5qcyJdLCJuYW1lcyI6WyJMaW5rZWRJbiIsIlNlcnZpY2UiLCJnZXRCYXNlVXJscyIsImJhc2VVcmxzIiwiZ2V0UHJvb2ZVcmwiLCJwcm9vZiIsInByb29mVXJsIiwicHJvb2ZfdXJsIiwidG9Mb3dlckNhc2UiLCJwcmVmaXhTY2hlbWUiLCJpIiwibGVuZ3RoIiwic3RhcnRzV2l0aCIsIkVycm9yIiwic2VydmljZSIsInNob3VsZFZhbGlkYXRlSWRlbnRpdHlJbkJvZHkiLCJnZXRQcm9vZklkZW50aXR5Iiwic2VhcmNoVGV4dCIsIiQiLCJjaGVlcmlvIiwibG9hZCIsInByb2ZpbGVMaW5rIiwiZmluZCIsInVuZGVmaW5lZCIsImF0dHIiLCJzcGxpdCIsInBvcCIsImdldFByb29mU3RhdGVtZW50IiwicG9zdENvbnRlbnQiLCJzdGF0ZW1lbnQiLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsUUFBTixTQUF1QkMsZ0JBQXZCLENBQStCO0FBQzdCLFNBQU9DLFdBQVAsR0FBcUI7QUFDbkIsVUFBTUMsUUFBUSxHQUFHLENBQ2YsdUNBRGUsRUFFZixzQ0FGZSxFQUdmLCtCQUhlLENBQWpCO0FBS0EsV0FBT0EsUUFBUDtBQUNEOztBQUVELFNBQU9DLFdBQVAsQ0FBbUJDLEtBQW5CLEVBQWtDO0FBQ2hDLFVBQU1GLFFBQVEsR0FBRyxLQUFLRCxXQUFMLEVBQWpCO0FBRUEsUUFBSUksUUFBUSxHQUFHRCxLQUFLLENBQUNFLFNBQU4sQ0FBZ0JDLFdBQWhCLEVBQWY7QUFDQUYsSUFBQUEsUUFBUSxHQUFHLE1BQU1HLFlBQU4sQ0FBbUJILFFBQW5CLENBQVg7O0FBRUEsU0FBSyxJQUFJSSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHUCxRQUFRLENBQUNRLE1BQTdCLEVBQXFDRCxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDLFVBQUlKLFFBQVEsQ0FBQ00sVUFBVCxDQUFxQixHQUFFVCxRQUFRLENBQUNPLENBQUQsQ0FBSSxFQUFuQyxDQUFKLEVBQTJDO0FBQ3pDLGVBQU9KLFFBQVA7QUFDRDtBQUNGOztBQUNELFVBQU0sSUFBSU8sS0FBSixDQUFXLGFBQVlSLEtBQUssQ0FBQ0UsU0FBVSw2QkFBNEJGLEtBQUssQ0FBQ1MsT0FBUSxFQUFqRixDQUFOO0FBQ0Q7O0FBRUQsU0FBT0MsNEJBQVAsR0FBc0M7QUFDcEMsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBT0MsZ0JBQVAsQ0FBd0JDLFVBQXhCLEVBQTRDO0FBQzFDLFVBQU1DLENBQUMsR0FBR0MsaUJBQVFDLElBQVIsQ0FBYUgsVUFBYixDQUFWOztBQUNBLFVBQU1JLFdBQVcsR0FBR0gsQ0FBQyxDQUFDLFNBQUQsQ0FBRCxDQUFhSSxJQUFiLENBQWtCLDBCQUFsQixDQUFwQjs7QUFFQSxRQUFJRCxXQUFXLEtBQUtFLFNBQXBCLEVBQStCO0FBQzdCLFVBQUlGLFdBQVcsQ0FBQ0csSUFBWixDQUFpQixNQUFqQixNQUE2QkQsU0FBakMsRUFBNEM7QUFDMUMsZUFBTyxFQUFQO0FBQ0Q7O0FBQ0QsYUFBT0YsV0FBVyxDQUFDRyxJQUFaLENBQWlCLE1BQWpCLEVBQXlCQyxLQUF6QixDQUErQixHQUEvQixFQUFvQ0MsR0FBcEMsRUFBUDtBQUNELEtBTEQsTUFLTztBQUNMLGFBQU8sRUFBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0MsaUJBQVAsQ0FBeUJWLFVBQXpCLEVBQTZDO0FBQzNDLFVBQU1DLENBQUMsR0FBR0MsaUJBQVFDLElBQVIsQ0FBYUgsVUFBYixDQUFWOztBQUNBLFVBQU1XLFdBQVcsR0FBR1YsQ0FBQyxDQUFDLFNBQUQsQ0FBRCxDQUFhSSxJQUFiLENBQWtCLGFBQWxCLENBQXBCO0FBQ0EsUUFBSU8sU0FBUyxHQUFHLEVBQWhCOztBQUVBLFFBQUlELFdBQVcsS0FBS0wsU0FBcEIsRUFBK0I7QUFDN0JNLE1BQUFBLFNBQVMsR0FBR0QsV0FBVyxDQUFDRSxJQUFaLEVBQVo7QUFDRDs7QUFFRCxXQUFPRCxTQUFQO0FBQ0Q7O0FBcEQ0QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5pbXBvcnQgY2hlZXJpbyBmcm9tICdjaGVlcmlvJ1xuaW1wb3J0IHsgU2VydmljZSB9IGZyb20gJy4vc2VydmljZSdcblxuY2xhc3MgTGlua2VkSW4gZXh0ZW5kcyBTZXJ2aWNlIHtcbiAgc3RhdGljIGdldEJhc2VVcmxzKCkge1xuICAgIGNvbnN0IGJhc2VVcmxzID0gW1xuICAgICAgJ2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9mZWVkL3VwZGF0ZS8nLFxuICAgICAgJ2h0dHA6Ly93d3cubGlua2VkaW4uY29tL2ZlZWQvdXBkYXRlLycsXG4gICAgICAnd3d3LmxpbmtlZGluLmNvbS9mZWVkL3VwZGF0ZS8nXG4gICAgXVxuICAgIHJldHVybiBiYXNlVXJsc1xuICB9XG5cbiAgc3RhdGljIGdldFByb29mVXJsKHByb29mOiBPYmplY3QpIHtcbiAgICBjb25zdCBiYXNlVXJscyA9IHRoaXMuZ2V0QmFzZVVybHMoKVxuICAgIFxuICAgIGxldCBwcm9vZlVybCA9IHByb29mLnByb29mX3VybC50b0xvd2VyQ2FzZSgpXG4gICAgcHJvb2ZVcmwgPSBzdXBlci5wcmVmaXhTY2hlbWUocHJvb2ZVcmwpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhc2VVcmxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvb2ZVcmwuc3RhcnRzV2l0aChgJHtiYXNlVXJsc1tpXX1gKSkge1xuICAgICAgICByZXR1cm4gcHJvb2ZVcmxcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQcm9vZiB1cmwgJHtwcm9vZi5wcm9vZl91cmx9IGlzIG5vdCB2YWxpZCBmb3Igc2VydmljZSAke3Byb29mLnNlcnZpY2V9YClcbiAgfVxuXG4gIHN0YXRpYyBzaG91bGRWYWxpZGF0ZUlkZW50aXR5SW5Cb2R5KCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvb2ZJZGVudGl0eShzZWFyY2hUZXh0OiBzdHJpbmcpIHtcbiAgICBjb25zdCAkID0gY2hlZXJpby5sb2FkKHNlYXJjaFRleHQpXG4gICAgY29uc3QgcHJvZmlsZUxpbmsgPSAkKCdhcnRpY2xlJykuZmluZCgnLnBvc3QtbWV0YV9fcHJvZmlsZS1saW5rJylcblxuICAgIGlmIChwcm9maWxlTGluayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAocHJvZmlsZUxpbmsuYXR0cignaHJlZicpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvZmlsZUxpbmsuYXR0cignaHJlZicpLnNwbGl0KCcvJykucG9wKClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFByb29mU3RhdGVtZW50KHNlYXJjaFRleHQ6IHN0cmluZykge1xuICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoc2VhcmNoVGV4dClcbiAgICBjb25zdCBwb3N0Q29udGVudCA9ICQoJ2FydGljbGUnKS5maW5kKCcuY29tbWVudGFyeScpXG4gICAgbGV0IHN0YXRlbWVudCA9ICcnXG5cbiAgICBpZiAocG9zdENvbnRlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RhdGVtZW50ID0gcG9zdENvbnRlbnQudGV4dCgpXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlbWVudFxuICB9XG59XG5cbmV4cG9ydCB7IExpbmtlZEluIH1cbiJdfQ==