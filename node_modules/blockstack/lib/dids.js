"use strict";

exports.__esModule = true;
exports.makeDIDFromAddress = makeDIDFromAddress;
exports.makeDIDFromPublicKey = makeDIDFromPublicKey;
exports.getDIDType = getDIDType;
exports.getAddressFromDID = getAddressFromDID;

var _errors = require("./errors");

function makeDIDFromAddress(address) {
  return `did:btc-addr:${address}`;
}

function makeDIDFromPublicKey(publicKey) {
  return `did:ecdsa-pub:${publicKey}`;
}

function getDIDType(decentralizedID) {
  const didParts = decentralizedID.split(':');

  if (didParts.length !== 3) {
    throw new _errors.InvalidDIDError('Decentralized IDs must have 3 parts');
  }

  if (didParts[0].toLowerCase() !== 'did') {
    throw new _errors.InvalidDIDError('Decentralized IDs must start with "did"');
  }

  return didParts[1].toLowerCase();
}

function getAddressFromDID(decentralizedID) {
  const didType = getDIDType(decentralizedID);

  if (didType === 'btc-addr') {
    return decentralizedID.split(':')[2];
  } else {
    return null;
  }
}
/*
export function getPublicKeyOrAddressFromDID(decentralizedID) {
  const didParts = decentralizedID.split(':')

  if (didParts.length !== 3) {
    throw new InvalidDIDError('Decentralized IDs must have 3 parts')
  }

  if (didParts[0].toLowerCase() !== 'did') {
    throw new InvalidDIDError('Decentralized IDs must start with "did"')
  }

  if (didParts[1].toLowerCase() === 'ecdsa-pub') {
    return didParts[2]
  } else if (didParts[1].toLowerCase() === 'btc-addr') {
    return didParts[2]
  } else {
    throw new InvalidDIDError('Decentralized ID format not supported')
  }
}
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kaWRzLmpzIl0sIm5hbWVzIjpbIm1ha2VESURGcm9tQWRkcmVzcyIsImFkZHJlc3MiLCJtYWtlRElERnJvbVB1YmxpY0tleSIsInB1YmxpY0tleSIsImdldERJRFR5cGUiLCJkZWNlbnRyYWxpemVkSUQiLCJkaWRQYXJ0cyIsInNwbGl0IiwibGVuZ3RoIiwiSW52YWxpZERJREVycm9yIiwidG9Mb3dlckNhc2UiLCJnZXRBZGRyZXNzRnJvbURJRCIsImRpZFR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRU8sU0FBU0Esa0JBQVQsQ0FBNEJDLE9BQTVCLEVBQXFDO0FBQzFDLFNBQVEsZ0JBQWVBLE9BQVEsRUFBL0I7QUFDRDs7QUFFTSxTQUFTQyxvQkFBVCxDQUE4QkMsU0FBOUIsRUFBeUM7QUFDOUMsU0FBUSxpQkFBZ0JBLFNBQVUsRUFBbEM7QUFDRDs7QUFFTSxTQUFTQyxVQUFULENBQW9CQyxlQUFwQixFQUFxQztBQUMxQyxRQUFNQyxRQUFRLEdBQUdELGVBQWUsQ0FBQ0UsS0FBaEIsQ0FBc0IsR0FBdEIsQ0FBakI7O0FBRUEsTUFBSUQsUUFBUSxDQUFDRSxNQUFULEtBQW9CLENBQXhCLEVBQTJCO0FBQ3pCLFVBQU0sSUFBSUMsdUJBQUosQ0FBb0IscUNBQXBCLENBQU47QUFDRDs7QUFFRCxNQUFJSCxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVlJLFdBQVosT0FBOEIsS0FBbEMsRUFBeUM7QUFDdkMsVUFBTSxJQUFJRCx1QkFBSixDQUFvQix5Q0FBcEIsQ0FBTjtBQUNEOztBQUVELFNBQU9ILFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWUksV0FBWixFQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsaUJBQVQsQ0FBMkJOLGVBQTNCLEVBQTRDO0FBQ2pELFFBQU1PLE9BQU8sR0FBR1IsVUFBVSxDQUFDQyxlQUFELENBQTFCOztBQUVBLE1BQUlPLE9BQU8sS0FBSyxVQUFoQixFQUE0QjtBQUMxQixXQUFPUCxlQUFlLENBQUNFLEtBQWhCLENBQXNCLEdBQXRCLEVBQTJCLENBQTNCLENBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLElBQVA7QUFDRDtBQUNGO0FBRUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnZhbGlkRElERXJyb3IgfSBmcm9tICcuL2Vycm9ycydcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VESURGcm9tQWRkcmVzcyhhZGRyZXNzKSB7XG4gIHJldHVybiBgZGlkOmJ0Yy1hZGRyOiR7YWRkcmVzc31gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRElERnJvbVB1YmxpY0tleShwdWJsaWNLZXkpIHtcbiAgcmV0dXJuIGBkaWQ6ZWNkc2EtcHViOiR7cHVibGljS2V5fWBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERJRFR5cGUoZGVjZW50cmFsaXplZElEKSB7XG4gIGNvbnN0IGRpZFBhcnRzID0gZGVjZW50cmFsaXplZElELnNwbGl0KCc6JylcbiAgXG4gIGlmIChkaWRQYXJ0cy5sZW5ndGggIT09IDMpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZERJREVycm9yKCdEZWNlbnRyYWxpemVkIElEcyBtdXN0IGhhdmUgMyBwYXJ0cycpXG4gIH1cblxuICBpZiAoZGlkUGFydHNbMF0udG9Mb3dlckNhc2UoKSAhPT0gJ2RpZCcpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZERJREVycm9yKCdEZWNlbnRyYWxpemVkIElEcyBtdXN0IHN0YXJ0IHdpdGggXCJkaWRcIicpXG4gIH1cblxuICByZXR1cm4gZGlkUGFydHNbMV0udG9Mb3dlckNhc2UoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRkcmVzc0Zyb21ESUQoZGVjZW50cmFsaXplZElEKSB7XG4gIGNvbnN0IGRpZFR5cGUgPSBnZXRESURUeXBlKGRlY2VudHJhbGl6ZWRJRClcbiAgXG4gIGlmIChkaWRUeXBlID09PSAnYnRjLWFkZHInKSB7XG4gICAgcmV0dXJuIGRlY2VudHJhbGl6ZWRJRC5zcGxpdCgnOicpWzJdXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vKlxuZXhwb3J0IGZ1bmN0aW9uIGdldFB1YmxpY0tleU9yQWRkcmVzc0Zyb21ESUQoZGVjZW50cmFsaXplZElEKSB7XG4gIGNvbnN0IGRpZFBhcnRzID0gZGVjZW50cmFsaXplZElELnNwbGl0KCc6JylcblxuICBpZiAoZGlkUGFydHMubGVuZ3RoICE9PSAzKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRESURFcnJvcignRGVjZW50cmFsaXplZCBJRHMgbXVzdCBoYXZlIDMgcGFydHMnKVxuICB9XG5cbiAgaWYgKGRpZFBhcnRzWzBdLnRvTG93ZXJDYXNlKCkgIT09ICdkaWQnKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRESURFcnJvcignRGVjZW50cmFsaXplZCBJRHMgbXVzdCBzdGFydCB3aXRoIFwiZGlkXCInKVxuICB9XG5cbiAgaWYgKGRpZFBhcnRzWzFdLnRvTG93ZXJDYXNlKCkgPT09ICdlY2RzYS1wdWInKSB7XG4gICAgcmV0dXJuIGRpZFBhcnRzWzJdXG4gIH0gZWxzZSBpZiAoZGlkUGFydHNbMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2J0Yy1hZGRyJykge1xuICAgIHJldHVybiBkaWRQYXJ0c1syXVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBJbnZhbGlkRElERXJyb3IoJ0RlY2VudHJhbGl6ZWQgSUQgZm9ybWF0IG5vdCBzdXBwb3J0ZWQnKVxuICB9XG59XG4qL1xuIl19