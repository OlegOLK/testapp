{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nexports.__esModule = true;\nexports.Person = void 0;\n\nvar _schemaInspector = _interopRequireDefault(require(\"schema-inspector\"));\n\nvar _profile = require(\"../profile\");\n\nvar _profileTokens = require(\"../profileTokens\");\n\nvar _personLegacy = require(\"./personLegacy\");\n\nvar _personUtils = require(\"./personUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar schemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    },\n    '@id': {\n      type: 'string',\n      optional: true\n    },\n    name: {\n      type: 'string',\n      optional: true\n    },\n    givenName: {\n      type: 'string',\n      optional: true\n    },\n    familyName: {\n      type: 'string',\n      optional: true\n    },\n    description: {\n      type: 'string',\n      optional: true\n    },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          name: {\n            type: 'string',\n            optional: true\n          },\n          contentUrl: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          url: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          service: {\n            type: 'string',\n            optional: true\n          },\n          identifier: {\n            type: 'string',\n            optional: true\n          },\n          proofType: {\n            type: 'string',\n            optional: true\n          },\n          proofUrl: {\n            type: 'string',\n            optional: true\n          },\n          proofMessage: {\n            type: 'string',\n            optional: true\n          },\n          proofSignature: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': {\n          type: 'string'\n        },\n        streetAddress: {\n          type: 'string',\n          optional: true\n        },\n        addressLocality: {\n          type: 'string',\n          optional: true\n        },\n        postalCode: {\n          type: 'string',\n          optional: true\n        },\n        addressCountry: {\n          type: 'string',\n          optional: true\n        }\n      }\n    },\n    birthDate: {\n      type: 'string',\n      optional: true\n    },\n    taxID: {\n      type: 'string',\n      optional: true\n    }\n  }\n};\n\nvar Person =\n/*#__PURE__*/\nfunction (_profile$Profile) {\n  _inherits(Person, _profile$Profile);\n\n  function Person() {\n    var _this;\n\n    var profile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Person);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Person).call(this, profile));\n    _this._profile = Object.assign({}, {\n      '@type': 'Person'\n    }, _this._profile);\n    return _this;\n  }\n\n  _createClass(Person, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        profile: this.profile(),\n        name: this.name(),\n        givenName: this.givenName(),\n        familyName: this.familyName(),\n        description: this.description(),\n        avatarUrl: this.avatarUrl(),\n        verifiedAccounts: this.verifiedAccounts(),\n        address: this.address(),\n        birthDate: this.birthDate(),\n        connections: this.connections(),\n        organizations: this.organizations()\n      };\n    }\n  }, {\n    key: \"profile\",\n    value: function profile() {\n      return Object.assign({}, this._profile);\n    }\n  }, {\n    key: \"name\",\n    value: function name() {\n      return (0, _personUtils.getName)(this.profile());\n    }\n  }, {\n    key: \"givenName\",\n    value: function givenName() {\n      return (0, _personUtils.getGivenName)(this.profile());\n    }\n  }, {\n    key: \"familyName\",\n    value: function familyName() {\n      return (0, _personUtils.getFamilyName)(this.profile());\n    }\n  }, {\n    key: \"description\",\n    value: function description() {\n      return (0, _personUtils.getDescription)(this.profile());\n    }\n  }, {\n    key: \"avatarUrl\",\n    value: function avatarUrl() {\n      return (0, _personUtils.getAvatarUrl)(this.profile());\n    }\n  }, {\n    key: \"verifiedAccounts\",\n    value: function verifiedAccounts(verifications) {\n      return (0, _personUtils.getVerifiedAccounts)(this.profile(), verifications);\n    }\n  }, {\n    key: \"address\",\n    value: function address() {\n      return (0, _personUtils.getAddress)(this.profile());\n    }\n  }, {\n    key: \"birthDate\",\n    value: function birthDate() {\n      return (0, _personUtils.getBirthDate)(this.profile());\n    }\n  }, {\n    key: \"connections\",\n    value: function connections() {\n      return (0, _personUtils.getConnections)(this.profile());\n    }\n  }, {\n    key: \"organizations\",\n    value: function organizations() {\n      return (0, _personUtils.getOrganizations)(this.profile());\n    }\n  }], [{\n    key: \"validateSchema\",\n    value: function validateSchema(profile) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      schemaDefinition.strict = strict;\n      return _schemaInspector.default.validate(schemaDefinition, profile);\n    }\n  }, {\n    key: \"fromToken\",\n    value: function fromToken(token) {\n      var publicKeyOrAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var profile = (0, _profileTokens.extractProfile)(token, publicKeyOrAddress);\n      return new Person(profile);\n    }\n  }, {\n    key: \"fromLegacyFormat\",\n    value: function fromLegacyFormat(legacyProfile) {\n      var profile = (0, _personLegacy.getPersonFromLegacyFormat)(legacyProfile);\n      return new Person(profile);\n    }\n  }]);\n\n  return Person;\n}(_profile.Profile);\n\nexports.Person = Person;","map":null,"metadata":{},"sourceType":"script"}