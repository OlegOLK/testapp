"use strict";

exports.__esModule = true;
exports.uploadToGaiaHub = uploadToGaiaHub;
exports.getFullReadUrl = getFullReadUrl;
exports.connectToGaiaHub = connectToGaiaHub;
exports.setLocalGaiaHubConnection = setLocalGaiaHubConnection;
exports.getOrSetLocalGaiaHubConnection = getOrSetLocalGaiaHubConnection;
exports.getBucketUrl = getBucketUrl;
exports.BLOCKSTACK_GAIA_HUB_LABEL = void 0;

var _bitcoinjsLib = _interopRequireDefault(require("bitcoinjs-lib"));

var _crypto = _interopRequireDefault(require("crypto"));

var _jsontokens = require("jsontokens");

var _utils = require("../utils");

var _index = require("../index");

var _authConstants = require("../auth/authConstants");

var _userSession = require("../auth/userSession");

var _logger = require("../logger");

var _errors = require("../errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BLOCKSTACK_GAIA_HUB_LABEL = 'blockstack-gaia-hub-config';
exports.BLOCKSTACK_GAIA_HUB_LABEL = BLOCKSTACK_GAIA_HUB_LABEL;

function uploadToGaiaHub(filename, contents, hubConfig, contentType = 'application/octet-stream') {
  _logger.Logger.debug(`uploadToGaiaHub: uploading ${filename} to ${hubConfig.server}`);

  return fetch(`${hubConfig.server}/store/${hubConfig.address}/${filename}`, {
    method: 'POST',
    headers: {
      'Content-Type': contentType,
      Authorization: `bearer ${hubConfig.token}`
    },
    body: contents
  }).then(response => {
    if (response.ok) {
      return response.text();
    } else {
      throw new Error('Error when uploading to Gaia hub');
    }
  }).then(responseText => JSON.parse(responseText)).then(responseJSON => responseJSON.publicURL);
}

function getFullReadUrl(filename, hubConfig) {
  return `${hubConfig.url_prefix}${hubConfig.address}/${filename}`;
}

function makeLegacyAuthToken(challengeText, signerKeyHex) {
  // only sign specific legacy auth challenges.
  let parsedChallenge;

  try {
    parsedChallenge = JSON.parse(challengeText);
  } catch (err) {
    throw new Error('Failed in parsing legacy challenge text from the gaia hub.');
  }

  if (parsedChallenge[0] === 'gaiahub' && parsedChallenge[3] === 'blockstack_storage_please_sign') {
    const signer = (0, _index.hexStringToECPair)(signerKeyHex + (signerKeyHex.length === 64 ? '01' : ''));

    const digest = _bitcoinjsLib.default.crypto.sha256(challengeText);

    const signature = signer.sign(digest).toDER().toString('hex');
    const publickey = (0, _index.getPublicKeyFromPrivate)(signerKeyHex);
    const token = Buffer.from(JSON.stringify({
      publickey,
      signature
    })).toString('base64');
    return token;
  } else {
    throw new Error('Failed to connect to legacy gaia hub. If you operate this hub, please update.');
  }
}

function makeV1GaiaAuthToken(hubInfo, signerKeyHex, hubUrl, associationToken) {
  const challengeText = hubInfo.challenge_text;
  const handlesV1Auth = hubInfo.latest_auth_version && parseInt(hubInfo.latest_auth_version.slice(1), 10) >= 1;
  const iss = (0, _index.getPublicKeyFromPrivate)(signerKeyHex);

  if (!handlesV1Auth) {
    return makeLegacyAuthToken(challengeText, signerKeyHex);
  }

  const salt = _crypto.default.randomBytes(16).toString('hex');

  const payload = {
    gaiaChallenge: challengeText,
    hubUrl,
    iss,
    salt,
    associationToken
  };
  const token = new _jsontokens.TokenSigner('ES256K', signerKeyHex).sign(payload);
  return `v1:${token}`;
}

function connectToGaiaHub(gaiaHubUrl, challengeSignerHex, associationToken) {
  _logger.Logger.debug(`connectToGaiaHub: ${gaiaHubUrl}/hub_info`);

  return fetch(`${gaiaHubUrl}/hub_info`).then(response => response.json()).then(hubInfo => {
    const readURL = hubInfo.read_url_prefix;
    const token = makeV1GaiaAuthToken(hubInfo, challengeSignerHex, gaiaHubUrl, associationToken);
    const address = (0, _utils.ecPairToAddress)((0, _index.hexStringToECPair)(challengeSignerHex + (challengeSignerHex.length === 64 ? '01' : '')));
    return {
      url_prefix: readURL,
      address,
      token,
      server: gaiaHubUrl
    };
  });
}
/**
 * These two functions are app-specific connections to gaia hub,
 *   they read the user data object for information on setting up
 *   a hub connection, and store the hub config to localstorage
 * @param {UserSession} caller - the instance calling this function
 * @private
 * @returns {Promise} that resolves to the new gaia hub connection
 */


function setLocalGaiaHubConnection(caller) {
  const userData = caller.loadUserData();

  if (!userData) {
    throw new _errors.InvalidStateError('Missing userData');
  }

  if (!userData.hubUrl) {
    userData.hubUrl = _authConstants.BLOCKSTACK_DEFAULT_GAIA_HUB_URL;
  }

  return connectToGaiaHub(userData.hubUrl, userData.appPrivateKey, userData.associationToken).then(gaiaConfig => {
    userData.gaiaHubConfig = gaiaConfig;
    return gaiaConfig;
  });
}

function getOrSetLocalGaiaHubConnection(caller) {
  const userData = caller.store.getSessionData().userData;

  if (!userData) {
    throw new _errors.InvalidStateError('Missing userData');
  }

  const hubConfig = userData.gaiaHubConfig;

  if (hubConfig) {
    return Promise.resolve(hubConfig);
  }

  return setLocalGaiaHubConnection(caller);
}

function getBucketUrl(gaiaHubUrl, appPrivateKey) {
  let challengeSigner;

  try {
    challengeSigner = _bitcoinjsLib.default.ECPair.fromPrivateKey(new Buffer(appPrivateKey, 'hex'));
  } catch (e) {
    return Promise.reject(e);
  }

  return fetch(`${gaiaHubUrl}/hub_info`).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJSON => {
    const readURL = responseJSON.read_url_prefix;
    const address = (0, _utils.ecPairToAddress)(challengeSigner);
    const bucketUrl = `${readURL}${address}/`;
    return bucketUrl;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yYWdlL2h1Yi5qcyJdLCJuYW1lcyI6WyJCTE9DS1NUQUNLX0dBSUFfSFVCX0xBQkVMIiwidXBsb2FkVG9HYWlhSHViIiwiZmlsZW5hbWUiLCJjb250ZW50cyIsImh1YkNvbmZpZyIsImNvbnRlbnRUeXBlIiwiTG9nZ2VyIiwiZGVidWciLCJzZXJ2ZXIiLCJmZXRjaCIsImFkZHJlc3MiLCJtZXRob2QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsInRva2VuIiwiYm9keSIsInRoZW4iLCJyZXNwb25zZSIsIm9rIiwidGV4dCIsIkVycm9yIiwicmVzcG9uc2VUZXh0IiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VKU09OIiwicHVibGljVVJMIiwiZ2V0RnVsbFJlYWRVcmwiLCJ1cmxfcHJlZml4IiwibWFrZUxlZ2FjeUF1dGhUb2tlbiIsImNoYWxsZW5nZVRleHQiLCJzaWduZXJLZXlIZXgiLCJwYXJzZWRDaGFsbGVuZ2UiLCJlcnIiLCJzaWduZXIiLCJsZW5ndGgiLCJkaWdlc3QiLCJiaXRjb2luIiwiY3J5cHRvIiwic2hhMjU2Iiwic2lnbmF0dXJlIiwic2lnbiIsInRvREVSIiwidG9TdHJpbmciLCJwdWJsaWNrZXkiLCJCdWZmZXIiLCJmcm9tIiwic3RyaW5naWZ5IiwibWFrZVYxR2FpYUF1dGhUb2tlbiIsImh1YkluZm8iLCJodWJVcmwiLCJhc3NvY2lhdGlvblRva2VuIiwiY2hhbGxlbmdlX3RleHQiLCJoYW5kbGVzVjFBdXRoIiwibGF0ZXN0X2F1dGhfdmVyc2lvbiIsInBhcnNlSW50Iiwic2xpY2UiLCJpc3MiLCJzYWx0IiwicmFuZG9tQnl0ZXMiLCJwYXlsb2FkIiwiZ2FpYUNoYWxsZW5nZSIsIlRva2VuU2lnbmVyIiwiY29ubmVjdFRvR2FpYUh1YiIsImdhaWFIdWJVcmwiLCJjaGFsbGVuZ2VTaWduZXJIZXgiLCJqc29uIiwicmVhZFVSTCIsInJlYWRfdXJsX3ByZWZpeCIsInNldExvY2FsR2FpYUh1YkNvbm5lY3Rpb24iLCJjYWxsZXIiLCJ1c2VyRGF0YSIsImxvYWRVc2VyRGF0YSIsIkludmFsaWRTdGF0ZUVycm9yIiwiQkxPQ0tTVEFDS19ERUZBVUxUX0dBSUFfSFVCX1VSTCIsImFwcFByaXZhdGVLZXkiLCJnYWlhQ29uZmlnIiwiZ2FpYUh1YkNvbmZpZyIsImdldE9yU2V0TG9jYWxHYWlhSHViQ29ubmVjdGlvbiIsInN0b3JlIiwiZ2V0U2Vzc2lvbkRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEJ1Y2tldFVybCIsImNoYWxsZW5nZVNpZ25lciIsIkVDUGFpciIsImZyb21Qcml2YXRlS2V5IiwiZSIsInJlamVjdCIsImJ1Y2tldFVybCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLHlCQUF5QixHQUFHLDRCQUFsQzs7O0FBU0EsU0FBU0MsZUFBVCxDQUF5QkMsUUFBekIsRUFBMkNDLFFBQTNDLEVBQ3lCQyxTQUR6QixFQUV5QkMsV0FBbUIsR0FBRywwQkFGL0MsRUFFdUY7QUFDNUZDLGlCQUFPQyxLQUFQLENBQWMsOEJBQTZCTCxRQUFTLE9BQU1FLFNBQVMsQ0FBQ0ksTUFBTyxFQUEzRTs7QUFDQSxTQUFPQyxLQUFLLENBQUUsR0FBRUwsU0FBUyxDQUFDSSxNQUFPLFVBQVNKLFNBQVMsQ0FBQ00sT0FBUSxJQUFHUixRQUFTLEVBQTVELEVBQ0M7QUFDRVMsSUFBQUEsTUFBTSxFQUFFLE1BRFY7QUFFRUMsSUFBQUEsT0FBTyxFQUFFO0FBQ1Asc0JBQWdCUCxXQURUO0FBRVBRLE1BQUFBLGFBQWEsRUFBRyxVQUFTVCxTQUFTLENBQUNVLEtBQU07QUFGbEMsS0FGWDtBQU1FQyxJQUFBQSxJQUFJLEVBQUVaO0FBTlIsR0FERCxDQUFMLENBU0phLElBVEksQ0FTRUMsUUFBRCxJQUFjO0FBQ2xCLFFBQUlBLFFBQVEsQ0FBQ0MsRUFBYixFQUFpQjtBQUNmLGFBQU9ELFFBQVEsQ0FBQ0UsSUFBVCxFQUFQ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QUFJQSxRQUFRLENBQUNFLElBQVQsRUFEYixFQUVKSCxJQUZJLENBRUNLLFlBQVksSUFBSUMsSUFBSSxDQUFDQyxLQUFMLENBQVdGLFlBQVgsQ0FGakIsRUFHSkwsSUFISSxDQUdFUSxZQUFELElBQWtCO0FBQ3RCLFVBQU0wQyxPQUFPLEdBQUcxQyxZQUFZLENBQUMyQyxlQUE3QjtBQUNBLFVBQU16RCxPQUFPLEdBQUcsNEJBQWdCeUUsZUFBaEIsQ0FBaEI7QUFDQSxVQUFNSyxTQUFTLEdBQUksR0FBRXRCLE9BQVEsR0FBRXhELE9BQVEsR0FBdkM7QUFDQSxXQUFPOEUsU0FBUDtBQUNELEdBUkksQ0FBUDtBQVNEIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbmltcG9ydCBiaXRjb2luIGZyb20gJ2JpdGNvaW5qcy1saWInXG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0bydcblxuaW1wb3J0IHsgVG9rZW5TaWduZXIgfSBmcm9tICdqc29udG9rZW5zJ1xuaW1wb3J0IHsgZWNQYWlyVG9BZGRyZXNzIH0gZnJvbSAnLi4vdXRpbHMnXG5pbXBvcnQgeyBnZXRQdWJsaWNLZXlGcm9tUHJpdmF0ZSwgaGV4U3RyaW5nVG9FQ1BhaXIgfSBmcm9tICcuLi9pbmRleCdcbmltcG9ydCB7IEJMT0NLU1RBQ0tfREVGQVVMVF9HQUlBX0hVQl9VUkwgfSBmcm9tICcuLi9hdXRoL2F1dGhDb25zdGFudHMnXG5cbmltcG9ydCB7IFVzZXJTZXNzaW9uIH0gZnJvbSAnLi4vYXV0aC91c2VyU2Vzc2lvbidcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZ2dlcidcbmltcG9ydCB7IEludmFsaWRTdGF0ZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzJ1xuXG5leHBvcnQgY29uc3QgQkxPQ0tTVEFDS19HQUlBX0hVQl9MQUJFTCA9ICdibG9ja3N0YWNrLWdhaWEtaHViLWNvbmZpZydcblxuZXhwb3J0IHR5cGUgR2FpYUh1YkNvbmZpZyA9IHtcbiAgYWRkcmVzczogc3RyaW5nLFxuICB1cmxfcHJlZml4OiBzdHJpbmcsXG4gIHRva2VuOiBzdHJpbmcsXG4gIHNlcnZlcjogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWRUb0dhaWFIdWIoZmlsZW5hbWU6IHN0cmluZywgY29udGVudHM6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHViQ29uZmlnOiBHYWlhSHViQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogc3RyaW5nID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpOiBQcm9taXNlPCo+IHtcbiAgTG9nZ2VyLmRlYnVnKGB1cGxvYWRUb0dhaWFIdWI6IHVwbG9hZGluZyAke2ZpbGVuYW1lfSB0byAke2h1YkNvbmZpZy5zZXJ2ZXJ9YClcbiAgcmV0dXJuIGZldGNoKGAke2h1YkNvbmZpZy5zZXJ2ZXJ9L3N0b3JlLyR7aHViQ29uZmlnLmFkZHJlc3N9LyR7ZmlsZW5hbWV9YCxcbiAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogY29udGVudFR5cGUsXG4gICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYGJlYXJlciAke2h1YkNvbmZpZy50b2tlbn1gXG4gICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgIGJvZHk6IGNvbnRlbnRzXG4gICAgICAgICAgICAgICB9KVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3Igd2hlbiB1cGxvYWRpbmcgdG8gR2FpYSBodWInKVxuICAgICAgfVxuICAgIH0pXG4gICAgLnRoZW4ocmVzcG9uc2VUZXh0ID0+IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSlcbiAgICAudGhlbihyZXNwb25zZUpTT04gPT4gcmVzcG9uc2VKU09OLnB1YmxpY1VSTClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bGxSZWFkVXJsKGZpbGVuYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHViQ29uZmlnOiBHYWlhSHViQ29uZmlnKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2h1YkNvbmZpZy51cmxfcHJlZml4fSR7aHViQ29uZmlnLmFkZHJlc3N9LyR7ZmlsZW5hbWV9YFxufVxuXG5mdW5jdGlvbiBtYWtlTGVnYWN5QXV0aFRva2VuKGNoYWxsZW5nZVRleHQ6IHN0cmluZywgc2lnbmVyS2V5SGV4OiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBvbmx5IHNpZ24gc3BlY2lmaWMgbGVnYWN5IGF1dGggY2hhbGxlbmdlcy5cbiAgbGV0IHBhcnNlZENoYWxsZW5nZVxuICB0cnkge1xuICAgIHBhcnNlZENoYWxsZW5nZSA9IEpTT04ucGFyc2UoY2hhbGxlbmdlVGV4dClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgaW4gcGFyc2luZyBsZWdhY3kgY2hhbGxlbmdlIHRleHQgZnJvbSB0aGUgZ2FpYSBodWIuJylcbiAgfVxuICBpZiAocGFyc2VkQ2hhbGxlbmdlWzBdID09PSAnZ2FpYWh1YidcbiAgICAgICYmIHBhcnNlZENoYWxsZW5nZVszXSA9PT0gJ2Jsb2Nrc3RhY2tfc3RvcmFnZV9wbGVhc2Vfc2lnbicpIHtcbiAgICBjb25zdCBzaWduZXIgPSBoZXhTdHJpbmdUb0VDUGFpcihzaWduZXJLZXlIZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChzaWduZXJLZXlIZXgubGVuZ3RoID09PSA2NCA/ICcwMScgOiAnJykpXG4gICAgY29uc3QgZGlnZXN0ID0gYml0Y29pbi5jcnlwdG8uc2hhMjU2KGNoYWxsZW5nZVRleHQpXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gc2lnbmVyLnNpZ24oZGlnZXN0KS50b0RFUigpLnRvU3RyaW5nKCdoZXgnKVxuICAgIGNvbnN0IHB1YmxpY2tleSA9IGdldFB1YmxpY0tleUZyb21Qcml2YXRlKHNpZ25lcktleUhleClcbiAgICBjb25zdCB0b2tlbiA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KFxuICAgICAgeyBwdWJsaWNrZXksIHNpZ25hdHVyZSB9XG4gICAgKSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgcmV0dXJuIHRva2VuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY29ubmVjdCB0byBsZWdhY3kgZ2FpYSBodWIuIElmIHlvdSBvcGVyYXRlIHRoaXMgaHViLCBwbGVhc2UgdXBkYXRlLicpXG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVYxR2FpYUF1dGhUb2tlbihodWJJbmZvOiBPYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25lcktleUhleDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodWJVcmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb25Ub2tlbj86IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGNoYWxsZW5nZVRleHQgPSBodWJJbmZvLmNoYWxsZW5nZV90ZXh0XG4gIGNvbnN0IGhhbmRsZXNWMUF1dGggPSAoaHViSW5mby5sYXRlc3RfYXV0aF92ZXJzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgJiYgcGFyc2VJbnQoaHViSW5mby5sYXRlc3RfYXV0aF92ZXJzaW9uLnNsaWNlKDEpLCAxMCkgPj0gMSlcbiAgY29uc3QgaXNzID0gZ2V0UHVibGljS2V5RnJvbVByaXZhdGUoc2lnbmVyS2V5SGV4KVxuXG4gIGlmICghaGFuZGxlc1YxQXV0aCkge1xuICAgIHJldHVybiBtYWtlTGVnYWN5QXV0aFRva2VuKGNoYWxsZW5nZVRleHQsIHNpZ25lcktleUhleClcbiAgfVxuXG4gIGNvbnN0IHNhbHQgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoMTYpLnRvU3RyaW5nKCdoZXgnKVxuICBjb25zdCBwYXlsb2FkID0ge1xuICAgIGdhaWFDaGFsbGVuZ2U6IGNoYWxsZW5nZVRleHQsXG4gICAgaHViVXJsLFxuICAgIGlzcyxcbiAgICBzYWx0LFxuICAgIGFzc29jaWF0aW9uVG9rZW5cbiAgfVxuICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlblNpZ25lcignRVMyNTZLJywgc2lnbmVyS2V5SGV4KS5zaWduKHBheWxvYWQpXG4gIHJldHVybiBgdjE6JHt0b2tlbn1gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0VG9HYWlhSHViKGdhaWFIdWJVcmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZVNpZ25lckhleDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzb2NpYXRpb25Ub2tlbj86IHN0cmluZyk6IFByb21pc2U8R2FpYUh1YkNvbmZpZz4ge1xuICBMb2dnZXIuZGVidWcoYGNvbm5lY3RUb0dhaWFIdWI6ICR7Z2FpYUh1YlVybH0vaHViX2luZm9gKVxuXG4gIHJldHVybiBmZXRjaChgJHtnYWlhSHViVXJsfS9odWJfaW5mb2ApXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgIC50aGVuKChodWJJbmZvKSA9PiB7XG4gICAgICBjb25zdCByZWFkVVJMID0gaHViSW5mby5yZWFkX3VybF9wcmVmaXhcbiAgICAgIGNvbnN0IHRva2VuID0gbWFrZVYxR2FpYUF1dGhUb2tlbihodWJJbmZvLCBjaGFsbGVuZ2VTaWduZXJIZXgsIGdhaWFIdWJVcmwsIGFzc29jaWF0aW9uVG9rZW4pXG4gICAgICBjb25zdCBhZGRyZXNzID0gZWNQYWlyVG9BZGRyZXNzKGhleFN0cmluZ1RvRUNQYWlyKGNoYWxsZW5nZVNpZ25lckhleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKGNoYWxsZW5nZVNpZ25lckhleC5sZW5ndGggPT09IDY0ID8gJzAxJyA6ICcnKSkpXG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmxfcHJlZml4OiByZWFkVVJMLFxuICAgICAgICBhZGRyZXNzLFxuICAgICAgICB0b2tlbixcbiAgICAgICAgc2VydmVyOiBnYWlhSHViVXJsXG4gICAgICB9XG4gICAgfSlcbn1cblxuLyoqXG4gKiBUaGVzZSB0d28gZnVuY3Rpb25zIGFyZSBhcHAtc3BlY2lmaWMgY29ubmVjdGlvbnMgdG8gZ2FpYSBodWIsXG4gKiAgIHRoZXkgcmVhZCB0aGUgdXNlciBkYXRhIG9iamVjdCBmb3IgaW5mb3JtYXRpb24gb24gc2V0dGluZyB1cFxuICogICBhIGh1YiBjb25uZWN0aW9uLCBhbmQgc3RvcmUgdGhlIGh1YiBjb25maWcgdG8gbG9jYWxzdG9yYWdlXG4gKiBAcGFyYW0ge1VzZXJTZXNzaW9ufSBjYWxsZXIgLSB0aGUgaW5zdGFuY2UgY2FsbGluZyB0aGlzIGZ1bmN0aW9uXG4gKiBAcHJpdmF0ZVxuICogQHJldHVybnMge1Byb21pc2V9IHRoYXQgcmVzb2x2ZXMgdG8gdGhlIG5ldyBnYWlhIGh1YiBjb25uZWN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRMb2NhbEdhaWFIdWJDb25uZWN0aW9uKGNhbGxlcjogVXNlclNlc3Npb24pOiBQcm9taXNlPEdhaWFIdWJDb25maWc+IHtcbiAgY29uc3QgdXNlckRhdGEgPSBjYWxsZXIubG9hZFVzZXJEYXRhKClcblxuICBpZiAoIXVzZXJEYXRhKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRTdGF0ZUVycm9yKCdNaXNzaW5nIHVzZXJEYXRhJylcbiAgfVxuXG4gIGlmICghdXNlckRhdGEuaHViVXJsKSB7XG4gICAgdXNlckRhdGEuaHViVXJsID0gQkxPQ0tTVEFDS19ERUZBVUxUX0dBSUFfSFVCX1VSTFxuICB9XG5cbiAgcmV0dXJuIGNvbm5lY3RUb0dhaWFIdWIodXNlckRhdGEuaHViVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YS5hcHBQcml2YXRlS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YS5hc3NvY2lhdGlvblRva2VuKVxuICAgIC50aGVuKChnYWlhQ29uZmlnKSA9PiB7XG4gICAgICB1c2VyRGF0YS5nYWlhSHViQ29uZmlnID0gZ2FpYUNvbmZpZ1xuICAgICAgcmV0dXJuIGdhaWFDb25maWdcbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3JTZXRMb2NhbEdhaWFIdWJDb25uZWN0aW9uKGNhbGxlcjogVXNlclNlc3Npb24pOiBQcm9taXNlPEdhaWFIdWJDb25maWc+IHtcbiAgY29uc3QgdXNlckRhdGEgPSBjYWxsZXIuc3RvcmUuZ2V0U2Vzc2lvbkRhdGEoKS51c2VyRGF0YVxuICBpZiAoIXVzZXJEYXRhKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRTdGF0ZUVycm9yKCdNaXNzaW5nIHVzZXJEYXRhJylcbiAgfVxuICBjb25zdCBodWJDb25maWcgPSB1c2VyRGF0YS5nYWlhSHViQ29uZmlnXG4gIGlmIChodWJDb25maWcpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGh1YkNvbmZpZylcbiAgfVxuICByZXR1cm4gc2V0TG9jYWxHYWlhSHViQ29ubmVjdGlvbihjYWxsZXIpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdWNrZXRVcmwoZ2FpYUh1YlVybDogc3RyaW5nLCBhcHBQcml2YXRlS2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBsZXQgY2hhbGxlbmdlU2lnbmVyXG4gIHRyeSB7XG4gICAgY2hhbGxlbmdlU2lnbmVyID0gYml0Y29pbi5FQ1BhaXIuZnJvbVByaXZhdGVLZXkobmV3IEJ1ZmZlcihhcHBQcml2YXRlS2V5LCAnaGV4JykpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSlcbiAgfVxuXG4gIHJldHVybiBmZXRjaChgJHtnYWlhSHViVXJsfS9odWJfaW5mb2ApXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKVxuICAgIC50aGVuKHJlc3BvbnNlVGV4dCA9PiBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCkpXG4gICAgLnRoZW4oKHJlc3BvbnNlSlNPTikgPT4ge1xuICAgICAgY29uc3QgcmVhZFVSTCA9IHJlc3BvbnNlSlNPTi5yZWFkX3VybF9wcmVmaXhcbiAgICAgIGNvbnN0IGFkZHJlc3MgPSBlY1BhaXJUb0FkZHJlc3MoY2hhbGxlbmdlU2lnbmVyKVxuICAgICAgY29uc3QgYnVja2V0VXJsID0gYCR7cmVhZFVSTH0ke2FkZHJlc3N9L2BcbiAgICAgIHJldHVybiBidWNrZXRVcmxcbiAgICB9KVxufVxuIl19