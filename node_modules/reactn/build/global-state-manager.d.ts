import { Reducers, State } from '../default';
import Callback from './typings/callback';
import Reducer, { Dispatcher, Dispatchers, ExtractArguments } from './typings/reducer';
import { DevToolAction, ReduxEnhancedStore } from './utils/redux-dev-tools';
interface AdditionalReducers<G extends {} = State> {
    [name: string]: Reducer<G, any>;
}
interface AsynchronousNewGlobalState<G extends {} = State> extends Promise<NewGlobalState<G>> {
}
declare type BooleanFunction = () => boolean;
interface FunctionalNewGlobalState<G extends {} = State> {
    (global: G): NewGlobalState<G>;
}
export declare type NewGlobalState<G extends {} = State> = AsynchronousNewGlobalState<G> | FunctionalNewGlobalState<G> | SynchronousNewGlobalState<G>;
export declare type PropertyListener = () => void;
declare type SynchronousNewGlobalState<G extends {} = State> = null | Partial<G> | void;
export declare const INVALID_NEW_GLOBAL_STATE: Error;
export default class GlobalStateManager<G extends {} = State, R extends {} = Reducers> {
    private _callbacks;
    private _dispatchers;
    private _initialReducers;
    private _initialState;
    private _propertyListeners;
    private _queue;
    private _reduxEnhancedStore;
    private _state;
    constructor(initialState?: G, initialReducers?: R);
    addCallback(callback: Callback<G>): BooleanFunction;
    addPropertyListener(property: keyof G, propertyListener: PropertyListener): void;
    addReducer<A extends any[] = any[]>(name: string, reducer: Reducer<G, R, A>): BooleanFunction;
    addReducers(reducers: AdditionalReducers<G>): void;
    clearQueue(): void;
    createDispatcher<A extends any[] = []>(reducer: Reducer<G, R, A>, type?: string): Dispatcher<G, A>;
    readonly dispatchers: Dispatchers<G, R>;
    enqueue<Property extends keyof G>(property: Property, value: G[Property]): void;
    flush(): void;
    getDispatcher<K extends keyof R>(name: K): Dispatcher<G, ExtractArguments<R[K]>>;
    hasCallback(callback: Callback<G>): boolean;
    hasPropertyListener(pl: PropertyListener): boolean;
    hasDispatcher(name: keyof R | string): boolean;
    readonly queue: Map<keyof G, G[keyof G]>;
    readonly propertyListeners: Map<keyof G, Set<PropertyListener>>;
    reduxDispatch(action: DevToolAction<G>): boolean;
    readonly reduxEnhancedStore: null | ReduxEnhancedStore<G>;
    removeCallback(callback: Callback<G>): boolean;
    removeDispatcher(name: string): boolean;
    removePropertyListener(propertyListener: PropertyListener): boolean;
    reset(): void;
    set(newGlobalState: NewGlobalState<G>): Promise<G>;
    setFunction(f: FunctionalNewGlobalState<G>): Promise<G>;
    setObject<O extends Partial<G> = Partial<G>>(obj: O): Promise<G>;
    setPromise(promise: Promise<NewGlobalState<G>>): Promise<G>;
    spyState(propertyListener: PropertyListener): G;
    readonly state: Readonly<G>;
}
export {};
