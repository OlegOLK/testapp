"use strict";

exports.__esModule = true;
exports.HackerNews = void 0;

var _cheerio = _interopRequireDefault(require("cheerio"));

var _service = require("./service");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class HackerNews extends _service.Service {
  static getBaseUrls() {
    const baseUrls = ['https://news.ycombinator.com/user?id=', 'http://news.ycombinator.com/user?id=', 'news.ycombinator.com/user?id='];
    return baseUrls;
  }

  static getProofUrl(proof) {
    const baseUrls = this.getBaseUrls();
    const proofUrl = super.prefixScheme(proof.proof_url);

    for (let i = 0; i < baseUrls.length; i++) {
      if (proofUrl === `${baseUrls[i]}${proof.identifier}`) {
        return proofUrl;
      }
    }

    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);
  }

  static getProofStatement(searchText) {
    const $ = _cheerio.default.load(searchText);

    const tables = $('#hnmain').children().find('table');
    let statement = '';

    if (tables.length > 0) {
      tables.each((tableIndex, table) => {
        const rows = $(table).find('tr');

        if (rows.length > 0) {
          rows.each((idx, row) => {
            const heading = $(row).find('td').first().text().trim();

            if (heading === 'about:') {
              statement = $(row).find('td').last().text().trim();
            }
          });
        }
      });
    }

    return statement;
  }

}

exports.HackerNews = HackerNews;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9maWxlcy9zZXJ2aWNlcy9oYWNrZXJOZXdzLmpzIl0sIm5hbWVzIjpbIkhhY2tlck5ld3MiLCJTZXJ2aWNlIiwiZ2V0QmFzZVVybHMiLCJiYXNlVXJscyIsImdldFByb29mVXJsIiwicHJvb2YiLCJwcm9vZlVybCIsInByZWZpeFNjaGVtZSIsInByb29mX3VybCIsImkiLCJsZW5ndGgiLCJpZGVudGlmaWVyIiwiRXJyb3IiLCJzZXJ2aWNlIiwiZ2V0UHJvb2ZTdGF0ZW1lbnQiLCJzZWFyY2hUZXh0IiwiJCIsImNoZWVyaW8iLCJsb2FkIiwidGFibGVzIiwiY2hpbGRyZW4iLCJmaW5kIiwic3RhdGVtZW50IiwiZWFjaCIsInRhYmxlSW5kZXgiLCJ0YWJsZSIsInJvd3MiLCJpZHgiLCJyb3ciLCJoZWFkaW5nIiwiZmlyc3QiLCJ0ZXh0IiwidHJpbSIsImxhc3QiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxVQUFOLFNBQXlCQyxnQkFBekIsQ0FBaUM7QUFDL0IsU0FBT0MsV0FBUCxHQUFxQjtBQUNuQixVQUFNQyxRQUFRLEdBQUcsQ0FDZix1Q0FEZSxFQUVmLHNDQUZlLEVBR2YsK0JBSGUsQ0FBakI7QUFLQSxXQUFPQSxRQUFQO0FBQ0Q7O0FBRUQsU0FBT0MsV0FBUCxDQUFtQkMsS0FBbkIsRUFBa0M7QUFDaEMsVUFBTUYsUUFBUSxHQUFHLEtBQUtELFdBQUwsRUFBakI7QUFFQSxVQUFNSSxRQUFRLEdBQUcsTUFBTUMsWUFBTixDQUFtQkYsS0FBSyxDQUFDRyxTQUF6QixDQUFqQjs7QUFFQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdOLFFBQVEsQ0FBQ08sTUFBN0IsRUFBcUNELENBQUMsRUFBdEMsRUFBMEM7QUFDeEMsVUFBSUgsUUFBUSxLQUFNLEdBQUVILFFBQVEsQ0FBQ00sQ0FBRCxDQUFJLEdBQUVKLEtBQUssQ0FBQ00sVUFBVyxFQUFuRCxFQUFzRDtBQUNwRCxlQUFPTCxRQUFQO0FBQ0Q7QUFDRjs7QUFDRCxVQUFNLElBQUlNLEtBQUosQ0FBVyxhQUFZUCxLQUFLLENBQUNHLFNBQVUsNkJBQTRCSCxLQUFLLENBQUNRLE9BQVEsRUFBakYsQ0FBTjtBQUNEOztBQUVELFNBQU9DLGlCQUFQLENBQXlCQyxVQUF6QixFQUE2QztBQUMzQyxVQUFNQyxDQUFDLEdBQUdDLGlCQUFRQyxJQUFSLENBQWFILFVBQWIsQ0FBVjs7QUFDQSxVQUFNSSxNQUFNLEdBQUdILENBQUMsQ0FBQyxTQUFELENBQUQsQ0FBYUksUUFBYixHQUF3QkMsSUFBeEIsQ0FBNkIsT0FBN0IsQ0FBZjtBQUNBLFFBQUlDLFNBQVMsR0FBRyxFQUFoQjs7QUFFQSxRQUFJSCxNQUFNLENBQUNULE1BQVAsR0FBZ0IsQ0FBcEIsRUFBdUI7QUFDckJTLE1BQUFBLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLENBQUNDLFVBQUQsRUFBYUMsS0FBYixLQUF1QjtBQUNqQyxjQUFNQyxJQUFJLEdBQUdWLENBQUMsQ0FBQ1MsS0FBRCxDQUFELENBQVNKLElBQVQsQ0FBYyxJQUFkLENBQWI7O0FBRUEsWUFBSUssSUFBSSxDQUFDaEIsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CZ0IsVUFBQUEsSUFBSSxDQUFDSCxJQUFMLENBQVUsQ0FBQ0ksR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDdEIsa0JBQU1DLE9BQU8sR0FBR2IsQ0FBQyxDQUFDWSxHQUFELENBQUQsQ0FBT1AsSUFBUCxDQUFZLElBQVosRUFDYlMsS0FEYSxHQUViQyxJQUZhLEdBR2JDLElBSGEsRUFBaEI7O0FBS0EsZ0JBQUlILE9BQU8sS0FBSyxRQUFoQixFQUEwQjtBQUN4QlAsY0FBQUEsU0FBUyxHQUFHTixDQUFDLENBQUNZLEdBQUQsQ0FBRCxDQUFPUCxJQUFQLENBQVksSUFBWixFQUNUWSxJQURTLEdBRVRGLElBRlMsR0FHVEMsSUFIUyxFQUFaO0FBSUQ7QUFDRixXQVpEO0FBYUQ7QUFDRixPQWxCRDtBQW1CRDs7QUFFRCxXQUFPVixTQUFQO0FBQ0Q7O0FBbkQ4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5pbXBvcnQgY2hlZXJpbyBmcm9tICdjaGVlcmlvJ1xuaW1wb3J0IHsgU2VydmljZSB9IGZyb20gJy4vc2VydmljZSdcblxuY2xhc3MgSGFja2VyTmV3cyBleHRlbmRzIFNlcnZpY2Uge1xuICBzdGF0aWMgZ2V0QmFzZVVybHMoKSB7XG4gICAgY29uc3QgYmFzZVVybHMgPSBbXG4gICAgICAnaHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS91c2VyP2lkPScsXG4gICAgICAnaHR0cDovL25ld3MueWNvbWJpbmF0b3IuY29tL3VzZXI/aWQ9JyxcbiAgICAgICduZXdzLnljb21iaW5hdG9yLmNvbS91c2VyP2lkPSdcbiAgICBdXG4gICAgcmV0dXJuIGJhc2VVcmxzXG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvb2ZVcmwocHJvb2Y6IE9iamVjdCkge1xuICAgIGNvbnN0IGJhc2VVcmxzID0gdGhpcy5nZXRCYXNlVXJscygpXG5cbiAgICBjb25zdCBwcm9vZlVybCA9IHN1cGVyLnByZWZpeFNjaGVtZShwcm9vZi5wcm9vZl91cmwpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhc2VVcmxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvb2ZVcmwgPT09IGAke2Jhc2VVcmxzW2ldfSR7cHJvb2YuaWRlbnRpZmllcn1gKSB7XG4gICAgICAgIHJldHVybiBwcm9vZlVybFxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFByb29mIHVybCAke3Byb29mLnByb29mX3VybH0gaXMgbm90IHZhbGlkIGZvciBzZXJ2aWNlICR7cHJvb2Yuc2VydmljZX1gKVxuICB9XG5cbiAgc3RhdGljIGdldFByb29mU3RhdGVtZW50KHNlYXJjaFRleHQ6IHN0cmluZykge1xuICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoc2VhcmNoVGV4dClcbiAgICBjb25zdCB0YWJsZXMgPSAkKCcjaG5tYWluJykuY2hpbGRyZW4oKS5maW5kKCd0YWJsZScpXG4gICAgbGV0IHN0YXRlbWVudCA9ICcnXG5cbiAgICBpZiAodGFibGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRhYmxlcy5lYWNoKCh0YWJsZUluZGV4LCB0YWJsZSkgPT4ge1xuICAgICAgICBjb25zdCByb3dzID0gJCh0YWJsZSkuZmluZCgndHInKVxuXG4gICAgICAgIGlmIChyb3dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByb3dzLmVhY2goKGlkeCwgcm93KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBoZWFkaW5nID0gJChyb3cpLmZpbmQoJ3RkJylcbiAgICAgICAgICAgICAgLmZpcnN0KClcbiAgICAgICAgICAgICAgLnRleHQoKVxuICAgICAgICAgICAgICAudHJpbSgpXG5cbiAgICAgICAgICAgIGlmIChoZWFkaW5nID09PSAnYWJvdXQ6Jykge1xuICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSAkKHJvdykuZmluZCgndGQnKVxuICAgICAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgICAgICAudGV4dCgpXG4gICAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlbWVudFxuICB9XG59XG5cbmV4cG9ydCB7IEhhY2tlck5ld3MgfVxuIl19