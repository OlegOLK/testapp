{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _keys = require(\"blockstack/lib/keys\");\n\nvar _model = _interopRequireDefault(require(\"../model\"));\n\nvar _groupMembership = _interopRequireDefault(require(\"./group-membership\"));\n\nvar _groupInvitation = _interopRequireDefault(require(\"./group-invitation\"));\n\nvar _signingKey = _interopRequireDefault(require(\"./signing-key\"));\n\nvar _helpers = require(\"../helpers\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defaultMembers = [];\n\nvar UserGroup =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(UserGroup, _Model);\n\n  function UserGroup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserGroup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"privateKey\", void 0);\n\n    return _this;\n  }\n\n  _createClass(UserGroup, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var signingKey, _ref, username, invitation;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _signingKey.default.create({\n                  userGroupId: this._id\n                });\n\n              case 2:\n                signingKey = _context.sent;\n                this.attrs.signingKeyId = signingKey._id;\n                this.privateKey = signingKey.attrs.privateKey;\n                (0, _helpers.addUserGroupKey)(this); // await this.makeGaiaConfig();\n\n                _ref = (0, _helpers.loadUserData)(), username = _ref.username;\n                _context.next = 9;\n                return this.makeGroupMembership(username);\n\n              case 9:\n                invitation = _context.sent;\n                _context.next = 12;\n                return invitation.activate();\n\n              case 12:\n                return _context.abrupt(\"return\", this);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create() {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"makeGroupMembership\",\n    value: function () {\n      var _makeGroupMembership = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(username) {\n        var existingInviteId, _invitation, invitation;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                existingInviteId = null;\n                this.attrs.members.forEach(function (member) {\n                  if (member.username === username) {\n                    existingInviteId = member.inviteId;\n                  }\n                });\n\n                if (!existingInviteId) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 5;\n                return _groupInvitation.default.findById(existingInviteId, {\n                  decrypt: false\n                });\n\n              case 5:\n                _invitation = _context2.sent;\n                return _context2.abrupt(\"return\", _invitation);\n\n              case 7:\n                _context2.next = 9;\n                return _groupInvitation.default.makeInvitation(username, this);\n\n              case 9:\n                invitation = _context2.sent;\n                this.attrs.members.push({\n                  username: username,\n                  inviteId: invitation._id\n                });\n                _context2.next = 13;\n                return this.save();\n\n              case 13:\n                return _context2.abrupt(\"return\", invitation);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function makeGroupMembership(_x) {\n        return _makeGroupMembership.apply(this, arguments);\n      }\n\n      return makeGroupMembership;\n    }()\n  }, {\n    key: \"publicKey\",\n    value: function publicKey() {\n      return (0, _keys.getPublicKeyFromPrivate)(this.privateKey);\n    }\n  }, {\n    key: \"encryptionPublicKey\",\n    value: function () {\n      var _encryptionPublicKey = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.publicKey());\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function encryptionPublicKey() {\n        return _encryptionPublicKey.apply(this, arguments);\n      }\n\n      return encryptionPublicKey;\n    }()\n  }, {\n    key: \"encryptionPrivateKey\",\n    value: function encryptionPrivateKey() {\n      if (this.privateKey) {\n        return this.privateKey;\n      }\n\n      var _ref2 = (0, _helpers.userGroupKeys)(),\n          signingKeys = _ref2.signingKeys;\n\n      return signingKeys[this.attrs.signingKeyId];\n    }\n  }, {\n    key: \"makeGaiaConfig\",\n    value: function () {\n      var _makeGaiaConfig = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var userData, appPrivateKey, hubUrl, scopes, userSession, gaiaConfig;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                userData = (0, _helpers.loadUserData)();\n                appPrivateKey = userData.appPrivateKey, hubUrl = userData.hubUrl;\n                scopes = [{\n                  scope: 'putFilePrefix',\n                  domain: \"UserGroups/\".concat(this._id, \"/\")\n                }];\n                userSession = (0, _helpers.requireUserSession)();\n                _context4.next = 6;\n                return userSession.connectToGaiaHub(hubUrl, appPrivateKey, scopes);\n\n              case 6:\n                gaiaConfig = _context4.sent;\n                this.attrs.gaiaConfig = gaiaConfig;\n                return _context4.abrupt(\"return\", gaiaConfig);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function makeGaiaConfig() {\n        return _makeGaiaConfig.apply(this, arguments);\n      }\n\n      return makeGaiaConfig;\n    }()\n  }, {\n    key: \"getSigningKey\",\n    value: function getSigningKey() {\n      var _ref3 = (0, _helpers.userGroupKeys)(),\n          userGroups = _ref3.userGroups,\n          signingKeys = _ref3.signingKeys;\n\n      var id = userGroups[this._id];\n      var privateKey = signingKeys[id];\n      return {\n        privateKey: privateKey,\n        id: id\n      };\n    }\n  }], [{\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(id) {\n        var _groupMembership$defa, userGroups, signingKeys, signingKey, privateKey, userGroup;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _groupMembership$defa = _groupMembership.default.userGroupKeys(), userGroups = _groupMembership$defa.userGroups, signingKeys = _groupMembership$defa.signingKeys;\n\n                if (!(!userGroups || !userGroups[id])) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error(\"UserGroup not found with id: '\".concat(id, \"'. Have you called `GroupMembership.cacheKeys()`?\"));\n\n              case 3:\n                signingKey = userGroups[id];\n                privateKey = signingKeys[signingKey];\n                userGroup = new this({\n                  _id: id\n                });\n                userGroup.privateKey = privateKey;\n                _context5.next = 9;\n                return userGroup.fetch();\n\n              case 9:\n                return _context5.abrupt(\"return\", userGroup);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function find(_x2) {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }()\n  }, {\n    key: \"myGroups\",\n    value: function myGroups() {\n      var _ref4 = (0, _helpers.userGroupKeys)(),\n          userGroups = _ref4.userGroups;\n\n      var keys = Object.keys(userGroups);\n      return this.fetchList({\n        _id: keys.join(',')\n      });\n    }\n  }]);\n\n  return UserGroup;\n}(_model.default);\n\nexports.default = UserGroup;\n\n_defineProperty(UserGroup, \"schema\", {\n  name: String,\n  gaiaConfig: Object,\n  members: {\n    type: Array\n  }\n});\n\n_defineProperty(UserGroup, \"defaults\", {\n  members: defaultMembers\n});\n\n_defineProperty(UserGroup, \"modelName\", function () {\n  return 'UserGroup';\n});","map":null,"metadata":{},"sourceType":"script"}