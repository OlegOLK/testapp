{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nexports.__esModule = true;\nexports.AppConfig = void 0;\n\nvar _authConstants = require(\"./authConstants\");\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the first argument.\n * @type {AppConfig}\n */\n\n\nvar AppConfig =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Blockstack apps are uniquely identified by their app domain.\n   * @type {string}\n   */\n\n  /**\n   * An array of string representing permissions requested by the app.\n   * @type {[Array<string>}\n   */\n\n  /**\n   * Path on app domain to redirect users to after authentication. The\n   * authentication response token will be postpended in a query.\n   * @type {string}\n   */\n\n  /**\n   * Path relative to app domain of app's manifest file.\n   *\n   * This file needs to have CORS headers set so that it can be fetched\n   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.\n   * @type {string}\n   */\n\n  /**\n   * The URL of Blockstack core node to use for this app. If this is\n   * `null`, the core node specified by the user or default core node\n   * will be used.\n   * @type {string}\n   */\n\n  /**\n   * The URL of a web-based Blockstack Authenticator to use in the event\n   * the user doesn't have Blockstack installed on their machine. If this\n   * is not specified, the current default in this library will be used.\n   * @type {string}\n   */\n\n  /**\n   * @param {Array<string>} scopes - permissions this app is requesting\n   * @param {string} appDomain - the app domain\n   * @param {string} redirectPath - path on app domain to redirect users to after authentication\n   * @param {string} manifestPath - path relative to app domain of app's manifest file\n   * @param {string} coreNode - override the default or user selected core node\n   * @param {string} authenticatorURL - the web-based fall back authenticator\n   */\n  function AppConfig() {\n    var scopes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _authConstants.DEFAULT_SCOPE.slice();\n    var appDomain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window.location.origin;\n    var redirectPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var manifestPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/manifest.json';\n    var coreNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var authenticatorURL = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _authConstants.DEFAULT_BLOCKSTACK_HOST;\n\n    _classCallCheck(this, AppConfig);\n\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n\n    if (!coreNode) {\n      this.coreNode = _authConstants.DEFAULT_CORE_NODE;\n    } else {\n      this.coreNode = coreNode;\n    }\n\n    this.authenticatorURL = authenticatorURL;\n  }\n  /**\n   * The location to which the authenticator should\n   * redirect the user.\n   * @returns {string} - URI\n   */\n\n\n  _createClass(AppConfig, [{\n    key: \"redirectURI\",\n    value: function redirectURI() {\n      return \"\".concat(this.appDomain).concat(this.redirectPath);\n    }\n    /**\n     * The location of the app's manifest file.\n     * @returns {string} - URI\n     */\n\n  }, {\n    key: \"manifestURI\",\n    value: function manifestURI() {\n      return \"\".concat(this.appDomain).concat(this.manifestPath);\n    }\n  }]);\n\n  return AppConfig;\n}();\n\nexports.AppConfig = AppConfig;","map":null,"metadata":{},"sourceType":"script"}