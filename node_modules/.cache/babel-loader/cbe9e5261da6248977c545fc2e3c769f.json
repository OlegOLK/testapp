{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.uploadToGaiaHub = uploadToGaiaHub;\nexports.getFullReadUrl = getFullReadUrl;\nexports.connectToGaiaHub = connectToGaiaHub;\nexports.setLocalGaiaHubConnection = setLocalGaiaHubConnection;\nexports.getOrSetLocalGaiaHubConnection = getOrSetLocalGaiaHubConnection;\nexports.getBucketUrl = getBucketUrl;\nexports.BLOCKSTACK_GAIA_HUB_LABEL = void 0;\n\nvar _bitcoinjsLib = _interopRequireDefault(require(\"bitcoinjs-lib\"));\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _jsontokens = require(\"jsontokens\");\n\nvar _utils = require(\"../utils\");\n\nvar _index = require(\"../index\");\n\nvar _authConstants = require(\"../auth/authConstants\");\n\nvar _userSession = require(\"../auth/userSession\");\n\nvar _logger = require(\"../logger\");\n\nvar _errors = require(\"../errors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar BLOCKSTACK_GAIA_HUB_LABEL = 'blockstack-gaia-hub-config';\nexports.BLOCKSTACK_GAIA_HUB_LABEL = BLOCKSTACK_GAIA_HUB_LABEL;\n\nfunction uploadToGaiaHub(filename, contents, hubConfig) {\n  var contentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'application/octet-stream';\n\n  _logger.Logger.debug(\"uploadToGaiaHub: uploading \".concat(filename, \" to \").concat(hubConfig.server));\n\n  return fetch(\"\".concat(hubConfig.server, \"/store/\").concat(hubConfig.address, \"/\").concat(filename), {\n    method: 'POST',\n    headers: {\n      'Content-Type': contentType,\n      Authorization: \"bearer \".concat(hubConfig.token)\n    },\n    body: contents\n  }).then(function (response) {\n    if (response.ok) {\n      return response.text();\n    } else {\n      throw new Error('Error when uploading to Gaia hub');\n    }\n  }).then(function (responseText) {\n    return JSON.parse(responseText);\n  }).then(function (responseJSON) {\n    return responseJSON.publicURL;\n  });\n}\n\nfunction getFullReadUrl(filename, hubConfig) {\n  return \"\".concat(hubConfig.url_prefix).concat(hubConfig.address, \"/\").concat(filename);\n}\n\nfunction makeLegacyAuthToken(challengeText, signerKeyHex) {\n  // only sign specific legacy auth challenges.\n  var parsedChallenge;\n\n  try {\n    parsedChallenge = JSON.parse(challengeText);\n  } catch (err) {\n    throw new Error('Failed in parsing legacy challenge text from the gaia hub.');\n  }\n\n  if (parsedChallenge[0] === 'gaiahub' && parsedChallenge[3] === 'blockstack_storage_please_sign') {\n    var signer = (0, _index.hexStringToECPair)(signerKeyHex + (signerKeyHex.length === 64 ? '01' : ''));\n\n    var digest = _bitcoinjsLib.default.crypto.sha256(challengeText);\n\n    var signature = signer.sign(digest).toDER().toString('hex');\n    var publickey = (0, _index.getPublicKeyFromPrivate)(signerKeyHex);\n    var token = Buffer.from(JSON.stringify({\n      publickey: publickey,\n      signature: signature\n    })).toString('base64');\n    return token;\n  } else {\n    throw new Error('Failed to connect to legacy gaia hub. If you operate this hub, please update.');\n  }\n}\n\nfunction makeV1GaiaAuthToken(hubInfo, signerKeyHex, hubUrl, associationToken) {\n  var challengeText = hubInfo.challenge_text;\n  var handlesV1Auth = hubInfo.latest_auth_version && parseInt(hubInfo.latest_auth_version.slice(1), 10) >= 1;\n  var iss = (0, _index.getPublicKeyFromPrivate)(signerKeyHex);\n\n  if (!handlesV1Auth) {\n    return makeLegacyAuthToken(challengeText, signerKeyHex);\n  }\n\n  var salt = _crypto.default.randomBytes(16).toString('hex');\n\n  var payload = {\n    gaiaChallenge: challengeText,\n    hubUrl: hubUrl,\n    iss: iss,\n    salt: salt,\n    associationToken: associationToken\n  };\n  var token = new _jsontokens.TokenSigner('ES256K', signerKeyHex).sign(payload);\n  return \"v1:\".concat(token);\n}\n\nfunction connectToGaiaHub(gaiaHubUrl, challengeSignerHex, associationToken) {\n  _logger.Logger.debug(\"connectToGaiaHub: \".concat(gaiaHubUrl, \"/hub_info\"));\n\n  return fetch(\"\".concat(gaiaHubUrl, \"/hub_info\")).then(function (response) {\n    return response.json();\n  }).then(function (hubInfo) {\n    var readURL = hubInfo.read_url_prefix;\n    var token = makeV1GaiaAuthToken(hubInfo, challengeSignerHex, gaiaHubUrl, associationToken);\n    var address = (0, _utils.ecPairToAddress)((0, _index.hexStringToECPair)(challengeSignerHex + (challengeSignerHex.length === 64 ? '01' : '')));\n    return {\n      url_prefix: readURL,\n      address: address,\n      token: token,\n      server: gaiaHubUrl\n    };\n  });\n}\n/**\n * These two functions are app-specific connections to gaia hub,\n *   they read the user data object for information on setting up\n *   a hub connection, and store the hub config to localstorage\n * @param {UserSession} caller - the instance calling this function\n * @private\n * @returns {Promise} that resolves to the new gaia hub connection\n */\n\n\nfunction setLocalGaiaHubConnection(caller) {\n  var userData = caller.loadUserData();\n\n  if (!userData) {\n    throw new _errors.InvalidStateError('Missing userData');\n  }\n\n  if (!userData.hubUrl) {\n    userData.hubUrl = _authConstants.BLOCKSTACK_DEFAULT_GAIA_HUB_URL;\n  }\n\n  return connectToGaiaHub(userData.hubUrl, userData.appPrivateKey, userData.associationToken).then(function (gaiaConfig) {\n    userData.gaiaHubConfig = gaiaConfig;\n    return gaiaConfig;\n  });\n}\n\nfunction getOrSetLocalGaiaHubConnection(caller) {\n  var userData = caller.store.getSessionData().userData;\n\n  if (!userData) {\n    throw new _errors.InvalidStateError('Missing userData');\n  }\n\n  var hubConfig = userData.gaiaHubConfig;\n\n  if (hubConfig) {\n    return Promise.resolve(hubConfig);\n  }\n\n  return setLocalGaiaHubConnection(caller);\n}\n\nfunction getBucketUrl(gaiaHubUrl, appPrivateKey) {\n  var challengeSigner;\n\n  try {\n    challengeSigner = _bitcoinjsLib.default.ECPair.fromPrivateKey(new Buffer(appPrivateKey, 'hex'));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  return fetch(\"\".concat(gaiaHubUrl, \"/hub_info\")).then(function (response) {\n    return response.text();\n  }).then(function (responseText) {\n    return JSON.parse(responseText);\n  }).then(function (responseJSON) {\n    var readURL = responseJSON.read_url_prefix;\n    var address = (0, _utils.ecPairToAddress)(challengeSigner);\n    var bucketUrl = \"\".concat(readURL).concat(address, \"/\");\n    return bucketUrl;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}