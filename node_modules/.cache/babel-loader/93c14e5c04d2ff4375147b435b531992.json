{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nexports.__esModule = true;\nexports.UserSession = void 0;\n\nvar _queryString = _interopRequireDefault(require(\"query-string\"));\n\nvar _appConfig = require(\"./appConfig\");\n\nvar _sessionStore = require(\"./sessionStore\");\n\nvar _authApp = require(\"./authApp\");\n\nvar _authMessages = require(\"./authMessages\");\n\nvar _storage = require(\"../storage\");\n\nvar _utils = require(\"../utils\");\n\nvar _errors = require(\"../errors\");\n\nvar _logger = require(\"../logger\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Represents an instance of a signed in user for a particular app.\n *\n * A signed in user has access to two major pieces of information\n * about the user, the user's private key for that app and the location\n * of the user's gaia storage bucket for the app.\n *\n * A user can be signed in either directly through the interactive\n * sign in process or by directly providing the app private key.\n * @type {UserSession}\n */\n\n\nvar UserSession =\n/*#__PURE__*/\nfunction () {\n  function UserSession(options) {\n    _classCallCheck(this, UserSession);\n\n    var runningInBrowser = true;\n\n    if (typeof window === 'undefined') {\n      _logger.Logger.debug('UserSession: not running in browser');\n\n      runningInBrowser = false;\n    }\n\n    if (options && options.appConfig) {\n      this.appConfig = options.appConfig;\n    } else if (runningInBrowser) {\n      this.appConfig = new _appConfig.AppConfig();\n    } else {\n      throw new _errors.MissingParameterError('You need to specify options.appConfig');\n    }\n\n    if (options && options.sessionStore) {\n      this.store = options.sessionStore;\n    } else if (runningInBrowser) {\n      if (options) {\n        this.store = new _sessionStore.LocalStorageStore(options.sessionOptions);\n      } else {\n        this.store = new _sessionStore.LocalStorageStore();\n      }\n    } else if (options) {\n      this.store = new _sessionStore.InstanceDataStore(options.sessionOptions);\n    } else {\n      this.store = new _sessionStore.InstanceDataStore();\n    }\n  }\n  /* AUTHENTICATION */\n\n  /**\n   * Generates an authentication request and redirects the user to the Blockstack\n   * browser to approve the sign in request.\n   *\n   * Please note that this requires that the web browser properly handles the\n   * `blockstack:` URL protocol handler.\n   *\n   * Most applications should use this\n   * method for sign in unless they require more fine grained control over how the\n   * authentication request is generated. If your app falls into this category,\n   * use `generateAndStoreTransitKey`, `makeAuthRequest`,\n   * and `redirectToSignInWithAuthRequest` to build your own sign in process.\n   *\n   * @return {void}\n   */\n\n\n  _createClass(UserSession, [{\n    key: \"redirectToSignIn\",\n    value: function redirectToSignIn() {\n      return (0, _authApp.redirectToSignInImpl)(this);\n    }\n    /**\n     * Redirects the user to the Blockstack browser to approve the sign in request\n     * given.\n     *\n     * The user is redirected to the authenticator URL specified in the `AppConfig`\n     * if the `blockstack:` protocol handler is not detected.\n     * Please note that the protocol handler detection\n     * does not work on all browsers.\n     * @param  {String} authRequest - the authentication request generated by `makeAuthRequest`\n     * @return {void}\n     */\n\n  }, {\n    key: \"redirectToSignInWithAuthRequest\",\n    value: function redirectToSignInWithAuthRequest(authRequest) {\n      return (0, _authApp.redirectToSignInWithAuthRequestImpl)(this, authRequest);\n    }\n    /**\n     * Generates an authentication request that can be sent to the Blockstack\n     * browser for the user to approve sign in. This authentication request can\n     * then be used for sign in by passing it to the `redirectToSignInWithAuthRequest`\n     * method.\n     *\n     * *Note: This method should only be used if you want to roll your own authentication\n     * flow. Typically you'd use `redirectToSignIn` which takes care of this\n     * under the hood.*\n     * @param {string} transitKey - hex-encoded transit key\n     * @param {Number} expiresAt - the time at which this request is no longer valid\n     * @param {Object} extraParams - Any extra parameters you'd like to pass to the authenticator.\n     * Use this to pass options that aren't part of the Blockstack auth spec, but might be supported\n     * by special authenticators.\n     * @return {String} the authentication request\n     * @private\n     */\n\n  }, {\n    key: \"makeAuthRequest\",\n    value: function makeAuthRequest(transitKey) {\n      var expiresAt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _utils.nextHour)().getTime();\n      var extraParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var appConfig = this.appConfig;\n\n      if (!appConfig) {\n        throw new _errors.InvalidStateError('Missing AppConfig');\n      }\n\n      var redirectURI = appConfig.redirectURI();\n      var manifestURI = appConfig.manifestURI();\n      var scopes = appConfig.scopes;\n      var appDomain = appConfig.appDomain;\n      return (0, _authMessages.makeAuthRequestImpl)(transitKey, redirectURI, manifestURI, scopes, appDomain, expiresAt, extraParams);\n    }\n    /**\n     * Generates a ECDSA keypair to\n     * use as the ephemeral app transit private key\n     * and store in the session\n     * @return {String} the hex encoded private key\n     *\n     */\n\n  }, {\n    key: \"generateAndStoreTransitKey\",\n    value: function generateAndStoreTransitKey() {\n      var sessionData = this.store.getSessionData();\n      var transitKey = (0, _authMessages.generateTransitKey)();\n      sessionData.transitKey = transitKey;\n      this.store.setSessionData(sessionData);\n      return transitKey;\n    }\n    /**\n     * Retrieve the authentication token from the URL query\n     * @return {String} the authentication token if it exists otherwise `null`\n     */\n\n  }, {\n    key: \"getAuthResponseToken\",\n    value: function getAuthResponseToken() {\n      var queryDict = _queryString.default.parse(location.search);\n\n      return queryDict.authResponse ? queryDict.authResponse : '';\n    }\n    /**\n     * Check if there is a authentication request that hasn't been handled.\n     * @return {Boolean} `true` if there is a pending sign in, otherwise `false`\n     */\n\n  }, {\n    key: \"isSignInPending\",\n    value: function isSignInPending() {\n      return !!this.getAuthResponseToken();\n    }\n    /**\n     * Check if a user is currently signed in.\n     * @return {Boolean} `true` if the user is signed in, `false` if not.\n     */\n\n  }, {\n    key: \"isUserSignedIn\",\n    value: function isUserSignedIn() {\n      return !!this.store.getSessionData().userData;\n    }\n    /**\n     * Try to process any pending sign in request by returning a `Promise` that resolves\n     * to the user data object if the sign in succeeds.\n     *\n     * @param {String} authResponseToken - the signed authentication response token\n     * @return {Promise} that resolves to the user data object if successful and rejects\n     * if handling the sign in request fails or there was no pending sign in request.\n     */\n\n  }, {\n    key: \"handlePendingSignIn\",\n    value: function handlePendingSignIn() {\n      var authResponseToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAuthResponseToken();\n      return (0, _authApp.handlePendingSignInImpl)(this, authResponseToken);\n    }\n    /**\n     * Retrieves the user data object. The user's profile is stored in the key `profile`.\n     * @return {Object} User data object.\n     */\n\n  }, {\n    key: \"loadUserData\",\n    value: function loadUserData() {\n      return (0, _authApp.loadUserDataImpl)(this);\n    }\n    /**\n     * Sign the user out\n     * @return {void}\n     */\n\n  }, {\n    key: \"signUserOut\",\n    value: function signUserOut() {\n      this.store.deleteSessionData();\n    } //\n    //\n    // /* PROFILES */\n    // extractProfile\n    // wrapProfileToken\n    // signProfileToken\n    // verifyProfileToken\n    // validateProofs\n    // lookupProfile\n\n    /* STORAGE */\n\n    /**\n     * Encrypts the data provided with the app public key.\n     * @param {String|Buffer} content - data to encrypt\n     * @param {Object} [options=null] - options object\n     * @param {String} options.publicKey - the hex string of the ECDSA public\n     * key to use for encryption. If not provided, will use user's appPrivateKey.\n     * @return {String} Stringified ciphertext object\n     */\n\n  }, {\n    key: \"encryptContent\",\n    value: function encryptContent(content, options) {\n      return (0, _storage.encryptContentImpl)(this, content, options);\n    }\n    /**\n     * Decrypts data encrypted with `encryptContent` with the\n     * transit private key.\n     * @param {String|Buffer} content - encrypted content.\n     * @param {Object} [options=null] - options object\n     * @param {String} options.privateKey - the hex string of the ECDSA private\n     * key to use for decryption. If not provided, will use user's appPrivateKey.\n     * @return {String|Buffer} decrypted content.\n     */\n\n  }, {\n    key: \"decryptContent\",\n    value: function decryptContent(content, options) {\n      return (0, _storage.decryptContentImpl)(this, content, options);\n    }\n    /**\n     * Stores the data provided in the app's data store to to the file specified.\n     * @param {String} path - the path to store the data in\n     * @param {String|Buffer} content - the data to store in the file\n     * @param {Object} [options=null] - options object\n     * @param {Boolean|String} [options.encrypt=true] - encrypt the data with the app private key\n     *                                                  or the provided public key\n     * @param {Boolean} [options.sign=false] - sign the data using ECDSA on SHA256 hashes with\n     *                                         the app private key\n     * @return {Promise} that resolves if the operation succeed and rejects\n     * if it failed\n     */\n\n  }, {\n    key: \"putFile\",\n    value: function putFile(path, content, options) {\n      return (0, _storage.putFileImpl)(this, path, content, options);\n    }\n    /**\n     * Retrieves the specified file from the app's data store.\n     * @param {String} path - the path to the file to read\n     * @param {Object} [options=null] - options object\n     * @param {Boolean} [options.decrypt=true] - try to decrypt the data with the app private key\n     * @param {String} options.username - the Blockstack ID to lookup for multi-player storage\n     * @param {Boolean} options.verify - Whether the content should be verified, only to be used\n     * when `putFile` was set to `sign = true`\n     * @param {String} options.app - the app to lookup for multi-player storage -\n     * defaults to current origin\n     * @param {String} [options.zoneFileLookupURL=null] - The URL\n     * to use for zonefile lookup. If falsey, this will use the\n     * blockstack.js's getNameInfo function instead.\n     * @returns {Promise} that resolves to the raw data in the file\n     * or rejects with an error\n     */\n\n  }, {\n    key: \"getFile\",\n    value: function getFile(path, options) {\n      return (0, _storage.getFileImpl)(this, path, options);\n    }\n    /**\n     * Get the URL for reading a file from an app's data store.\n     * @param {String} path - the path to the file to read\n     * @param {Object} [options=null] - options object\n     * @param {String} options.username - the Blockstack ID to lookup for multi-player storage\n     * @param {String} options.app - the app to lookup for multi-player storage -\n     * defaults to current origin\n     * @param {String} [options.zoneFileLookupURL=null] - The URL\n     * to use for zonefile lookup. If falsey, this will use the\n     * blockstack.js's getNameInfo function instead.\n     * @returns {Promise<string>} that resolves to the URL or rejects with an error\n     */\n\n  }, {\n    key: \"getFileUrl\",\n    value: function getFileUrl(path, options) {\n      return (0, _storage.getFileUrlImpl)(this, path, options);\n    }\n    /**\n     * List the set of files in this application's Gaia storage bucket.\n     * @param {function} callback - a callback to invoke on each named file that\n     * returns `true` to continue the listing operation or `false` to end it\n     * @return {Promise} that resolves to the number of files listed\n     */\n\n  }, {\n    key: \"listFiles\",\n    value: function listFiles(callback) {\n      return (0, _storage.listFilesImpl)(this, callback);\n    }\n    /**\n     * Deletes the specified file from the app's data store. Currently not implemented.\n     * @param {String} path - the path to the file to delete\n     * @returns {Promise} that resolves when the file has been removed\n     * or rejects with an error\n     * @private\n     */\n\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(path) {\n      Promise.reject(new Error(\"Delete of \".concat(path, \" not supported by gaia hubs\")));\n    }\n  }]);\n\n  return UserSession;\n}();\n\nexports.UserSession = UserSession;","map":null,"metadata":{},"sourceType":"script"}