"use strict";

exports.__esModule = true;
exports.SessionData = void 0;

var _errors = require("../errors");

const SESSION_VERSION = '1.0.0';

class SessionData {
  // required after sign in
  // required after sign in
  // required after sign in
  // using this in place of
  // window.localStorage.setItem(BLOCKSTACK_STORAGE_LABEL, JSON.stringify(userData))
  constructor(options) {
    this.version = SESSION_VERSION;
    this.appPrivateKey = options.appPrivateKey;
    this.identityAddress = options.identityAddress;
    this.username = options.username;
    this.coreNode = options.coreNode;
    this.hubUrl = options.hubUrl;
    this.userData = options.userData;
    this.transitKey = options.transitKey; // initializing Gaia connection requires a network request
    // so we'll defer it until the first time it's needed

    this.gaiaHubConfig = null;
  }

  getGaiaHubConfig() {
    return this.gaiaHubConfig;
  }

  setGaiaHubConfig(config) {
    this.gaiaHubConfig = config;
  }

  static fromJSON(json) {
    if (json.version !== SESSION_VERSION) {
      throw new _errors.InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);
    }

    const options = {
      appPrivateKey: json.appPrivateKey,
      identityAddress: json.identityAddress,
      username: json.username,
      coreNode: json.coreNode,
      hubUrl: json.hubUrl,
      userData: json.userData,
      transitKey: json.transitKey
    };
    return new SessionData(options);
  }

  toString() {
    return JSON.stringify(this);
  }

}

exports.SessionData = SessionData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoL3Nlc3Npb25EYXRhLmpzIl0sIm5hbWVzIjpbIlNFU1NJT05fVkVSU0lPTiIsIlNlc3Npb25EYXRhIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidmVyc2lvbiIsImFwcFByaXZhdGVLZXkiLCJpZGVudGl0eUFkZHJlc3MiLCJ1c2VybmFtZSIsImNvcmVOb2RlIiwiaHViVXJsIiwidXNlckRhdGEiLCJ0cmFuc2l0S2V5IiwiZ2FpYUh1YkNvbmZpZyIsImdldEdhaWFIdWJDb25maWciLCJzZXRHYWlhSHViQ29uZmlnIiwiY29uZmlnIiwiZnJvbUpTT04iLCJqc29uIiwiSW52YWxpZFN0YXRlRXJyb3IiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBRUEsTUFBTUEsZUFBZSxHQUFHLE9BQXhCOztBQWlCTyxNQUFNQyxXQUFOLENBQWtCO0FBR0E7QUFFRTtBQU1UO0FBSWhCO0FBQ0E7QUFLQUMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQTBCO0FBQ25DLFNBQUtDLE9BQUwsR0FBZUosZUFBZjtBQUNBLFNBQUtLLGFBQUwsR0FBcUJGLE9BQU8sQ0FBQ0UsYUFBN0I7QUFDQSxTQUFLQyxlQUFMLEdBQXVCSCxPQUFPLENBQUNHLGVBQS9CO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkosT0FBTyxDQUFDSSxRQUF4QjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0JMLE9BQU8sQ0FBQ0ssUUFBeEI7QUFDQSxTQUFLQyxNQUFMLEdBQWNOLE9BQU8sQ0FBQ00sTUFBdEI7QUFDQSxTQUFLQyxRQUFMLEdBQWdCUCxPQUFPLENBQUNPLFFBQXhCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQlIsT0FBTyxDQUFDUSxVQUExQixDQVJtQyxDQVVuQztBQUNBOztBQUNBLFNBQUtDLGFBQUwsR0FBcUIsSUFBckI7QUFDRDs7QUFFREMsRUFBQUEsZ0JBQWdCLEdBQW9CO0FBQ2xDLFdBQU8sS0FBS0QsYUFBWjtBQUNEOztBQUVERSxFQUFBQSxnQkFBZ0IsQ0FBQ0MsTUFBRCxFQUErQjtBQUM3QyxTQUFLSCxhQUFMLEdBQXFCRyxNQUFyQjtBQUNEOztBQUVELFNBQU9DLFFBQVAsQ0FBZ0JDLElBQWhCLEVBQTRDO0FBQzFDLFFBQUlBLElBQUksQ0FBQ2IsT0FBTCxLQUFpQkosZUFBckIsRUFBc0M7QUFDcEMsWUFBTSxJQUFJa0IseUJBQUosQ0FBdUIscUJBQW9CRCxJQUFJLENBQUNiLE9BQVEsK0JBQXhELENBQU47QUFDRDs7QUFDRCxVQUFNRCxPQUF1QixHQUFHO0FBQzlCRSxNQUFBQSxhQUFhLEVBQUVZLElBQUksQ0FBQ1osYUFEVTtBQUU5QkMsTUFBQUEsZUFBZSxFQUFFVyxJQUFJLENBQUNYLGVBRlE7QUFHOUJDLE1BQUFBLFFBQVEsRUFBRVUsSUFBSSxDQUFDVixRQUhlO0FBSTlCQyxNQUFBQSxRQUFRLEVBQUVTLElBQUksQ0FBQ1QsUUFKZTtBQUs5QkMsTUFBQUEsTUFBTSxFQUFFUSxJQUFJLENBQUNSLE1BTGlCO0FBTTlCQyxNQUFBQSxRQUFRLEVBQUVPLElBQUksQ0FBQ1AsUUFOZTtBQU85QkMsTUFBQUEsVUFBVSxFQUFFTSxJQUFJLENBQUNOO0FBUGEsS0FBaEM7QUFTQSxXQUFPLElBQUlWLFdBQUosQ0FBZ0JFLE9BQWhCLENBQVA7QUFDRDs7QUFFRGdCLEVBQUFBLFFBQVEsR0FBVztBQUNqQixXQUFPQyxJQUFJLENBQUNDLFNBQUwsQ0FBZSxJQUFmLENBQVA7QUFDRDs7QUE5RHNCIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbmltcG9ydCB0eXBlIHsgR2FpYUh1YkNvbmZpZyB9IGZyb20gJy4uL3N0b3JhZ2UvaHViJ1xuaW1wb3J0IHsgSW52YWxpZFN0YXRlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMnXG5cbmNvbnN0IFNFU1NJT05fVkVSU0lPTiA9ICcxLjAuMCdcblxuZXhwb3J0IHR5cGUgU2Vzc2lvbk9wdGlvbnMgPSB7XG4gIGFwcFByaXZhdGVLZXk/OiBzdHJpbmcsXG4gIHVzZXJuYW1lPzogc3RyaW5nLFxuICBpZGVudGl0eUFkZHJlc3M/OiBzdHJpbmcsXG4gIGNvcmVOb2RlPzogc3RyaW5nLFxuICBodWJVcmw/OiBzdHJpbmcsXG4gIHN0b3JlT3B0aW9ucz86IHt9LFxuICB1c2VyRGF0YT86IGFueSxcbiAgdHJhbnNpdEtleT86IHN0cmluZyxcbiAgbG9jYWxTdG9yYWdlS2V5Pzogc3RyaW5nLFxuICBzdG9yZU9wdGlvbnM/OiB7XG4gICAgbG9jYWxTdG9yYWdlS2V5Pzogc3RyaW5nXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNlc3Npb25EYXRhIHtcbiAgdmVyc2lvbjogc3RyaW5nXG5cbiAgYXBwUHJpdmF0ZUtleTogP3N0cmluZyAvLyByZXF1aXJlZCBhZnRlciBzaWduIGluXG5cbiAgaWRlbnRpdHlBZGRyZXNzOiA/c3RyaW5nIC8vIHJlcXVpcmVkIGFmdGVyIHNpZ24gaW5cblxuICB1c2VybmFtZTogP3N0cmluZ1xuXG4gIGNvcmVOb2RlOiA/c3RyaW5nXG5cbiAgaHViVXJsOiA/c3RyaW5nIC8vIHJlcXVpcmVkIGFmdGVyIHNpZ24gaW5cblxuICB0cmFuc2l0S2V5OiA/c3RyaW5nXG5cbiAgLy8gdXNpbmcgdGhpcyBpbiBwbGFjZSBvZlxuICAvLyB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oQkxPQ0tTVEFDS19TVE9SQUdFX0xBQkVMLCBKU09OLnN0cmluZ2lmeSh1c2VyRGF0YSkpXG4gIHVzZXJEYXRhOiA/YW55XG5cbiAgZ2FpYUh1YkNvbmZpZzogP0dhaWFIdWJDb25maWdcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBTZXNzaW9uT3B0aW9ucykge1xuICAgIHRoaXMudmVyc2lvbiA9IFNFU1NJT05fVkVSU0lPTlxuICAgIHRoaXMuYXBwUHJpdmF0ZUtleSA9IG9wdGlvbnMuYXBwUHJpdmF0ZUtleVxuICAgIHRoaXMuaWRlbnRpdHlBZGRyZXNzID0gb3B0aW9ucy5pZGVudGl0eUFkZHJlc3NcbiAgICB0aGlzLnVzZXJuYW1lID0gb3B0aW9ucy51c2VybmFtZVxuICAgIHRoaXMuY29yZU5vZGUgPSBvcHRpb25zLmNvcmVOb2RlXG4gICAgdGhpcy5odWJVcmwgPSBvcHRpb25zLmh1YlVybFxuICAgIHRoaXMudXNlckRhdGEgPSBvcHRpb25zLnVzZXJEYXRhXG4gICAgdGhpcy50cmFuc2l0S2V5ID0gb3B0aW9ucy50cmFuc2l0S2V5XG5cbiAgICAvLyBpbml0aWFsaXppbmcgR2FpYSBjb25uZWN0aW9uIHJlcXVpcmVzIGEgbmV0d29yayByZXF1ZXN0XG4gICAgLy8gc28gd2UnbGwgZGVmZXIgaXQgdW50aWwgdGhlIGZpcnN0IHRpbWUgaXQncyBuZWVkZWRcbiAgICB0aGlzLmdhaWFIdWJDb25maWcgPSBudWxsXG4gIH1cblxuICBnZXRHYWlhSHViQ29uZmlnKCkgOiA/R2FpYUh1YkNvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2FpYUh1YkNvbmZpZ1xuICB9XG5cbiAgc2V0R2FpYUh1YkNvbmZpZyhjb25maWc6IEdhaWFIdWJDb25maWcpIDogdm9pZCB7XG4gICAgdGhpcy5nYWlhSHViQ29uZmlnID0gY29uZmlnXG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04oanNvbjogT2JqZWN0KSA6IFNlc3Npb25EYXRhIHtcbiAgICBpZiAoanNvbi52ZXJzaW9uICE9PSBTRVNTSU9OX1ZFUlNJT04pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkU3RhdGVFcnJvcihgSlNPTiBkYXRhIHZlcnNpb24gJHtqc29uLnZlcnNpb259IG5vdCBzdXBwb3J0ZWQgYnkgU2Vzc2lvbkRhdGFgKVxuICAgIH1cbiAgICBjb25zdCBvcHRpb25zOiBTZXNzaW9uT3B0aW9ucyA9IHtcbiAgICAgIGFwcFByaXZhdGVLZXk6IGpzb24uYXBwUHJpdmF0ZUtleSxcbiAgICAgIGlkZW50aXR5QWRkcmVzczoganNvbi5pZGVudGl0eUFkZHJlc3MsXG4gICAgICB1c2VybmFtZToganNvbi51c2VybmFtZSxcbiAgICAgIGNvcmVOb2RlOiBqc29uLmNvcmVOb2RlLFxuICAgICAgaHViVXJsOiBqc29uLmh1YlVybCxcbiAgICAgIHVzZXJEYXRhOiBqc29uLnVzZXJEYXRhLFxuICAgICAgdHJhbnNpdEtleToganNvbi50cmFuc2l0S2V5XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2Vzc2lvbkRhdGEob3B0aW9ucylcbiAgfVxuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpXG4gIH1cbn1cbiJdfQ==