"use strict";

exports.__esModule = true;
exports.Instagram = void 0;

var _cheerio = _interopRequireDefault(require("cheerio"));

var _service = require("./service");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Instagram extends _service.Service {
  static getBaseUrls() {
    const baseUrls = ['https://www.instagram.com/', 'https://instagram.com/'];
    return baseUrls;
  }

  static getProofUrl(proof) {
    const baseUrls = this.getBaseUrls();
    const normalizedProofUrl = this.normalizeInstagramUrl(proof);

    for (let i = 0; i < baseUrls.length; i++) {
      if (normalizedProofUrl.startsWith(`${baseUrls[i]}`)) {
        return normalizedProofUrl;
      }
    }

    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);
  }

  static normalizeInstagramUrl(proof) {
    let proofUrl = proof.proof_url;
    proofUrl = super.prefixScheme(proofUrl);

    if (proofUrl.startsWith('https://instagram.com')) {
      const tokens = proofUrl.split('https://instagram.com');
      proofUrl = `https://www.instagram.com${tokens[1]}`;
    }

    return proofUrl;
  }

  static shouldValidateIdentityInBody() {
    return true;
  }

  static getProofIdentity(searchText) {
    const $ = _cheerio.default.load(searchText);

    const username = $('meta[property="og:description"]').attr('content');

    if (username !== undefined && username.split(':').length > 1) {
      return username.split(':')[0].match(/(@\w+)/)[0].substr(1);
    } else {
      return '';
    }
  }

  static getProofStatement(searchText) {
    const $ = _cheerio.default.load(searchText);

    const statement = $('meta[property="og:description"]').attr('content');

    if (statement !== undefined && statement.split(':').length > 1) {
      return statement.split(':')[1].trim().replace('“', '').replace('”', '');
    } else {
      return '';
    }
  }

}

exports.Instagram = Instagram;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9maWxlcy9zZXJ2aWNlcy9pbnN0YWdyYW0uanMiXSwibmFtZXMiOlsiSW5zdGFncmFtIiwiU2VydmljZSIsImdldEJhc2VVcmxzIiwiYmFzZVVybHMiLCJnZXRQcm9vZlVybCIsInByb29mIiwibm9ybWFsaXplZFByb29mVXJsIiwibm9ybWFsaXplSW5zdGFncmFtVXJsIiwiaSIsImxlbmd0aCIsInN0YXJ0c1dpdGgiLCJFcnJvciIsInByb29mX3VybCIsInNlcnZpY2UiLCJwcm9vZlVybCIsInByZWZpeFNjaGVtZSIsInRva2VucyIsInNwbGl0Iiwic2hvdWxkVmFsaWRhdGVJZGVudGl0eUluQm9keSIsImdldFByb29mSWRlbnRpdHkiLCJzZWFyY2hUZXh0IiwiJCIsImNoZWVyaW8iLCJsb2FkIiwidXNlcm5hbWUiLCJhdHRyIiwidW5kZWZpbmVkIiwibWF0Y2giLCJzdWJzdHIiLCJnZXRQcm9vZlN0YXRlbWVudCIsInN0YXRlbWVudCIsInRyaW0iLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsU0FBTixTQUF3QkMsZ0JBQXhCLENBQWdDO0FBQzlCLFNBQU9DLFdBQVAsR0FBcUI7QUFDbkIsVUFBTUMsUUFBUSxHQUFHLENBQUMsNEJBQUQsRUFBK0Isd0JBQS9CLENBQWpCO0FBQ0EsV0FBT0EsUUFBUDtBQUNEOztBQUVELFNBQU9DLFdBQVAsQ0FBbUJDLEtBQW5CLEVBQWtDO0FBQ2hDLFVBQU1GLFFBQVEsR0FBRyxLQUFLRCxXQUFMLEVBQWpCO0FBQ0EsVUFBTUksa0JBQWtCLEdBQUcsS0FBS0MscUJBQUwsQ0FBMkJGLEtBQTNCLENBQTNCOztBQUVBLFNBQUssSUFBSUcsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0wsUUFBUSxDQUFDTSxNQUE3QixFQUFxQ0QsQ0FBQyxFQUF0QyxFQUEwQztBQUN4QyxVQUFJRixrQkFBa0IsQ0FBQ0ksVUFBbkIsQ0FBK0IsR0FBRVAsUUFBUSxDQUFDSyxDQUFELENBQUksRUFBN0MsQ0FBSixFQUFxRDtBQUNuRCxlQUFPRixrQkFBUDtBQUNEO0FBQ0Y7O0FBQ0QsVUFBTSxJQUFJSyxLQUFKLENBQVcsYUFBWU4sS0FBSyxDQUFDTyxTQUFVLDZCQUE0QlAsS0FBSyxDQUFDUSxPQUFRLEVBQWpGLENBQU47QUFDRDs7QUFFRCxTQUFPTixxQkFBUCxDQUE2QkYsS0FBN0IsRUFBNEM7QUFDMUMsUUFBSVMsUUFBUSxHQUFHVCxLQUFLLENBQUNPLFNBQXJCO0FBQ0FFLElBQUFBLFFBQVEsR0FBRyxNQUFNQyxZQUFOLENBQW1CRCxRQUFuQixDQUFYOztBQUVBLFFBQUlBLFFBQVEsQ0FBQ0osVUFBVCxDQUFvQix1QkFBcEIsQ0FBSixFQUFrRDtBQUNoRCxZQUFNTSxNQUFNLEdBQUdGLFFBQVEsQ0FBQ0csS0FBVCxDQUFlLHVCQUFmLENBQWY7QUFDQUgsTUFBQUEsUUFBUSxHQUFJLDRCQUEyQkUsTUFBTSxDQUFDLENBQUQsQ0FBSSxFQUFqRDtBQUNEOztBQUNELFdBQU9GLFFBQVA7QUFDRDs7QUFFRCxTQUFPSSw0QkFBUCxHQUFzQztBQUNwQyxXQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFPQyxnQkFBUCxDQUF3QkMsVUFBeEIsRUFBNEM7QUFDMUMsVUFBTUMsQ0FBQyxHQUFHQyxpQkFBUUMsSUFBUixDQUFhSCxVQUFiLENBQVY7O0FBQ0EsVUFBTUksUUFBUSxHQUFHSCxDQUFDLENBQUMsaUNBQUQsQ0FBRCxDQUFxQ0ksSUFBckMsQ0FBMEMsU0FBMUMsQ0FBakI7O0FBQ0EsUUFBSUQsUUFBUSxLQUFLRSxTQUFiLElBQTBCRixRQUFRLENBQUNQLEtBQVQsQ0FBZSxHQUFmLEVBQW9CUixNQUFwQixHQUE2QixDQUEzRCxFQUE4RDtBQUM1RCxhQUFPZSxRQUFRLENBQUNQLEtBQVQsQ0FBZSxHQUFmLEVBQW9CLENBQXBCLEVBQXVCVSxLQUF2QixDQUE2QixRQUE3QixFQUF1QyxDQUF2QyxFQUEwQ0MsTUFBMUMsQ0FBaUQsQ0FBakQsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sRUFBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0MsaUJBQVAsQ0FBeUJULFVBQXpCLEVBQTZDO0FBQzNDLFVBQU1DLENBQUMsR0FBR0MsaUJBQVFDLElBQVIsQ0FBYUgsVUFBYixDQUFWOztBQUNBLFVBQU1VLFNBQVMsR0FBR1QsQ0FBQyxDQUFDLGlDQUFELENBQUQsQ0FDZkksSUFEZSxDQUNWLFNBRFUsQ0FBbEI7O0FBR0EsUUFBSUssU0FBUyxLQUFLSixTQUFkLElBQTJCSSxTQUFTLENBQUNiLEtBQVYsQ0FBZ0IsR0FBaEIsRUFBcUJSLE1BQXJCLEdBQThCLENBQTdELEVBQWdFO0FBQzlELGFBQU9xQixTQUFTLENBQUNiLEtBQVYsQ0FBZ0IsR0FBaEIsRUFBcUIsQ0FBckIsRUFBd0JjLElBQXhCLEdBQStCQyxPQUEvQixDQUF1QyxHQUF2QyxFQUE0QyxFQUE1QyxFQUFnREEsT0FBaEQsQ0FBd0QsR0FBeEQsRUFBNkQsRUFBN0QsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sRUFBUDtBQUNEO0FBQ0Y7O0FBckQ2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5pbXBvcnQgY2hlZXJpbyBmcm9tICdjaGVlcmlvJ1xuaW1wb3J0IHsgU2VydmljZSB9IGZyb20gJy4vc2VydmljZSdcblxuY2xhc3MgSW5zdGFncmFtIGV4dGVuZHMgU2VydmljZSB7XG4gIHN0YXRpYyBnZXRCYXNlVXJscygpIHtcbiAgICBjb25zdCBiYXNlVXJscyA9IFsnaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLCAnaHR0cHM6Ly9pbnN0YWdyYW0uY29tLyddXG4gICAgcmV0dXJuIGJhc2VVcmxzXG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvb2ZVcmwocHJvb2Y6IE9iamVjdCkge1xuICAgIGNvbnN0IGJhc2VVcmxzID0gdGhpcy5nZXRCYXNlVXJscygpXG4gICAgY29uc3Qgbm9ybWFsaXplZFByb29mVXJsID0gdGhpcy5ub3JtYWxpemVJbnN0YWdyYW1VcmwocHJvb2YpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhc2VVcmxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobm9ybWFsaXplZFByb29mVXJsLnN0YXJ0c1dpdGgoYCR7YmFzZVVybHNbaV19YCkpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRQcm9vZlVybFxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFByb29mIHVybCAke3Byb29mLnByb29mX3VybH0gaXMgbm90IHZhbGlkIGZvciBzZXJ2aWNlICR7cHJvb2Yuc2VydmljZX1gKVxuICB9XG5cbiAgc3RhdGljIG5vcm1hbGl6ZUluc3RhZ3JhbVVybChwcm9vZjogT2JqZWN0KSB7XG4gICAgbGV0IHByb29mVXJsID0gcHJvb2YucHJvb2ZfdXJsXG4gICAgcHJvb2ZVcmwgPSBzdXBlci5wcmVmaXhTY2hlbWUocHJvb2ZVcmwpXG5cbiAgICBpZiAocHJvb2ZVcmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly9pbnN0YWdyYW0uY29tJykpIHtcbiAgICAgIGNvbnN0IHRva2VucyA9IHByb29mVXJsLnNwbGl0KCdodHRwczovL2luc3RhZ3JhbS5jb20nKVxuICAgICAgcHJvb2ZVcmwgPSBgaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbSR7dG9rZW5zWzFdfWBcbiAgICB9XG4gICAgcmV0dXJuIHByb29mVXJsXG4gIH1cblxuICBzdGF0aWMgc2hvdWxkVmFsaWRhdGVJZGVudGl0eUluQm9keSgpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc3RhdGljIGdldFByb29mSWRlbnRpdHkoc2VhcmNoVGV4dDogc3RyaW5nKSB7XG4gICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChzZWFyY2hUZXh0KVxuICAgIGNvbnN0IHVzZXJuYW1lID0gJCgnbWV0YVtwcm9wZXJ0eT1cIm9nOmRlc2NyaXB0aW9uXCJdJykuYXR0cignY29udGVudCcpXG4gICAgaWYgKHVzZXJuYW1lICE9PSB1bmRlZmluZWQgJiYgdXNlcm5hbWUuc3BsaXQoJzonKS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gdXNlcm5hbWUuc3BsaXQoJzonKVswXS5tYXRjaCgvKEBcXHcrKS8pWzBdLnN1YnN0cigxKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvb2ZTdGF0ZW1lbnQoc2VhcmNoVGV4dDogc3RyaW5nKSB7XG4gICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChzZWFyY2hUZXh0KVxuICAgIGNvbnN0IHN0YXRlbWVudCA9ICQoJ21ldGFbcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiXScpXG4gICAgICAuYXR0cignY29udGVudCcpXG5cbiAgICBpZiAoc3RhdGVtZW50ICE9PSB1bmRlZmluZWQgJiYgc3RhdGVtZW50LnNwbGl0KCc6JykubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHN0YXRlbWVudC5zcGxpdCgnOicpWzFdLnRyaW0oKS5yZXBsYWNlKCfigJwnLCAnJykucmVwbGFjZSgn4oCdJywgJycpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBJbnN0YWdyYW0gfVxuIl19