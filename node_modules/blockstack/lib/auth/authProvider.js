"use strict";

exports.__esModule = true;
exports.getAuthRequestFromURL = getAuthRequestFromURL;
exports.fetchAppManifest = fetchAppManifest;
exports.redirectUserToApp = redirectUserToApp;

var _queryString = _interopRequireDefault(require("query-string"));

var _jsontokens = require("jsontokens");

var _index = require("../index");

var _utils = require("../utils");

var _logger = require("../logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Retrieves the authentication request from the query string
 * @return {String|null} the authentication request or `null` if
 * the query string parameter `authRequest` is not found
 * @private
 */
function getAuthRequestFromURL() {
  const queryDict = _queryString.default.parse(location.search);

  if (queryDict.authRequest !== null && queryDict.authRequest !== undefined) {
    return queryDict.authRequest.split(`${_utils.BLOCKSTACK_HANDLER}:`).join('');
  } else {
    return null;
  }
}
/**
 * Fetches the contents of the manifest file specified in the authentication request
 *
 * @param  {String} authRequest encoded and signed authentication request
 * @return {Promise<Object|String>} Returns a `Promise` that resolves to the JSON
 * object manifest file unless there's an error in which case rejects with an error
 * message.
 * @private
 */


function fetchAppManifest(authRequest) {
  return new Promise((resolve, reject) => {
    if (!authRequest) {
      reject('Invalid auth request');
    } else {
      const payload = (0, _jsontokens.decodeToken)(authRequest).payload;
      const manifestURI = payload.manifest_uri;

      try {
        _logger.Logger.debug(`Fetching manifest from ${manifestURI}`);

        fetch(manifestURI).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJSON => {
          resolve(responseJSON);
        }).catch(e => {
          _logger.Logger.debug(e.stack);

          reject('Could not fetch manifest.json');
        });
      } catch (e) {
        _logger.Logger.debug(e.stack);

        reject('Could not fetch manifest.json');
      }
    }
  });
}
/**
 * Redirect the user's browser to the app using the `redirect_uri`
 * specified in the authentication request, passing the authentication
 * response token as a query parameter.
 *
 * @param {String} authRequest  encoded and signed authentication request token
 * @param  {String} authResponse encoded and signed authentication response token
 * @return {void}
 * @throws {Error} if there is no redirect uri
 * @private
 */


function redirectUserToApp(authRequest, authResponse) {
  const payload = (0, _jsontokens.decodeToken)(authRequest).payload;
  let redirectURI = payload.redirect_uri;

  _logger.Logger.debug(redirectURI);

  if (redirectURI) {
    redirectURI = (0, _index.updateQueryStringParameter)(redirectURI, 'authResponse', authResponse);
  } else {
    throw new Error('Invalid redirect URI');
  }

  window.location = redirectURI;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoL2F1dGhQcm92aWRlci5qcyJdLCJuYW1lcyI6WyJnZXRBdXRoUmVxdWVzdEZyb21VUkwiLCJxdWVyeURpY3QiLCJxdWVyeVN0cmluZyIsInBhcnNlIiwibG9jYXRpb24iLCJzZWFyY2giLCJhdXRoUmVxdWVzdCIsInVuZGVmaW5lZCIsInNwbGl0IiwiQkxPQ0tTVEFDS19IQU5ETEVSIiwiam9pbiIsImZldGNoQXBwTWFuaWZlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInBheWxvYWQiLCJtYW5pZmVzdFVSSSIsIm1hbmlmZXN0X3VyaSIsIkxvZ2dlciIsImRlYnVnIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJ0ZXh0IiwicmVzcG9uc2VUZXh0IiwiSlNPTiIsInJlc3BvbnNlSlNPTiIsImNhdGNoIiwiZSIsInN0YWNrIiwicmVkaXJlY3RVc2VyVG9BcHAiLCJhdXRoUmVzcG9uc2UiLCJyZWRpcmVjdFVSSSIsInJlZGlyZWN0X3VyaSIsIkVycm9yIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7QUFFQTs7Ozs7O0FBTU8sU0FBU0EscUJBQVQsR0FBaUM7QUFDdEMsUUFBTUMsU0FBUyxHQUFHQyxxQkFBWUMsS0FBWixDQUFrQkMsUUFBUSxDQUFDQyxNQUEzQixDQUFsQjs7QUFDQSxNQUFJSixTQUFTLENBQUNLLFdBQVYsS0FBMEIsSUFBMUIsSUFBa0NMLFNBQVMsQ0FBQ0ssV0FBVixLQUEwQkMsU0FBaEUsRUFBMkU7QUFDekUsV0FBT04sU0FBUyxDQUFDSyxXQUFWLENBQXNCRSxLQUF0QixDQUE2QixHQUFFQyx5QkFBbUIsR0FBbEQsRUFBc0RDLElBQXRELENBQTJELEVBQTNELENBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLElBQVA7QUFDRDtBQUNGO0FBRUQ7Ozs7Ozs7Ozs7O0FBU08sU0FBU0MsZ0JBQVQsQ0FBMEJMLFdBQTFCLEVBQXVDO0FBQzVDLFNBQU8sSUFBSU0sT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUN0QyxRQUFJLENBQUNSLFdBQUwsRUFBa0I7QUFDaEJRLE1BQUFBLE1BQU0sQ0FBQyxzQkFBRCxDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTUMsT0FBTyxHQUFHLDZCQUFZVCxXQUFaLEVBQXlCUyxPQUF6QztBQUNBLFlBQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFDRSxZQUE1Qjs7QUFDQSxVQUFJO0FBQ0ZDLHVCQUFPQyxLQUFQLENBQWMsMEJBQXlCSCxXQUFZLEVBQW5EOztBQUNBSSxRQUFBQSxLQUFLLENBQUNKLFdBQUQsQ0FBTCxDQUNHSyxJQURILENBQ1FDLFFBQVEsSUFBSUEsUUFBUSxDQUFDQyxJQUFULEVBRHBCLEVBRUdGLElBRkgsQ0FFUUcsWUFBWSxJQUFJQyxJQUFJLENBQUN0QixLQUFMLENBQVdxQixZQUFYLENBRnhCLEVBR0dILElBSEgsQ0FHU0ssWUFBRCxJQUFrQjtBQUN0QmIsVUFBQUEsT0FBTyxDQUFDYSxZQUFELENBQVA7QUFDRCxTQUxILEVBTUdDLEtBTkgsQ0FNVUMsQ0FBRCxJQUFPO0FBQ1pWLHlCQUFPQyxLQUFQLENBQWFTLENBQUMsQ0FBQ0MsS0FBZjs7QUFDQWYsVUFBQUEsTUFBTSxDQUFDLCtCQUFELENBQU47QUFDRCxTQVRIO0FBVUQsT0FaRCxDQVlFLE9BQU9jLENBQVAsRUFBVTtBQUNWVix1QkFBT0MsS0FBUCxDQUFhUyxDQUFDLENBQUNDLEtBQWY7O0FBQ0FmLFFBQUFBLE1BQU0sQ0FBQywrQkFBRCxDQUFOO0FBQ0Q7QUFDRjtBQUNGLEdBdkJNLENBQVA7QUF3QkQ7QUFFRDs7Ozs7Ozs7Ozs7OztBQVdPLFNBQVNnQixpQkFBVCxDQUEyQnhCLFdBQTNCLEVBQXdDeUIsWUFBeEMsRUFBc0Q7QUFDM0QsUUFBTWhCLE9BQU8sR0FBRyw2QkFBWVQsV0FBWixFQUF5QlMsT0FBekM7QUFDQSxNQUFJaUIsV0FBVyxHQUFHakIsT0FBTyxDQUFDa0IsWUFBMUI7O0FBQ0FmLGlCQUFPQyxLQUFQLENBQWFhLFdBQWI7O0FBQ0EsTUFBSUEsV0FBSixFQUFpQjtBQUNmQSxJQUFBQSxXQUFXLEdBQUcsdUNBQTJCQSxXQUEzQixFQUF3QyxjQUF4QyxFQUF3REQsWUFBeEQsQ0FBZDtBQUNELEdBRkQsTUFFTztBQUNMLFVBQU0sSUFBSUcsS0FBSixDQUFVLHNCQUFWLENBQU47QUFDRDs7QUFDREMsRUFBQUEsTUFBTSxDQUFDL0IsUUFBUCxHQUFrQjRCLFdBQWxCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcXVlcnlTdHJpbmcgZnJvbSAncXVlcnktc3RyaW5nJ1xuaW1wb3J0IHsgZGVjb2RlVG9rZW4gfSBmcm9tICdqc29udG9rZW5zJ1xuaW1wb3J0IHsgdXBkYXRlUXVlcnlTdHJpbmdQYXJhbWV0ZXIgfSBmcm9tICcuLi9pbmRleCdcbmltcG9ydCB7IEJMT0NLU1RBQ0tfSEFORExFUiB9IGZyb20gJy4uL3V0aWxzJ1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInXG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBhdXRoZW50aWNhdGlvbiByZXF1ZXN0IGZyb20gdGhlIHF1ZXJ5IHN0cmluZ1xuICogQHJldHVybiB7U3RyaW5nfG51bGx9IHRoZSBhdXRoZW50aWNhdGlvbiByZXF1ZXN0IG9yIGBudWxsYCBpZlxuICogdGhlIHF1ZXJ5IHN0cmluZyBwYXJhbWV0ZXIgYGF1dGhSZXF1ZXN0YCBpcyBub3QgZm91bmRcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdXRoUmVxdWVzdEZyb21VUkwoKSB7XG4gIGNvbnN0IHF1ZXJ5RGljdCA9IHF1ZXJ5U3RyaW5nLnBhcnNlKGxvY2F0aW9uLnNlYXJjaClcbiAgaWYgKHF1ZXJ5RGljdC5hdXRoUmVxdWVzdCAhPT0gbnVsbCAmJiBxdWVyeURpY3QuYXV0aFJlcXVlc3QgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBxdWVyeURpY3QuYXV0aFJlcXVlc3Quc3BsaXQoYCR7QkxPQ0tTVEFDS19IQU5ETEVSfTpgKS5qb2luKCcnKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBjb250ZW50cyBvZiB0aGUgbWFuaWZlc3QgZmlsZSBzcGVjaWZpZWQgaW4gdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGF1dGhSZXF1ZXN0IGVuY29kZWQgYW5kIHNpZ25lZCBhdXRoZW50aWNhdGlvbiByZXF1ZXN0XG4gKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdHxTdHJpbmc+fSBSZXR1cm5zIGEgYFByb21pc2VgIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIEpTT05cbiAqIG9iamVjdCBtYW5pZmVzdCBmaWxlIHVubGVzcyB0aGVyZSdzIGFuIGVycm9yIGluIHdoaWNoIGNhc2UgcmVqZWN0cyB3aXRoIGFuIGVycm9yXG4gKiBtZXNzYWdlLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZldGNoQXBwTWFuaWZlc3QoYXV0aFJlcXVlc3QpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoIWF1dGhSZXF1ZXN0KSB7XG4gICAgICByZWplY3QoJ0ludmFsaWQgYXV0aCByZXF1ZXN0JylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IGRlY29kZVRva2VuKGF1dGhSZXF1ZXN0KS5wYXlsb2FkXG4gICAgICBjb25zdCBtYW5pZmVzdFVSSSA9IHBheWxvYWQubWFuaWZlc3RfdXJpXG4gICAgICB0cnkge1xuICAgICAgICBMb2dnZXIuZGVidWcoYEZldGNoaW5nIG1hbmlmZXN0IGZyb20gJHttYW5pZmVzdFVSSX1gKVxuICAgICAgICBmZXRjaChtYW5pZmVzdFVSSSlcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2VUZXh0ID0+IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSlcbiAgICAgICAgICAudGhlbigocmVzcG9uc2VKU09OKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlSlNPTilcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgTG9nZ2VyLmRlYnVnKGUuc3RhY2spXG4gICAgICAgICAgICByZWplY3QoJ0NvdWxkIG5vdCBmZXRjaCBtYW5pZmVzdC5qc29uJylcbiAgICAgICAgICB9KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBMb2dnZXIuZGVidWcoZS5zdGFjaylcbiAgICAgICAgcmVqZWN0KCdDb3VsZCBub3QgZmV0Y2ggbWFuaWZlc3QuanNvbicpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG4vKipcbiAqIFJlZGlyZWN0IHRoZSB1c2VyJ3MgYnJvd3NlciB0byB0aGUgYXBwIHVzaW5nIHRoZSBgcmVkaXJlY3RfdXJpYFxuICogc3BlY2lmaWVkIGluIHRoZSBhdXRoZW50aWNhdGlvbiByZXF1ZXN0LCBwYXNzaW5nIHRoZSBhdXRoZW50aWNhdGlvblxuICogcmVzcG9uc2UgdG9rZW4gYXMgYSBxdWVyeSBwYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGF1dGhSZXF1ZXN0ICBlbmNvZGVkIGFuZCBzaWduZWQgYXV0aGVudGljYXRpb24gcmVxdWVzdCB0b2tlblxuICogQHBhcmFtICB7U3RyaW5nfSBhdXRoUmVzcG9uc2UgZW5jb2RlZCBhbmQgc2lnbmVkIGF1dGhlbnRpY2F0aW9uIHJlc3BvbnNlIHRva2VuXG4gKiBAcmV0dXJuIHt2b2lkfVxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZXJlIGlzIG5vIHJlZGlyZWN0IHVyaVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZGlyZWN0VXNlclRvQXBwKGF1dGhSZXF1ZXN0LCBhdXRoUmVzcG9uc2UpIHtcbiAgY29uc3QgcGF5bG9hZCA9IGRlY29kZVRva2VuKGF1dGhSZXF1ZXN0KS5wYXlsb2FkXG4gIGxldCByZWRpcmVjdFVSSSA9IHBheWxvYWQucmVkaXJlY3RfdXJpXG4gIExvZ2dlci5kZWJ1ZyhyZWRpcmVjdFVSSSlcbiAgaWYgKHJlZGlyZWN0VVJJKSB7XG4gICAgcmVkaXJlY3RVUkkgPSB1cGRhdGVRdWVyeVN0cmluZ1BhcmFtZXRlcihyZWRpcmVjdFVSSSwgJ2F1dGhSZXNwb25zZScsIGF1dGhSZXNwb25zZSlcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVkaXJlY3QgVVJJJylcbiAgfVxuICB3aW5kb3cubG9jYXRpb24gPSByZWRpcmVjdFVSSVxufVxuIl19