"use strict";

exports.__esModule = true;
exports.Service = void 0;

require("cross-fetch/polyfill");

var _serviceUtils = require("./serviceUtils");

class Service {
  static validateProof(proof, ownerAddress, name = null) {
    let proofUrl;
    return Promise.resolve().then(() => {
      proofUrl = this.getProofUrl(proof);
      return fetch(proofUrl);
    }).then(res => {
      if (res.status !== 200) {
        throw new Error(`Proof url ${proofUrl} returned unexpected http status ${res.status}.
              Unable to validate proof.`);
      }

      return res.text();
    }).then(text => {
      // Validate identity in provided proof body/tags if required
      if (this.shouldValidateIdentityInBody() && proof.identifier !== this.getProofIdentity(text)) {
        return proof;
      }

      const proofText = this.getProofStatement(text);
      proof.valid = (0, _serviceUtils.containsValidProofStatement)(proofText, name) || (0, _serviceUtils.containsValidAddressProofStatement)(proofText, ownerAddress);
      return proof;
    }).catch(error => {
      console.error(error);
      proof.valid = false;
      return proof;
    });
  }

  static getBaseUrls() {
    return [];
  }

  static getProofIdentity(searchText) {
    return searchText;
  }

  static getProofStatement(searchText) {
    return searchText;
  }

  static shouldValidateIdentityInBody() {
    return false;
  }

  static prefixScheme(proofUrl) {
    if (!proofUrl.startsWith('https://') && !proofUrl.startsWith('http://')) {
      return `https://${proofUrl}`;
    } else if (proofUrl.startsWith('http://')) {
      return proofUrl.replace('http://', 'https://');
    } else {
      return proofUrl;
    }
  }

  static getProofUrl(proof) {
    const baseUrls = this.getBaseUrls();
    let proofUrl = proof.proof_url.toLowerCase();
    proofUrl = this.prefixScheme(proofUrl);

    for (let i = 0; i < baseUrls.length; i++) {
      const requiredPrefix = `${baseUrls[i]}${proof.identifier}`.toLowerCase();

      if (proofUrl.startsWith(requiredPrefix)) {
        return proofUrl;
      }
    }

    throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);
  }

}

exports.Service = Service;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9maWxlcy9zZXJ2aWNlcy9zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIlNlcnZpY2UiLCJ2YWxpZGF0ZVByb29mIiwicHJvb2YiLCJvd25lckFkZHJlc3MiLCJuYW1lIiwicHJvb2ZVcmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJnZXRQcm9vZlVybCIsImZldGNoIiwicmVzIiwic3RhdHVzIiwiRXJyb3IiLCJ0ZXh0Iiwic2hvdWxkVmFsaWRhdGVJZGVudGl0eUluQm9keSIsImlkZW50aWZpZXIiLCJnZXRQcm9vZklkZW50aXR5IiwicHJvb2ZUZXh0IiwiZ2V0UHJvb2ZTdGF0ZW1lbnQiLCJ2YWxpZCIsImNhdGNoIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0QmFzZVVybHMiLCJzZWFyY2hUZXh0IiwicHJlZml4U2NoZW1lIiwic3RhcnRzV2l0aCIsInJlcGxhY2UiLCJiYXNlVXJscyIsInByb29mX3VybCIsInRvTG93ZXJDYXNlIiwiaSIsImxlbmd0aCIsInJlcXVpcmVkUHJlZml4Iiwic2VydmljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQTs7QUFDQTs7QUFFTyxNQUFNQSxPQUFOLENBQWM7QUFDbkIsU0FBT0MsYUFBUCxDQUFxQkMsS0FBckIsRUFDcUJDLFlBRHJCLEVBRXFCQyxJQUFhLEdBQUcsSUFGckMsRUFFMkM7QUFDekMsUUFBSUMsUUFBSjtBQUNBLFdBQU9DLE9BQU8sQ0FBQ0MsT0FBUixHQUNKQyxJQURJLENBQ0MsTUFBTTtBQUNWSCxNQUFBQSxRQUFRLEdBQUcsS0FBS0ksV0FBTCxDQUFpQlAsS0FBakIsQ0FBWDtBQUNBLGFBQU9RLEtBQUssQ0FBQ0wsUUFBRCxDQUFaO0FBQ0QsS0FKSSxFQUtKRyxJQUxJLENBS0VHLEdBQUQsSUFBUztBQUNiLFVBQUlBLEdBQUcsQ0FBQ0MsTUFBSixLQUFlLEdBQW5CLEVBQXdCO0FBQ3RCLGNBQU0sSUFBSUMsS0FBSixDQUFXLGFBQVlSLFFBQVMsb0NBQW1DTSxHQUFHLENBQUNDLE1BQU87d0NBQTlFLENBQU47QUFFRDs7QUFDRCxhQUFPRCxHQUFHLENBQUNHLElBQUosRUFBUDtBQUNELEtBWEksRUFZSk4sSUFaSSxDQVlFTSxJQUFELElBQVU7QUFDZDtBQUNBLFVBQUksS0FBS0MsNEJBQUwsTUFDR2IsS0FBSyxDQUFDYyxVQUFOLEtBQXFCLEtBQUtDLGdCQUFMLENBQXNCSCxJQUF0QixDQUQ1QixFQUN5RDtBQUN2RCxlQUFPWixLQUFQO0FBQ0Q7O0FBQ0QsWUFBTWdCLFNBQVMsR0FBRyxLQUFLQyxpQkFBTCxDQUF1QkwsSUFBdkIsQ0FBbEI7QUFDQVosTUFBQUEsS0FBSyxDQUFDa0IsS0FBTixHQUFjLCtDQUE0QkYsU0FBNUIsRUFBdUNkLElBQXZDLEtBQ1Qsc0RBQW1DYyxTQUFuQyxFQUE4Q2YsWUFBOUMsQ0FETDtBQUVBLGFBQU9ELEtBQVA7QUFDRCxLQXRCSSxFQXVCSm1CLEtBdkJJLENBdUJHQyxLQUFELElBQVc7QUFDaEJDLE1BQUFBLE9BQU8sQ0FBQ0QsS0FBUixDQUFjQSxLQUFkO0FBQ0FwQixNQUFBQSxLQUFLLENBQUNrQixLQUFOLEdBQWMsS0FBZDtBQUNBLGFBQU9sQixLQUFQO0FBQ0QsS0EzQkksQ0FBUDtBQTRCRDs7QUFFRCxTQUFPc0IsV0FBUCxHQUFxQjtBQUNuQixXQUFPLEVBQVA7QUFDRDs7QUFFRCxTQUFPUCxnQkFBUCxDQUF3QlEsVUFBeEIsRUFBNEM7QUFDMUMsV0FBT0EsVUFBUDtBQUNEOztBQUVELFNBQU9OLGlCQUFQLENBQXlCTSxVQUF6QixFQUE2QztBQUMzQyxXQUFPQSxVQUFQO0FBQ0Q7O0FBRUQsU0FBT1YsNEJBQVAsR0FBc0M7QUFDcEMsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBT1csWUFBUCxDQUFvQnJCLFFBQXBCLEVBQXNDO0FBQ3BDLFFBQUksQ0FBQ0EsUUFBUSxDQUFDc0IsVUFBVCxDQUFvQixVQUFwQixDQUFELElBQW9DLENBQUN0QixRQUFRLENBQUNzQixVQUFULENBQW9CLFNBQXBCLENBQXpDLEVBQXlFO0FBQ3ZFLGFBQVEsV0FBVXRCLFFBQVMsRUFBM0I7QUFDRCxLQUZELE1BRU8sSUFBSUEsUUFBUSxDQUFDc0IsVUFBVCxDQUFvQixTQUFwQixDQUFKLEVBQW9DO0FBQ3pDLGFBQU90QixRQUFRLENBQUN1QixPQUFULENBQWlCLFNBQWpCLEVBQTRCLFVBQTVCLENBQVA7QUFDRCxLQUZNLE1BRUE7QUFDTCxhQUFPdkIsUUFBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0ksV0FBUCxDQUFtQlAsS0FBbkIsRUFBa0M7QUFDaEMsVUFBTTJCLFFBQVEsR0FBRyxLQUFLTCxXQUFMLEVBQWpCO0FBRUEsUUFBSW5CLFFBQVEsR0FBR0gsS0FBSyxDQUFDNEIsU0FBTixDQUFnQkMsV0FBaEIsRUFBZjtBQUNBMUIsSUFBQUEsUUFBUSxHQUFHLEtBQUtxQixZQUFMLENBQWtCckIsUUFBbEIsQ0FBWDs7QUFFQSxTQUFLLElBQUkyQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxRQUFRLENBQUNJLE1BQTdCLEVBQXFDRCxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDLFlBQU1FLGNBQWMsR0FBSSxHQUFFTCxRQUFRLENBQUNHLENBQUQsQ0FBSSxHQUFFOUIsS0FBSyxDQUFDYyxVQUFXLEVBQWxDLENBQW9DZSxXQUFwQyxFQUF2Qjs7QUFDQSxVQUFJMUIsUUFBUSxDQUFDc0IsVUFBVCxDQUFvQk8sY0FBcEIsQ0FBSixFQUF5QztBQUN2QyxlQUFPN0IsUUFBUDtBQUNEO0FBQ0Y7O0FBQ0QsVUFBTSxJQUFJUSxLQUFKLENBQVcsYUFBWVgsS0FBSyxDQUFDNEIsU0FBVSw2QkFBNEI1QixLQUFLLENBQUNpQyxPQUFRLEVBQWpGLENBQU47QUFDRDs7QUExRWtCIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbmltcG9ydCAnY3Jvc3MtZmV0Y2gvcG9seWZpbGwnXG5pbXBvcnQgeyBjb250YWluc1ZhbGlkUHJvb2ZTdGF0ZW1lbnQsIGNvbnRhaW5zVmFsaWRBZGRyZXNzUHJvb2ZTdGF0ZW1lbnQgfSBmcm9tICcuL3NlcnZpY2VVdGlscydcblxuZXhwb3J0IGNsYXNzIFNlcnZpY2Uge1xuICBzdGF0aWMgdmFsaWRhdGVQcm9vZihwcm9vZjogT2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICBvd25lckFkZHJlc3M6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogP3N0cmluZyA9IG51bGwpIHtcbiAgICBsZXQgcHJvb2ZVcmxcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcHJvb2ZVcmwgPSB0aGlzLmdldFByb29mVXJsKHByb29mKVxuICAgICAgICByZXR1cm4gZmV0Y2gocHJvb2ZVcmwpXG4gICAgICB9KVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9vZiB1cmwgJHtwcm9vZlVybH0gcmV0dXJuZWQgdW5leHBlY3RlZCBodHRwIHN0YXR1cyAke3Jlcy5zdGF0dXN9LlxuICAgICAgICAgICAgICBVbmFibGUgdG8gdmFsaWRhdGUgcHJvb2YuYClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzLnRleHQoKVxuICAgICAgfSlcbiAgICAgIC50aGVuKCh0ZXh0KSA9PiB7XG4gICAgICAgIC8vIFZhbGlkYXRlIGlkZW50aXR5IGluIHByb3ZpZGVkIHByb29mIGJvZHkvdGFncyBpZiByZXF1aXJlZFxuICAgICAgICBpZiAodGhpcy5zaG91bGRWYWxpZGF0ZUlkZW50aXR5SW5Cb2R5KClcbiAgICAgICAgICAgICYmIHByb29mLmlkZW50aWZpZXIgIT09IHRoaXMuZ2V0UHJvb2ZJZGVudGl0eSh0ZXh0KSkge1xuICAgICAgICAgIHJldHVybiBwcm9vZlxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb29mVGV4dCA9IHRoaXMuZ2V0UHJvb2ZTdGF0ZW1lbnQodGV4dClcbiAgICAgICAgcHJvb2YudmFsaWQgPSBjb250YWluc1ZhbGlkUHJvb2ZTdGF0ZW1lbnQocHJvb2ZUZXh0LCBuYW1lKVxuICAgICAgICAgIHx8IGNvbnRhaW5zVmFsaWRBZGRyZXNzUHJvb2ZTdGF0ZW1lbnQocHJvb2ZUZXh0LCBvd25lckFkZHJlc3MpXG4gICAgICAgIHJldHVybiBwcm9vZlxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICAgICAgcHJvb2YudmFsaWQgPSBmYWxzZVxuICAgICAgICByZXR1cm4gcHJvb2ZcbiAgICAgIH0pXG4gIH1cblxuICBzdGF0aWMgZ2V0QmFzZVVybHMoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICBzdGF0aWMgZ2V0UHJvb2ZJZGVudGl0eShzZWFyY2hUZXh0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc2VhcmNoVGV4dFxuICB9XG5cbiAgc3RhdGljIGdldFByb29mU3RhdGVtZW50KHNlYXJjaFRleHQ6IHN0cmluZykge1xuICAgIHJldHVybiBzZWFyY2hUZXh0XG4gIH1cblxuICBzdGF0aWMgc2hvdWxkVmFsaWRhdGVJZGVudGl0eUluQm9keSgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHN0YXRpYyBwcmVmaXhTY2hlbWUocHJvb2ZVcmw6IHN0cmluZykge1xuICAgIGlmICghcHJvb2ZVcmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSAmJiAhcHJvb2ZVcmwuc3RhcnRzV2l0aCgnaHR0cDovLycpKSB7XG4gICAgICByZXR1cm4gYGh0dHBzOi8vJHtwcm9vZlVybH1gXG4gICAgfSBlbHNlIGlmIChwcm9vZlVybC5zdGFydHNXaXRoKCdodHRwOi8vJykpIHtcbiAgICAgIHJldHVybiBwcm9vZlVybC5yZXBsYWNlKCdodHRwOi8vJywgJ2h0dHBzOi8vJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByb29mVXJsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFByb29mVXJsKHByb29mOiBPYmplY3QpIHtcbiAgICBjb25zdCBiYXNlVXJscyA9IHRoaXMuZ2V0QmFzZVVybHMoKVxuXG4gICAgbGV0IHByb29mVXJsID0gcHJvb2YucHJvb2ZfdXJsLnRvTG93ZXJDYXNlKClcbiAgICBwcm9vZlVybCA9IHRoaXMucHJlZml4U2NoZW1lKHByb29mVXJsKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXNlVXJscy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVxdWlyZWRQcmVmaXggPSBgJHtiYXNlVXJsc1tpXX0ke3Byb29mLmlkZW50aWZpZXJ9YC50b0xvd2VyQ2FzZSgpXG4gICAgICBpZiAocHJvb2ZVcmwuc3RhcnRzV2l0aChyZXF1aXJlZFByZWZpeCkpIHtcbiAgICAgICAgcmV0dXJuIHByb29mVXJsXG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgUHJvb2YgdXJsICR7cHJvb2YucHJvb2ZfdXJsfSBpcyBub3QgdmFsaWQgZm9yIHNlcnZpY2UgJHtwcm9vZi5zZXJ2aWNlfWApXG4gIH1cbn1cbiJdfQ==