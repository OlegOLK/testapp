"use strict";

exports.__esModule = true;
exports.Profile = void 0;

var _schemaInspector = _interopRequireDefault(require("schema-inspector"));

var _profileTokens = require("./profileTokens");

var _profileProofs = require("./profileProofs");

var _profileZoneFiles = require("./profileZoneFiles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const schemaDefinition = {
  type: 'object',
  properties: {
    '@context': {
      type: 'string',
      optional: true
    },
    '@type': {
      type: 'string'
    }
  }
};

class Profile {
  constructor(profile = {}) {
    this._profile = Object.assign({}, {
      '@context': 'http://schema.org/'
    }, profile);
  }

  toJSON() {
    return Object.assign({}, this._profile);
  }

  toToken(privateKey) {
    return (0, _profileTokens.signProfileToken)(this.toJSON(), privateKey);
  }

  static validateSchema(profile, strict = false) {
    schemaDefinition.strict = strict;
    return _schemaInspector.default.validate(schemaDefinition, profile);
  }

  static fromToken(token, publicKeyOrAddress = null) {
    const profile = (0, _profileTokens.extractProfile)(token, publicKeyOrAddress);
    return new Profile(profile);
  }

  static makeZoneFile(domainName, tokenFileURL) {
    return (0, _profileZoneFiles.makeProfileZoneFile)(domainName, tokenFileURL);
  }

  static validateProofs(domainName) {
    return (0, _profileProofs.validateProofs)(this.toJSON(), domainName);
  }

}

exports.Profile = Profile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9maWxlcy9wcm9maWxlLmpzIl0sIm5hbWVzIjpbInNjaGVtYURlZmluaXRpb24iLCJ0eXBlIiwicHJvcGVydGllcyIsIm9wdGlvbmFsIiwiUHJvZmlsZSIsImNvbnN0cnVjdG9yIiwicHJvZmlsZSIsIl9wcm9maWxlIiwiT2JqZWN0IiwiYXNzaWduIiwidG9KU09OIiwidG9Ub2tlbiIsInByaXZhdGVLZXkiLCJ2YWxpZGF0ZVNjaGVtYSIsInN0cmljdCIsImluc3BlY3RvciIsInZhbGlkYXRlIiwiZnJvbVRva2VuIiwidG9rZW4iLCJwdWJsaWNLZXlPckFkZHJlc3MiLCJtYWtlWm9uZUZpbGUiLCJkb21haW5OYW1lIiwidG9rZW5GaWxlVVJMIiwidmFsaWRhdGVQcm9vZnMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRztBQUN2QkMsRUFBQUEsSUFBSSxFQUFFLFFBRGlCO0FBRXZCQyxFQUFBQSxVQUFVLEVBQUU7QUFDVixnQkFBWTtBQUFFRCxNQUFBQSxJQUFJLEVBQUUsUUFBUjtBQUFrQkUsTUFBQUEsUUFBUSxFQUFFO0FBQTVCLEtBREY7QUFFVixhQUFTO0FBQUVGLE1BQUFBLElBQUksRUFBRTtBQUFSO0FBRkM7QUFGVyxDQUF6Qjs7QUFRTyxNQUFNRyxPQUFOLENBQWM7QUFDbkJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBTyxHQUFHLEVBQVgsRUFBZTtBQUN4QixTQUFLQyxRQUFMLEdBQWdCQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCO0FBQ2hDLGtCQUFZO0FBRG9CLEtBQWxCLEVBRWJILE9BRmEsQ0FBaEI7QUFHRDs7QUFFREksRUFBQUEsTUFBTSxHQUFHO0FBQ1AsV0FBT0YsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLRixRQUF2QixDQUFQO0FBQ0Q7O0FBRURJLEVBQUFBLE9BQU8sQ0FBQ0MsVUFBRCxFQUFhO0FBQ2xCLFdBQU8scUNBQWlCLEtBQUtGLE1BQUwsRUFBakIsRUFBZ0NFLFVBQWhDLENBQVA7QUFDRDs7QUFFRCxTQUFPQyxjQUFQLENBQXNCUCxPQUF0QixFQUErQlEsTUFBTSxHQUFHLEtBQXhDLEVBQStDO0FBQzdDZCxJQUFBQSxnQkFBZ0IsQ0FBQ2MsTUFBakIsR0FBMEJBLE1BQTFCO0FBQ0EsV0FBT0MseUJBQVVDLFFBQVYsQ0FBbUJoQixnQkFBbkIsRUFBcUNNLE9BQXJDLENBQVA7QUFDRDs7QUFFRCxTQUFPVyxTQUFQLENBQWlCQyxLQUFqQixFQUF3QkMsa0JBQWtCLEdBQUcsSUFBN0MsRUFBbUQ7QUFDakQsVUFBTWIsT0FBTyxHQUFHLG1DQUFlWSxLQUFmLEVBQXNCQyxrQkFBdEIsQ0FBaEI7QUFDQSxXQUFPLElBQUlmLE9BQUosQ0FBWUUsT0FBWixDQUFQO0FBQ0Q7O0FBRUQsU0FBT2MsWUFBUCxDQUFvQkMsVUFBcEIsRUFBZ0NDLFlBQWhDLEVBQThDO0FBQzVDLFdBQU8sMkNBQW9CRCxVQUFwQixFQUFnQ0MsWUFBaEMsQ0FBUDtBQUNEOztBQUVELFNBQU9DLGNBQVAsQ0FBc0JGLFVBQXRCLEVBQWtDO0FBQ2hDLFdBQU8sbUNBQWUsS0FBS1gsTUFBTCxFQUFmLEVBQThCVyxVQUE5QixDQUFQO0FBQ0Q7O0FBL0JrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbnNwZWN0b3IgZnJvbSAnc2NoZW1hLWluc3BlY3RvcidcblxuaW1wb3J0IHsgc2lnblByb2ZpbGVUb2tlbiwgZXh0cmFjdFByb2ZpbGUgfSBmcm9tICcuL3Byb2ZpbGVUb2tlbnMnXG5pbXBvcnQgeyB2YWxpZGF0ZVByb29mcyB9IGZyb20gJy4vcHJvZmlsZVByb29mcydcbmltcG9ydCB7IG1ha2VQcm9maWxlWm9uZUZpbGUgfSBmcm9tICcuL3Byb2ZpbGVab25lRmlsZXMnXG5cbmNvbnN0IHNjaGVtYURlZmluaXRpb24gPSB7XG4gIHR5cGU6ICdvYmplY3QnLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgJ0Bjb250ZXh0JzogeyB0eXBlOiAnc3RyaW5nJywgb3B0aW9uYWw6IHRydWUgfSxcbiAgICAnQHR5cGUnOiB7IHR5cGU6ICdzdHJpbmcnIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJvZmlsZSB7XG4gIGNvbnN0cnVjdG9yKHByb2ZpbGUgPSB7fSkge1xuICAgIHRoaXMuX3Byb2ZpbGUgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAnQGNvbnRleHQnOiAnaHR0cDovL3NjaGVtYS5vcmcvJ1xuICAgIH0sIHByb2ZpbGUpXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX3Byb2ZpbGUpXG4gIH1cblxuICB0b1Rva2VuKHByaXZhdGVLZXkpIHtcbiAgICByZXR1cm4gc2lnblByb2ZpbGVUb2tlbih0aGlzLnRvSlNPTigpLCBwcml2YXRlS2V5KVxuICB9XG5cbiAgc3RhdGljIHZhbGlkYXRlU2NoZW1hKHByb2ZpbGUsIHN0cmljdCA9IGZhbHNlKSB7XG4gICAgc2NoZW1hRGVmaW5pdGlvbi5zdHJpY3QgPSBzdHJpY3RcbiAgICByZXR1cm4gaW5zcGVjdG9yLnZhbGlkYXRlKHNjaGVtYURlZmluaXRpb24sIHByb2ZpbGUpXG4gIH1cblxuICBzdGF0aWMgZnJvbVRva2VuKHRva2VuLCBwdWJsaWNLZXlPckFkZHJlc3MgPSBudWxsKSB7XG4gICAgY29uc3QgcHJvZmlsZSA9IGV4dHJhY3RQcm9maWxlKHRva2VuLCBwdWJsaWNLZXlPckFkZHJlc3MpXG4gICAgcmV0dXJuIG5ldyBQcm9maWxlKHByb2ZpbGUpXG4gIH1cblxuICBzdGF0aWMgbWFrZVpvbmVGaWxlKGRvbWFpbk5hbWUsIHRva2VuRmlsZVVSTCkge1xuICAgIHJldHVybiBtYWtlUHJvZmlsZVpvbmVGaWxlKGRvbWFpbk5hbWUsIHRva2VuRmlsZVVSTClcbiAgfVxuXG4gIHN0YXRpYyB2YWxpZGF0ZVByb29mcyhkb21haW5OYW1lKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRlUHJvb2ZzKHRoaXMudG9KU09OKCksIGRvbWFpbk5hbWUpXG4gIH1cbn1cbiJdfQ==