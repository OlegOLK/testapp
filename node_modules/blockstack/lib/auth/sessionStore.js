"use strict";

exports.__esModule = true;
exports.LocalStorageStore = exports.InstanceDataStore = exports.SessionDataStore = void 0;

var _sessionData = require("./sessionData");

var _authConstants = require("./authConstants");

var _errors = require("../errors");

// import { BLOCKSTACK_GAIA_HUB_LABEL } from '../storage/hub'
// import { Logger } from '../logger'

/**
 * An abstract class representing the SessionDataStore interface.
 * @type {SessionData}
 */
class SessionDataStore {
  constructor(sessionOptions) {
    if (sessionOptions) {
      const newSessionData = new _sessionData.SessionData(sessionOptions);
      this.setSessionData(newSessionData);
    }
  }

  getSessionData() {
    throw new Error('Abstract class');
  }
  /* eslint-disable */


  setSessionData(session) {
    throw new Error('Abstract class');
  }

  deleteSessionData() {
    throw new Error('Abstract class');
  }
  /* eslint-enable */


}
/**
 * Stores session data in the instance of this class.
 * @type {InstanceDataStore}
 */


exports.SessionDataStore = SessionDataStore;

class InstanceDataStore extends SessionDataStore {
  constructor(sessionOptions) {
    super(sessionOptions);

    if (!this.sessionData) {
      this.setSessionData(new _sessionData.SessionData({}));
    }
  }

  getSessionData() {
    if (!this.sessionData) {
      throw new _errors.NoSessionDataError('No session data was found.');
    }

    return this.sessionData;
  }

  setSessionData(session) {
    this.sessionData = session;
    return true;
  }

  deleteSessionData() {
    this.setSessionData(new _sessionData.SessionData({}));
    return true;
  }

}
/**
 * Stores session data in browser a localStorage entry.
 * @type {LocalStorageStore}
 */


exports.InstanceDataStore = InstanceDataStore;

class LocalStorageStore extends SessionDataStore {
  constructor(sessionOptions) {
    super(sessionOptions);

    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && sessionOptions.storeOptions.localStorageKey instanceof String) {
      this.key = sessionOptions.storeOptions.localStorageKey;
    } else {
      this.key = _authConstants.LOCALSTORAGE_SESSION_KEY;
    }

    const data = localStorage.getItem(this.key);

    if (!data) {
      const sessionData = new _sessionData.SessionData({});
      this.setSessionData(sessionData);
    }
  }

  getSessionData() {
    const data = localStorage.getItem(this.key);

    if (!data) {
      throw new _errors.NoSessionDataError('No session data was found in localStorage');
    }

    const dataJSON = JSON.parse(data);
    return _sessionData.SessionData.fromJSON(dataJSON);
  }

  setSessionData(session) {
    localStorage.setItem(this.key, session.toString());
    return true;
  }

  deleteSessionData() {
    localStorage.removeItem(this.key);
    this.setSessionData(new _sessionData.SessionData({}));
    return true;
  } // checkForLegacyDataAndMigrate(): Promise<SessionData> {
  //   const legacyTransitKey = localStorage.getItem(BLOCKSTACK_APP_PRIVATE_KEY_LABEL)
  //   const legacyGaiaConfig = localStorage.getItem(BLOCKSTACK_GAIA_HUB_LABEL)
  //   const legacyUserData = localStorage.getItem(BLOCKSTACK_STORAGE_LABEL)
  //
  //
  //   if (legacyTransitKey) {
  //     localStorage.removeItem(BLOCKSTACK_APP_PRIVATE_KEY_LABEL)
  //   }
  //
  //
  //
  // }


}

exports.LocalStorageStore = LocalStorageStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,