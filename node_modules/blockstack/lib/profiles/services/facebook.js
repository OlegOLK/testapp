"use strict";

exports.__esModule = true;
exports.Facebook = void 0;

var _cheerio = _interopRequireDefault(require("cheerio"));

var _service = require("./service");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Facebook extends _service.Service {
  static getProofUrl(proof) {
    return this.normalizeFacebookUrl(proof);
  }

  static normalizeFacebookUrl(proof) {
    let proofUrl = proof.proof_url.toLowerCase();
    const urlRegex = /(?:http[s]*:\/\/){0,1}(?:[a-zA-Z0-9-]+\.)+facebook\.com/;
    proofUrl = super.prefixScheme(proofUrl);

    if (proofUrl.startsWith('https://facebook.com')) {
      let tokens = proofUrl.split('https://facebook.com');
      proofUrl = `https://www.facebook.com${tokens[1]}`;
      tokens = proofUrl.split('https://www.facebook.com/')[1].split('/posts/');
      const postId = tokens[1];
      proofUrl = `https://www.facebook.com/${proof.identifier}/posts/${postId}`;
    } else if (proofUrl.match(urlRegex)) {
      const tokens = proofUrl.split('facebook.com/')[1].split('/posts/');
      const postId = tokens[1];
      proofUrl = `https://www.facebook.com/${proof.identifier}/posts/${postId}`;
    } else {
      throw new Error(`Proof url ${proof.proof_url} is not valid for service ${proof.service}`);
    }

    return proofUrl;
  }

  static getProofStatement(searchText) {
    const $ = _cheerio.default.load(searchText);

    const statement = $('meta[name="description"]').attr('content');
    return statement !== undefined ? statement.trim() : '';
  }

}

exports.Facebook = Facebook;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9maWxlcy9zZXJ2aWNlcy9mYWNlYm9vay5qcyJdLCJuYW1lcyI6WyJGYWNlYm9vayIsIlNlcnZpY2UiLCJnZXRQcm9vZlVybCIsInByb29mIiwibm9ybWFsaXplRmFjZWJvb2tVcmwiLCJwcm9vZlVybCIsInByb29mX3VybCIsInRvTG93ZXJDYXNlIiwidXJsUmVnZXgiLCJwcmVmaXhTY2hlbWUiLCJzdGFydHNXaXRoIiwidG9rZW5zIiwic3BsaXQiLCJwb3N0SWQiLCJpZGVudGlmaWVyIiwibWF0Y2giLCJFcnJvciIsInNlcnZpY2UiLCJnZXRQcm9vZlN0YXRlbWVudCIsInNlYXJjaFRleHQiLCIkIiwiY2hlZXJpbyIsImxvYWQiLCJzdGF0ZW1lbnQiLCJhdHRyIiwidW5kZWZpbmVkIiwidHJpbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLFFBQU4sU0FBdUJDLGdCQUF2QixDQUErQjtBQUM3QixTQUFPQyxXQUFQLENBQW1CQyxLQUFuQixFQUFrQztBQUNoQyxXQUFPLEtBQUtDLG9CQUFMLENBQTBCRCxLQUExQixDQUFQO0FBQ0Q7O0FBRUQsU0FBT0Msb0JBQVAsQ0FBNEJELEtBQTVCLEVBQTJDO0FBQ3pDLFFBQUlFLFFBQVEsR0FBR0YsS0FBSyxDQUFDRyxTQUFOLENBQWdCQyxXQUFoQixFQUFmO0FBQ0EsVUFBTUMsUUFBUSxHQUFHLHlEQUFqQjtBQUVBSCxJQUFBQSxRQUFRLEdBQUcsTUFBTUksWUFBTixDQUFtQkosUUFBbkIsQ0FBWDs7QUFFQSxRQUFJQSxRQUFRLENBQUNLLFVBQVQsQ0FBb0Isc0JBQXBCLENBQUosRUFBaUQ7QUFDL0MsVUFBSUMsTUFBTSxHQUFHTixRQUFRLENBQUNPLEtBQVQsQ0FBZSxzQkFBZixDQUFiO0FBQ0FQLE1BQUFBLFFBQVEsR0FBSSwyQkFBMEJNLE1BQU0sQ0FBQyxDQUFELENBQUksRUFBaEQ7QUFDQUEsTUFBQUEsTUFBTSxHQUFHTixRQUFRLENBQUNPLEtBQVQsQ0FBZSwyQkFBZixFQUE0QyxDQUE1QyxFQUErQ0EsS0FBL0MsQ0FBcUQsU0FBckQsQ0FBVDtBQUNBLFlBQU1DLE1BQU0sR0FBR0YsTUFBTSxDQUFDLENBQUQsQ0FBckI7QUFDQU4sTUFBQUEsUUFBUSxHQUFJLDRCQUEyQkYsS0FBSyxDQUFDVyxVQUFXLFVBQVNELE1BQU8sRUFBeEU7QUFDRCxLQU5ELE1BTU8sSUFBSVIsUUFBUSxDQUFDVSxLQUFULENBQWVQLFFBQWYsQ0FBSixFQUE4QjtBQUNuQyxZQUFNRyxNQUFNLEdBQUdOLFFBQVEsQ0FBQ08sS0FBVCxDQUFlLGVBQWYsRUFBZ0MsQ0FBaEMsRUFBbUNBLEtBQW5DLENBQXlDLFNBQXpDLENBQWY7QUFDQSxZQUFNQyxNQUFNLEdBQUdGLE1BQU0sQ0FBQyxDQUFELENBQXJCO0FBQ0FOLE1BQUFBLFFBQVEsR0FBSSw0QkFBMkJGLEtBQUssQ0FBQ1csVUFBVyxVQUFTRCxNQUFPLEVBQXhFO0FBQ0QsS0FKTSxNQUlBO0FBQ0wsWUFBTSxJQUFJRyxLQUFKLENBQVcsYUFBWWIsS0FBSyxDQUFDRyxTQUFVLDZCQUE0QkgsS0FBSyxDQUFDYyxPQUFRLEVBQWpGLENBQU47QUFDRDs7QUFFRCxXQUFPWixRQUFQO0FBQ0Q7O0FBRUQsU0FBT2EsaUJBQVAsQ0FBeUJDLFVBQXpCLEVBQTZDO0FBQzNDLFVBQU1DLENBQUMsR0FBR0MsaUJBQVFDLElBQVIsQ0FBYUgsVUFBYixDQUFWOztBQUNBLFVBQU1JLFNBQVMsR0FBR0gsQ0FBQyxDQUFDLDBCQUFELENBQUQsQ0FBOEJJLElBQTlCLENBQW1DLFNBQW5DLENBQWxCO0FBQ0EsV0FBUUQsU0FBUyxLQUFLRSxTQUFmLEdBQTRCRixTQUFTLENBQUNHLElBQVYsRUFBNUIsR0FBK0MsRUFBdEQ7QUFDRDs7QUFoQzRCIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cbmltcG9ydCBjaGVlcmlvIGZyb20gJ2NoZWVyaW8nXG5pbXBvcnQgeyBTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlJ1xuXG5jbGFzcyBGYWNlYm9vayBleHRlbmRzIFNlcnZpY2Uge1xuICBzdGF0aWMgZ2V0UHJvb2ZVcmwocHJvb2Y6IE9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZUZhY2Vib29rVXJsKHByb29mKVxuICB9XG5cbiAgc3RhdGljIG5vcm1hbGl6ZUZhY2Vib29rVXJsKHByb29mOiBPYmplY3QpIHtcbiAgICBsZXQgcHJvb2ZVcmwgPSBwcm9vZi5wcm9vZl91cmwudG9Mb3dlckNhc2UoKVxuICAgIGNvbnN0IHVybFJlZ2V4ID0gLyg/Omh0dHBbc10qOlxcL1xcLyl7MCwxfSg/OlthLXpBLVowLTktXStcXC4pK2ZhY2Vib29rXFwuY29tL1xuXG4gICAgcHJvb2ZVcmwgPSBzdXBlci5wcmVmaXhTY2hlbWUocHJvb2ZVcmwpXG5cbiAgICBpZiAocHJvb2ZVcmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly9mYWNlYm9vay5jb20nKSkge1xuICAgICAgbGV0IHRva2VucyA9IHByb29mVXJsLnNwbGl0KCdodHRwczovL2ZhY2Vib29rLmNvbScpXG4gICAgICBwcm9vZlVybCA9IGBodHRwczovL3d3dy5mYWNlYm9vay5jb20ke3Rva2Vuc1sxXX1gXG4gICAgICB0b2tlbnMgPSBwcm9vZlVybC5zcGxpdCgnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLycpWzFdLnNwbGl0KCcvcG9zdHMvJylcbiAgICAgIGNvbnN0IHBvc3RJZCA9IHRva2Vuc1sxXVxuICAgICAgcHJvb2ZVcmwgPSBgaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLyR7cHJvb2YuaWRlbnRpZmllcn0vcG9zdHMvJHtwb3N0SWR9YFxuICAgIH0gZWxzZSBpZiAocHJvb2ZVcmwubWF0Y2godXJsUmVnZXgpKSB7XG4gICAgICBjb25zdCB0b2tlbnMgPSBwcm9vZlVybC5zcGxpdCgnZmFjZWJvb2suY29tLycpWzFdLnNwbGl0KCcvcG9zdHMvJylcbiAgICAgIGNvbnN0IHBvc3RJZCA9IHRva2Vuc1sxXVxuICAgICAgcHJvb2ZVcmwgPSBgaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLyR7cHJvb2YuaWRlbnRpZmllcn0vcG9zdHMvJHtwb3N0SWR9YFxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb29mIHVybCAke3Byb29mLnByb29mX3VybH0gaXMgbm90IHZhbGlkIGZvciBzZXJ2aWNlICR7cHJvb2Yuc2VydmljZX1gKVxuICAgIH1cblxuICAgIHJldHVybiBwcm9vZlVybFxuICB9XG5cbiAgc3RhdGljIGdldFByb29mU3RhdGVtZW50KHNlYXJjaFRleHQ6IHN0cmluZykge1xuICAgIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoc2VhcmNoVGV4dClcbiAgICBjb25zdCBzdGF0ZW1lbnQgPSAkKCdtZXRhW25hbWU9XCJkZXNjcmlwdGlvblwiXScpLmF0dHIoJ2NvbnRlbnQnKVxuICAgIHJldHVybiAoc3RhdGVtZW50ICE9PSB1bmRlZmluZWQpID8gc3RhdGVtZW50LnRyaW0oKSA6ICcnXG4gIH1cbn1cblxuZXhwb3J0IHsgRmFjZWJvb2sgfVxuIl19