"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.destroyModel = exports.fetchCentral = exports.saveCentral = exports.find = exports.sendNewGaiaUrl = void 0;

var _qs = require("qs");

var _config = require("./config");

const sendNewGaiaUrl = async gaiaURL => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const url = `${apiServer}/radiks/models/crawl`; // console.log(url, gaiaURL);

  const data = {
    gaiaURL
  };
  const response = await fetch(url, {
    method: 'POST',
    body: JSON.stringify(data),
    headers: new Headers({
      'Content-Type': 'application/json'
    })
  });
  const {
    success,
    message
  } = await response.json();

  if (!success) {
    throw new Error(`Error when saving model: '${message}'`);
  }

  return success;
};

exports.sendNewGaiaUrl = sendNewGaiaUrl;

const find = async query => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const queryString = (0, _qs.stringify)(query, {
    arrayFormat: 'brackets',
    encode: false
  });
  const url = `${apiServer}/radiks/models/find?${queryString}`;
  const response = await fetch(url);
  const data = await response.json();
  return data;
};

exports.find = find;

const saveCentral = async data => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const url = `${apiServer}/radiks/central`;
  const response = await fetch(url, {
    method: 'POST',
    body: JSON.stringify(data),
    headers: new Headers({
      'Content-Type': 'application/json'
    })
  });
  const {
    success
  } = await response.json();
  return success;
};

exports.saveCentral = saveCentral;

const fetchCentral = async (key, username, signature) => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const queryString = (0, _qs.stringify)({
    username,
    signature
  });
  const url = `${apiServer}/radiks/central/${key}?${queryString}`;
  const response = await fetch(url);
  const value = await response.json();
  return value;
};

exports.fetchCentral = fetchCentral;

const destroyModel = async model => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const queryString = (0, _qs.stringify)({
    signature: model.attrs.radiksSignature
  });
  const url = `${apiServer}/radiks/models/${model._id}?${queryString}`;
  const response = await fetch(url, {
    method: 'DELETE'
  });
  const data = await response.json();
  console.log(data);
  return data.success;
};

exports.destroyModel = destroyModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcGkudHMiXSwibmFtZXMiOlsic2VuZE5ld0dhaWFVcmwiLCJnYWlhVVJMIiwiYXBpU2VydmVyIiwidXJsIiwiZGF0YSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImhlYWRlcnMiLCJIZWFkZXJzIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJqc29uIiwiRXJyb3IiLCJmaW5kIiwicXVlcnkiLCJxdWVyeVN0cmluZyIsImFycmF5Rm9ybWF0IiwiZW5jb2RlIiwic2F2ZUNlbnRyYWwiLCJmZXRjaENlbnRyYWwiLCJrZXkiLCJ1c2VybmFtZSIsInNpZ25hdHVyZSIsInZhbHVlIiwiZGVzdHJveU1vZGVsIiwibW9kZWwiLCJhdHRycyIsInJhZGlrc1NpZ25hdHVyZSIsIl9pZCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHTyxNQUFNQSxjQUFjLEdBQUcsTUFBT0MsT0FBUCxJQUE2QztBQUN6RSxRQUFNO0FBQUVDLElBQUFBO0FBQUYsTUFBZ0Isd0JBQXRCO0FBQ0EsUUFBTUMsR0FBRyxHQUFJLEdBQUVELFNBQVUsc0JBQXpCLENBRnlFLENBR3pFOztBQUNBLFFBQU1FLElBQUksR0FBRztBQUFFSCxJQUFBQTtBQUFGLEdBQWI7QUFDQSxRQUFNSSxRQUFRLEdBQUcsTUFBTUMsS0FBSyxDQUFDSCxHQUFELEVBQU07QUFDaENJLElBQUFBLE1BQU0sRUFBRSxNQUR3QjtBQUVoQ0MsSUFBQUEsSUFBSSxFQUFFQyxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sSUFBZixDQUYwQjtBQUdoQ08sSUFBQUEsT0FBTyxFQUFFLElBQUlDLE9BQUosQ0FBWTtBQUNuQixzQkFBZ0I7QUFERyxLQUFaO0FBSHVCLEdBQU4sQ0FBNUI7QUFPQSxRQUFNO0FBQUVDLElBQUFBLE9BQUY7QUFBV0MsSUFBQUE7QUFBWCxNQUF1QixNQUFNVCxRQUFRLENBQUNVLElBQVQsRUFBbkM7O0FB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b25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgTW9kZWwgZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBzZW5kTmV3R2FpYVVybCA9IGFzeW5jIChnYWlhVVJMOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgY29uc3QgeyBhcGlTZXJ2ZXIgfSA9IGdldENvbmZpZygpO1xuICBjb25zdCB1cmwgPSBgJHthcGlTZXJ2ZXJ9L3JhZGlrcy9tb2RlbHMvY3Jhd2xgO1xuICAvLyBjb25zb2xlLmxvZyh1cmwsIGdhaWFVUkwpO1xuICBjb25zdCBkYXRhID0geyBnYWlhVVJMIH07XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9KSxcbiAgfSk7XG4gIGNvbnN0IHsgc3VjY2VzcywgbWVzc2FnZSB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHdoZW4gc2F2aW5nIG1vZGVsOiAnJHttZXNzYWdlfSdgKTtcbiAgfVxuICByZXR1cm4gc3VjY2Vzcztcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmluZFF1ZXJ5IHtcbiAgbGltaXQ/OiBudW1iZXIsXG4gIFt4OiBzdHJpbmddOiBhbnksXG59XG5cbmV4cG9ydCBjb25zdCBmaW5kID0gYXN5bmMgKHF1ZXJ5OiBGaW5kUXVlcnkpID0+IHtcbiAgY29uc3QgeyBhcGlTZXJ2ZXIgfSA9IGdldENvbmZpZygpO1xuICBjb25zdCBxdWVyeVN0cmluZyA9IHN0cmluZ2lmeShxdWVyeSwgeyBhcnJheUZvcm1hdDogJ2JyYWNrZXRzJywgZW5jb2RlOiBmYWxzZSB9KTtcbiAgY29uc3QgdXJsID0gYCR7YXBpU2VydmVyfS9yYWRpa3MvbW9kZWxzL2ZpbmQ/JHtxdWVyeVN0cmluZ31gO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiBkYXRhO1xufTtcblxuaW50ZXJmYWNlIENlbnRyYWxTYXZlRGF0YSB7XG4gIHNpZ25hdHVyZTogc3RyaW5nLFxuICB1c2VybmFtZTogc3RyaW5nLFxuICBrZXk6IHN0cmluZyxcbiAgdmFsdWU6IGFueSxcbn1cblxuZXhwb3J0IGNvbnN0IHNhdmVDZW50cmFsID0gYXN5bmMgKGRhdGE6IENlbnRyYWxTYXZlRGF0YSkgPT4ge1xuICBjb25zdCB7IGFwaVNlcnZlciB9ID0gZ2V0Q29uZmlnKCk7XG4gIGNvbnN0IHVybCA9IGAke2FwaVNlcnZlcn0vcmFkaWtzL2NlbnRyYWxgO1xuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9KSxcbiAgfSk7XG4gIGNvbnN0IHsgc3VjY2VzcyB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICByZXR1cm4gc3VjY2Vzcztcbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaENlbnRyYWwgPSBhc3luYyAoa2V5OiBzdHJpbmcsIHVzZXJuYW1lOiBzdHJpbmcsIHNpZ25hdHVyZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgYXBpU2VydmVyIH0gPSBnZXRDb25maWcoKTtcbiAgY29uc3QgcXVlcnlTdHJpbmcgPSBzdHJpbmdpZnkoeyB1c2VybmFtZSwgc2lnbmF0dXJlIH0pO1xuICBjb25zdCB1cmwgPSBgJHthcGlTZXJ2ZXJ9L3JhZGlrcy9jZW50cmFsLyR7a2V5fT8ke3F1ZXJ5U3RyaW5nfWA7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgY29uc3QgdmFsdWUgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZXN0cm95TW9kZWwgPSBhc3luYyAobW9kZWw6IE1vZGVsKSA9PiB7XG4gIGNvbnN0IHsgYXBpU2VydmVyIH0gPSBnZXRDb25maWcoKTtcbiAgY29uc3QgcXVlcnlTdHJpbmcgPSBzdHJpbmdpZnkoeyBzaWduYXR1cmU6IG1vZGVsLmF0dHJzLnJhZGlrc1NpZ25hdHVyZSB9KTtcbiAgY29uc3QgdXJsID0gYCR7YXBpU2VydmVyfS9yYWRpa3MvbW9kZWxzLyR7bW9kZWwuX2lkfT8ke3F1ZXJ5U3RyaW5nfWA7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgfSk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIGNvbnNvbGUubG9nKGRhdGEpO1xuICByZXR1cm4gZGF0YS5zdWNjZXNzO1xufTtcbiJdfQ==