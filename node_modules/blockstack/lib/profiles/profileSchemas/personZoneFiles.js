"use strict";

exports.__esModule = true;
exports.resolveZoneFileToPerson = resolveZoneFileToPerson;

var _zoneFile = require("zone-file");

var _person = require("./person");

var _profileZoneFiles = require("../profileZoneFiles");

var _profileTokens = require("../profileTokens");

function resolveZoneFileToPerson(zoneFile, publicKeyOrAddress, callback) {
  let zoneFileJson = null;

  try {
    zoneFileJson = (0, _zoneFile.parseZoneFile)(zoneFile);

    if (!zoneFileJson.hasOwnProperty('$origin')) {
      zoneFileJson = null;
      throw new Error('zone file is missing an origin');
    }
  } catch (e) {
    console.error(e);
  }

  let tokenFileUrl = null;

  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {
    tokenFileUrl = (0, _profileZoneFiles.getTokenFileUrl)(zoneFileJson);
  } else {
    let profile = null;

    try {
      profile = JSON.parse(zoneFile);

      const person = _person.Person.fromLegacyFormat(profile);

      profile = person.profile();
    } catch (error) {
      console.warn(error);
    }

    callback(profile);
    return;
  }

  if (tokenFileUrl) {
    fetch(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {
      const tokenRecords = responseJson;
      const token = tokenRecords[0].token;
      const profile = (0, _profileTokens.extractProfile)(token, publicKeyOrAddress);
      callback(profile);
    }).catch(error => {
      console.warn(error);
    });
  } else {
    console.warn('Token file url not found');
    callback({});
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9maWxlcy9wcm9maWxlU2NoZW1hcy9wZXJzb25ab25lRmlsZXMuanMiXSwibmFtZXMiOlsicmVzb2x2ZVpvbmVGaWxlVG9QZXJzb24iLCJ6b25lRmlsZSIsInB1YmxpY0tleU9yQWRkcmVzcyIsImNhbGxiYWNrIiwiem9uZUZpbGVKc29uIiwiaGFzT3duUHJvcGVydHkiLCJFcnJvciIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJ0b2tlbkZpbGVVcmwiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwicHJvZmlsZSIsIkpTT04iLCJwYXJzZSIsInBlcnNvbiIsIlBlcnNvbiIsImZyb21MZWdhY3lGb3JtYXQiLCJ3YXJuIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJ0ZXh0IiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2VKc29uIiwidG9rZW5SZWNvcmRzIiwidG9rZW4iLCJjYXRjaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFTyxTQUFTQSx1QkFBVCxDQUFpQ0MsUUFBakMsRUFBMkNDLGtCQUEzQyxFQUErREMsUUFBL0QsRUFBeUU7QUFDOUUsTUFBSUMsWUFBWSxHQUFHLElBQW5COztBQUNBLE1BQUk7QUFDRkEsSUFBQUEsWUFBWSxHQUFHLDZCQUFjSCxRQUFkLENBQWY7O0FBQ0EsUUFBSSxDQUFDRyxZQUFZLENBQUNDLGNBQWIsQ0FBNEIsU0FBNUIsQ0FBTCxFQUE2QztBQUMzQ0QsTUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDQSxZQUFNLElBQUlFLEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0Q7QUFDRixHQU5ELENBTUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1ZDLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjRixDQUFkO0FBQ0Q7O0FBRUQsTUFBSUcsWUFBWSxHQUFHLElBQW5COztBQUNBLE1BQUlOLFlBQVksSUFBSU8sTUFBTSxDQUFDQyxJQUFQLENBQVlSLFlBQVosRUFBMEJTLE1BQTFCLEdBQW1DLENBQXZELEVBQTBEO0FBQ3hESCxJQUFBQSxZQUFZLEdBQUcsdUNBQWdCTixZQUFoQixDQUFmO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsUUFBSVUsT0FBTyxHQUFHLElBQWQ7O0FBQ0EsUUFBSTtBQUNGQSxNQUFBQSxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXZixRQUFYLENBQVY7O0FBQ0EsWUFBTWdCLE1BQU0sR0FBR0MsZUFBT0MsZ0JBQVAsQ0FBd0JMLE9BQXhCLENBQWY7O0FBQ0FBLE1BQUFBLE9BQU8sR0FBR0csTUFBTSxDQUFDSCxPQUFQLEVBQVY7QUFDRCxLQUpELENBSUUsT0FBT0wsS0FBUCxFQUFjO0FBQ2RELE1BQUFBLE9BQU8sQ0FBQ1ksSUFBUixDQUFhWCxLQUFiO0FBQ0Q7O0FBQ0ROLElBQUFBLFFBQVEsQ0FBQ1csT0FBRCxDQUFSO0FBQ0E7QUFDRDs7QUFFRCxNQUFJSixZQUFKLEVBQWtCO0FBQ2hCVyxJQUFBQSxLQUFLLENBQUNYLFlBQUQsQ0FBTCxDQUNHWSxJQURILENBQ1FDLFFBQVEsSUFBSUEsUUFBUSxDQUFDQyxJQUFULEVBRHBCLEVBRUdGLElBRkgsQ0FFUUcsWUFBWSxJQUFJVixJQUFJLENBQUNDLEtBQUwsQ0FBV1MsWUFBWCxDQUZ4QixFQUdHSCxJQUhILENBR1NJLFlBQUQsSUFBa0I7QUFDdEIsWUFBTUMsWUFBWSxHQUFHRCxZQUFyQjtBQUNBLFlBQU1FLEtBQUssR0FBR0QsWUFBWSxDQUFDLENBQUQsQ0FBWixDQUFnQkMsS0FBOUI7QUFDQSxZQUFNZCxPQUFPLEdBQUcsbUNBQWVjLEtBQWYsRUFBc0IxQixrQkFBdEIsQ0FBaEI7QUFFQUMsTUFBQUEsUUFBUSxDQUFDVyxPQUFELENBQVI7QUFDRCxLQVRILEVBVUdlLEtBVkgsQ0FVVXBCLEtBQUQsSUFBVztBQUNoQkQsTUFBQUEsT0FBTyxDQUFDWSxJQUFSLENBQWFYLEtBQWI7QUFDRCxLQVpIO0FBYUQsR0FkRCxNQWNPO0FBQ0xELElBQUFBLE9BQU8sQ0FBQ1ksSUFBUixDQUFhLDBCQUFiO0FBQ0FqQixJQUFBQSxRQUFRLENBQUMsRUFBRCxDQUFSO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlWm9uZUZpbGUgfSBmcm9tICd6b25lLWZpbGUnXG5cbmltcG9ydCB7IFBlcnNvbiB9IGZyb20gJy4vcGVyc29uJ1xuaW1wb3J0IHsgZ2V0VG9rZW5GaWxlVXJsIH0gZnJvbSAnLi4vcHJvZmlsZVpvbmVGaWxlcydcbmltcG9ydCB7IGV4dHJhY3RQcm9maWxlIH0gZnJvbSAnLi4vcHJvZmlsZVRva2VucydcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVab25lRmlsZVRvUGVyc29uKHpvbmVGaWxlLCBwdWJsaWNLZXlPckFkZHJlc3MsIGNhbGxiYWNrKSB7XG4gIGxldCB6b25lRmlsZUpzb24gPSBudWxsXG4gIHRyeSB7XG4gICAgem9uZUZpbGVKc29uID0gcGFyc2Vab25lRmlsZSh6b25lRmlsZSlcbiAgICBpZiAoIXpvbmVGaWxlSnNvbi5oYXNPd25Qcm9wZXJ0eSgnJG9yaWdpbicpKSB7XG4gICAgICB6b25lRmlsZUpzb24gPSBudWxsXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3pvbmUgZmlsZSBpcyBtaXNzaW5nIGFuIG9yaWdpbicpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKVxuICB9XG5cbiAgbGV0IHRva2VuRmlsZVVybCA9IG51bGxcbiAgaWYgKHpvbmVGaWxlSnNvbiAmJiBPYmplY3Qua2V5cyh6b25lRmlsZUpzb24pLmxlbmd0aCA+IDApIHtcbiAgICB0b2tlbkZpbGVVcmwgPSBnZXRUb2tlbkZpbGVVcmwoem9uZUZpbGVKc29uKVxuICB9IGVsc2Uge1xuICAgIGxldCBwcm9maWxlID0gbnVsbFxuICAgIHRyeSB7XG4gICAgICBwcm9maWxlID0gSlNPTi5wYXJzZSh6b25lRmlsZSlcbiAgICAgIGNvbnN0IHBlcnNvbiA9IFBlcnNvbi5mcm9tTGVnYWN5Rm9ybWF0KHByb2ZpbGUpXG4gICAgICBwcm9maWxlID0gcGVyc29uLnByb2ZpbGUoKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oZXJyb3IpXG4gICAgfVxuICAgIGNhbGxiYWNrKHByb2ZpbGUpXG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAodG9rZW5GaWxlVXJsKSB7XG4gICAgZmV0Y2godG9rZW5GaWxlVXJsKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKVxuICAgICAgLnRoZW4ocmVzcG9uc2VUZXh0ID0+IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSlcbiAgICAgIC50aGVuKChyZXNwb25zZUpzb24pID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW5SZWNvcmRzID0gcmVzcG9uc2VKc29uXG4gICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5SZWNvcmRzWzBdLnRva2VuXG4gICAgICAgIGNvbnN0IHByb2ZpbGUgPSBleHRyYWN0UHJvZmlsZSh0b2tlbiwgcHVibGljS2V5T3JBZGRyZXNzKVxuXG4gICAgICAgIGNhbGxiYWNrKHByb2ZpbGUpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IpXG4gICAgICB9KVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUud2FybignVG9rZW4gZmlsZSB1cmwgbm90IGZvdW5kJylcbiAgICBjYWxsYmFjayh7fSlcbiAgfVxufVxuIl19