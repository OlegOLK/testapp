"use strict";

exports.__esModule = true;
exports.containsValidProofStatement = containsValidProofStatement;
exports.containsValidAddressProofStatement = containsValidAddressProofStatement;

function containsValidProofStatement(searchText, name = null) {
  if (!name) {
    return false;
  }

  searchText = searchText.toLowerCase();

  if (name.split('.').length < 2) {
    throw new Error('Please provide the fully qualified Blockstack name.');
  }

  let username = null; // support legacy Blockstack ID proofs

  if (name.endsWith('.id')) {
    username = name.split('.id')[0];
  }

  const verificationStyles = username != null ? [`verifying myself: my bitcoin username is +${username}`, `verifying myself: my bitcoin username is ${username}`, `verifying myself: my openname is ${username}`, `verifying that +${username} is my bitcoin username`, `verifying that ${username} is my bitcoin username`, `verifying that ${username} is my openname`, `verifying that +${username} is my openname`, `verifying i am +${username} on my passcard`, `verifying that +${username} is my blockchain id`, `verifying that "${name}" is my blockstack id`, // id
  `verifying that ${name} is my blockstack id`, `verifying that &quot;${name}&quot; is my blockstack id`] : [// only these formats are valid for non-.id tlds
  `verifying that "${name}" is my blockstack id`, // id
  `verifying that ${name} is my blockstack id`, `verifying that &quot;${name}&quot; is my blockstack id`];

  for (let i = 0; i < verificationStyles.length; i++) {
    const verificationStyle = verificationStyles[i];

    if (searchText.includes(verificationStyle)) {
      return true;
    }
  }

  if (username != null && searchText.includes('verifymyonename') && searchText.includes(`+${username}`)) {
    return true;
  }

  return false;
}

function containsValidAddressProofStatement(proofStatement, address) {
  proofStatement = proofStatement.split(address)[0].toLowerCase() + address;
  const verificationStyles = [`verifying my blockstack id is secured with the address ${address}`];

  for (let i = 0; i < verificationStyles.length; i++) {
    const verificationStyle = verificationStyles[i];

    if (proofStatement.includes(verificationStyle)) {
      return true;
    }
  }

  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm9maWxlcy9zZXJ2aWNlcy9zZXJ2aWNlVXRpbHMuanMiXSwibmFtZXMiOlsiY29udGFpbnNWYWxpZFByb29mU3RhdGVtZW50Iiwic2VhcmNoVGV4dCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwibGVuZ3RoIiwiRXJyb3IiLCJ1c2VybmFtZSIsImVuZHNXaXRoIiwidmVyaWZpY2F0aW9uU3R5bGVzIiwiaSIsInZlcmlmaWNhdGlvblN0eWxlIiwiaW5jbHVkZXMiLCJjb250YWluc1ZhbGlkQWRkcmVzc1Byb29mU3RhdGVtZW50IiwicHJvb2ZTdGF0ZW1lbnQiLCJhZGRyZXNzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDTyxTQUFTQSwyQkFBVCxDQUFxQ0MsVUFBckMsRUFBeURDLElBQWEsR0FBRyxJQUF6RSxFQUErRTtBQUNwRixNQUFJLENBQUNBLElBQUwsRUFBVztBQUNULFdBQU8sS0FBUDtBQUNEOztBQUVERCxFQUFBQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0UsV0FBWCxFQUFiOztBQUVBLE1BQUlELElBQUksQ0FBQ0UsS0FBTCxDQUFXLEdBQVgsRUFBZ0JDLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQzlCLFVBQU0sSUFBSUMsS0FBSixDQUFVLHFEQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJQyxRQUFRLEdBQUcsSUFBZixDQVhvRixDQWFwRjs7QUFDQSxNQUFJTCxJQUFJLENBQUNNLFFBQUwsQ0FBYyxLQUFkLENBQUosRUFBMEI7QUFDeEJELElBQUFBLFFBQVEsR0FBR0wsSUFBSSxDQUFDRSxLQUFMLENBQVcsS0FBWCxFQUFrQixDQUFsQixDQUFYO0FBQ0Q7O0FBRUQsUUFBTUssa0JBQWtCLEdBQUdGLFFBQVEsSUFBSSxJQUFaLEdBQW1CLENBQzNDLDZDQUE0Q0EsUUFBUyxFQURWLEVBRTNDLDRDQUEyQ0EsUUFBUyxFQUZULEVBRzNDLG9DQUFtQ0EsUUFBUyxFQUhELEVBSTNDLG1CQUFrQkEsUUFBUyx5QkFKZ0IsRUFLM0Msa0JBQWlCQSxRQUFTLHlCQUxpQixFQU0zQyxrQkFBaUJBLFFBQVMsaUJBTmlCLEVBTzNDLG1CQUFrQkEsUUFBUyxpQkFQZ0IsRUFRM0MsbUJBQWtCQSxRQUFTLGlCQVJnQixFQVMzQyxtQkFBa0JBLFFBQVMsc0JBVGdCLEVBVTNDLG1CQUFrQkwsSUFBSyx1QkFWb0IsRUFVSTtBQUMvQyxvQkFBaUJBLElBQUssc0JBWHFCLEVBWTNDLHdCQUF1QkEsSUFBSyw0QkFaZSxDQUFuQixHQWF2QixDQUFFO0FBQ0gscUJBQWtCQSxJQUFLLHVCQUR0QixFQUM4QztBQUMvQyxvQkFBaUJBLElBQUssc0JBRnJCLEVBR0Qsd0JBQXVCQSxJQUFLLDRCQUgzQixDQWJKOztBQW1CQSxPQUFLLElBQUlRLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELGtCQUFrQixDQUFDSixNQUF2QyxFQUErQ0ssQ0FBQyxFQUFoRCxFQUFvRDtBQUNsRCxVQUFNQyxpQkFBaUIsR0FBR0Ysa0JBQWtCLENBQUNDLENBQUQsQ0FBNUM7O0FBQ0EsUUFBSVQsVUFBVSxDQUFDVyxRQUFYLENBQW9CRCxpQkFBcEIsQ0FBSixFQUE0QztBQUMxQyxhQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELE1BQUlKLFFBQVEsSUFBSSxJQUFaLElBQ0dOLFVBQVUsQ0FBQ1csUUFBWCxDQUFvQixpQkFBcEIsQ0FESCxJQUVHWCxVQUFVLENBQUNXLFFBQVgsQ0FBcUIsSUFBR0wsUUFBUyxFQUFqQyxDQUZQLEVBRTRDO0FBQzFDLFdBQU8sSUFBUDtBQUNEOztBQUVELFNBQU8sS0FBUDtBQUNEOztBQUVNLFNBQVNNLGtDQUFULENBQTRDQyxjQUE1QyxFQUFvRUMsT0FBcEUsRUFBcUY7QUFDMUZELEVBQUFBLGNBQWMsR0FBR0EsY0FBYyxDQUFDVixLQUFmLENBQXFCVyxPQUFyQixFQUE4QixDQUE5QixFQUFpQ1osV0FBakMsS0FBaURZLE9BQWxFO0FBRUEsUUFBTU4sa0JBQWtCLEdBQUcsQ0FDeEIsMERBQXlETSxPQUFRLEVBRHpDLENBQTNCOztBQUlBLE9BQUssSUFBSUwsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0Qsa0JBQWtCLENBQUNKLE1BQXZDLEVBQStDSyxDQUFDLEVBQWhELEVBQW9EO0FBQ2xELFVBQU1DLGlCQUFpQixHQUFHRixrQkFBa0IsQ0FBQ0MsQ0FBRCxDQUE1Qzs7QUFDQSxRQUFJSSxjQUFjLENBQUNGLFFBQWYsQ0FBd0JELGlCQUF4QixDQUFKLEVBQWdEO0FBQzlDLGFBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVmFsaWRQcm9vZlN0YXRlbWVudChzZWFyY2hUZXh0OiBzdHJpbmcsIG5hbWU6ID9zdHJpbmcgPSBudWxsKSB7XG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc2VhcmNoVGV4dCA9IHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKVxuXG4gIGlmIChuYW1lLnNwbGl0KCcuJykubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgdGhlIGZ1bGx5IHF1YWxpZmllZCBCbG9ja3N0YWNrIG5hbWUuJylcbiAgfVxuXG4gIGxldCB1c2VybmFtZSA9IG51bGxcblxuICAvLyBzdXBwb3J0IGxlZ2FjeSBCbG9ja3N0YWNrIElEIHByb29mc1xuICBpZiAobmFtZS5lbmRzV2l0aCgnLmlkJykpIHtcbiAgICB1c2VybmFtZSA9IG5hbWUuc3BsaXQoJy5pZCcpWzBdXG4gIH1cblxuICBjb25zdCB2ZXJpZmljYXRpb25TdHlsZXMgPSB1c2VybmFtZSAhPSBudWxsID8gW1xuICAgIGB2ZXJpZnlpbmcgbXlzZWxmOiBteSBiaXRjb2luIHVzZXJuYW1lIGlzICske3VzZXJuYW1lfWAsXG4gICAgYHZlcmlmeWluZyBteXNlbGY6IG15IGJpdGNvaW4gdXNlcm5hbWUgaXMgJHt1c2VybmFtZX1gLFxuICAgIGB2ZXJpZnlpbmcgbXlzZWxmOiBteSBvcGVubmFtZSBpcyAke3VzZXJuYW1lfWAsXG4gICAgYHZlcmlmeWluZyB0aGF0ICske3VzZXJuYW1lfSBpcyBteSBiaXRjb2luIHVzZXJuYW1lYCxcbiAgICBgdmVyaWZ5aW5nIHRoYXQgJHt1c2VybmFtZX0gaXMgbXkgYml0Y29pbiB1c2VybmFtZWAsXG4gICAgYHZlcmlmeWluZyB0aGF0ICR7dXNlcm5hbWV9IGlzIG15IG9wZW5uYW1lYCxcbiAgICBgdmVyaWZ5aW5nIHRoYXQgKyR7dXNlcm5hbWV9IGlzIG15IG9wZW5uYW1lYCxcbiAgICBgdmVyaWZ5aW5nIGkgYW0gKyR7dXNlcm5hbWV9IG9uIG15IHBhc3NjYXJkYCxcbiAgICBgdmVyaWZ5aW5nIHRoYXQgKyR7dXNlcm5hbWV9IGlzIG15IGJsb2NrY2hhaW4gaWRgLFxuICAgIGB2ZXJpZnlpbmcgdGhhdCBcIiR7bmFtZX1cIiBpcyBteSBibG9ja3N0YWNrIGlkYCwgLy8gaWRcbiAgICBgdmVyaWZ5aW5nIHRoYXQgJHtuYW1lfSBpcyBteSBibG9ja3N0YWNrIGlkYCxcbiAgICBgdmVyaWZ5aW5nIHRoYXQgJnF1b3Q7JHtuYW1lfSZxdW90OyBpcyBteSBibG9ja3N0YWNrIGlkYFxuICBdIDogWyAvLyBvbmx5IHRoZXNlIGZvcm1hdHMgYXJlIHZhbGlkIGZvciBub24tLmlkIHRsZHNcbiAgICBgdmVyaWZ5aW5nIHRoYXQgXCIke25hbWV9XCIgaXMgbXkgYmxvY2tzdGFjayBpZGAsIC8vIGlkXG4gICAgYHZlcmlmeWluZyB0aGF0ICR7bmFtZX0gaXMgbXkgYmxvY2tzdGFjayBpZGAsXG4gICAgYHZlcmlmeWluZyB0aGF0ICZxdW90OyR7bmFtZX0mcXVvdDsgaXMgbXkgYmxvY2tzdGFjayBpZGBcbiAgXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmVyaWZpY2F0aW9uU3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmVyaWZpY2F0aW9uU3R5bGUgPSB2ZXJpZmljYXRpb25TdHlsZXNbaV1cbiAgICBpZiAoc2VhcmNoVGV4dC5pbmNsdWRlcyh2ZXJpZmljYXRpb25TdHlsZSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgaWYgKHVzZXJuYW1lICE9IG51bGxcbiAgICAgICYmIHNlYXJjaFRleHQuaW5jbHVkZXMoJ3ZlcmlmeW15b25lbmFtZScpXG4gICAgICAmJiBzZWFyY2hUZXh0LmluY2x1ZGVzKGArJHt1c2VybmFtZX1gKSkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVmFsaWRBZGRyZXNzUHJvb2ZTdGF0ZW1lbnQocHJvb2ZTdGF0ZW1lbnQ6IHN0cmluZywgYWRkcmVzczogc3RyaW5nKSB7XG4gIHByb29mU3RhdGVtZW50ID0gcHJvb2ZTdGF0ZW1lbnQuc3BsaXQoYWRkcmVzcylbMF0udG9Mb3dlckNhc2UoKSArIGFkZHJlc3NcblxuICBjb25zdCB2ZXJpZmljYXRpb25TdHlsZXMgPSBbXG4gICAgYHZlcmlmeWluZyBteSBibG9ja3N0YWNrIGlkIGlzIHNlY3VyZWQgd2l0aCB0aGUgYWRkcmVzcyAke2FkZHJlc3N9YFxuICBdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJpZmljYXRpb25TdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB2ZXJpZmljYXRpb25TdHlsZSA9IHZlcmlmaWNhdGlvblN0eWxlc1tpXVxuICAgIGlmIChwcm9vZlN0YXRlbWVudC5pbmNsdWRlcyh2ZXJpZmljYXRpb25TdHlsZSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG4iXX0=