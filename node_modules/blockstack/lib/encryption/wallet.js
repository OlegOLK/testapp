"use strict";

exports.__esModule = true;
exports.encryptMnemonic = encryptMnemonic;
exports.decryptMnemonic = decryptMnemonic;

var _crypto = _interopRequireDefault(require("crypto"));

var _bip = _interopRequireDefault(require("bip39"));

var _triplesec = _interopRequireDefault(require("triplesec"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Encrypt a raw mnemonic phrase to be password protected
 * @param {string} phrase - Raw mnemonic phrase
 * @param {string} password - Password to encrypt mnemonic with
 * @return {Promise<Buffer>} The encrypted phrase
 * @private
 */
function encryptMnemonic(phrase, password) {
  return Promise.resolve().then(() => {
    // must be bip39 mnemonic
    if (!_bip.default.validateMnemonic(phrase)) {
      throw new Error('Not a valid bip39 nmemonic');
    } // normalize plaintext to fixed length byte string


    const plaintextNormalized = Buffer.from(_bip.default.mnemonicToEntropy(phrase).toString('hex'), 'hex'); // AES-128-CBC with SHA256 HMAC

    const salt = _crypto.default.randomBytes(16);

    const keysAndIV = _crypto.default.pbkdf2Sync(password, salt, 100000, 48, 'sha512');

    const encKey = keysAndIV.slice(0, 16);
    const macKey = keysAndIV.slice(16, 32);
    const iv = keysAndIV.slice(32, 48);

    const cipher = _crypto.default.createCipheriv('aes-128-cbc', encKey, iv);

    let cipherText = cipher.update(plaintextNormalized).toString('hex');
    cipherText += cipher.final().toString('hex');
    const hmacPayload = Buffer.concat([salt, Buffer.from(cipherText, 'hex')]);

    const hmac = _crypto.default.createHmac('sha256', macKey);

    hmac.write(hmacPayload);
    const hmacDigest = hmac.digest();
    const payload = Buffer.concat([salt, hmacDigest, Buffer.from(cipherText, 'hex')]);
    return payload;
  });
} // Used to distinguish bad password during decrypt vs invalid format


class PasswordError extends Error {}

function decryptMnemonicBuffer(dataBuffer, password) {
  return Promise.resolve().then(() => {
    const salt = dataBuffer.slice(0, 16);
    const hmacSig = dataBuffer.slice(16, 48); // 32 bytes

    const cipherText = dataBuffer.slice(48);
    const hmacPayload = Buffer.concat([salt, cipherText]);

    const keysAndIV = _crypto.default.pbkdf2Sync(password, salt, 100000, 48, 'sha512');

    const encKey = keysAndIV.slice(0, 16);
    const macKey = keysAndIV.slice(16, 32);
    const iv = keysAndIV.slice(32, 48);

    const decipher = _crypto.default.createDecipheriv('aes-128-cbc', encKey, iv);

    let plaintext = decipher.update(cipherText).toString('hex');
    plaintext += decipher.final().toString('hex');

    const hmac = _crypto.default.createHmac('sha256', macKey);

    hmac.write(hmacPayload);
    const hmacDigest = hmac.digest(); // hash both hmacSig and hmacDigest so string comparison time
    // is uncorrelated to the ciphertext

    const hmacSigHash = _crypto.default.createHash('sha256').update(hmacSig).digest().toString('hex');

    const hmacDigestHash = _crypto.default.createHash('sha256').update(hmacDigest).digest().toString('hex');

    if (hmacSigHash !== hmacDigestHash) {
      // not authentic
      throw new PasswordError('Wrong password (HMAC mismatch)');
    }

    const mnemonic = _bip.default.entropyToMnemonic(plaintext);

    if (!_bip.default.validateMnemonic(mnemonic)) {
      throw new PasswordError('Wrong password (invalid plaintext)');
    }

    return mnemonic;
  });
}
/**
 * Decrypt legacy triplesec keys
 * @param {Buffer} dataBuffer - The encrypted key
 * @param {String} password - Password for data
 * @return {Promise<Buffer>} Decrypted seed
 * @private
 */


function decryptLegacy(dataBuffer, password) {
  return new Promise((resolve, reject) => {
    _triplesec.default.decrypt({
      key: Buffer.from(password),
      data: dataBuffer
    }, (err, plaintextBuffer) => {
      if (!err) {
        resolve(plaintextBuffer);
      } else {
        reject(err);
      }
    });
  });
}
/**
 * Encrypt a raw mnemonic phrase with a password
 * @param {string | Buffer} data - Buffer or hex-encoded string of the encrypted mnemonic
 * @param {string} password - Password for data
 * @return {Promise<Buffer>} the raw mnemonic phrase
 * @private
 */


function decryptMnemonic(data, password) {
  const dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex');
  return decryptMnemonicBuffer(dataBuffer, password).catch(err => {
    // If it was a password error, don't even bother with legacy
    if (err instanceof PasswordError) {
      throw err;
    }

    return decryptLegacy(dataBuffer, password);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,