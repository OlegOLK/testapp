{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nexports.__esModule = true;\nexports.safety = void 0;\n\nvar _config = require(\"../config\");\n\nfunction isNameValid() {\n  var fullyQualifiedName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var NAME_PART_RULE = /^[a-z0-9\\-_+]+$/;\n  var LENGTH_MAX_NAME = 37;\n\n  if (!fullyQualifiedName || fullyQualifiedName.length > LENGTH_MAX_NAME) {\n    return Promise.resolve(false);\n  }\n\n  var nameParts = fullyQualifiedName.split('.');\n\n  if (nameParts.length !== 2) {\n    return Promise.resolve(false);\n  }\n\n  return Promise.resolve(nameParts.reduce(function (agg, namePart) {\n    if (!agg) {\n      return false;\n    } else {\n      return NAME_PART_RULE.test(namePart);\n    }\n  }, true));\n}\n\nfunction isNamespaceValid(namespaceID) {\n  var NAMESPACE_RULE = /^[a-z0-9\\-_]{1,19}$/;\n  return Promise.resolve(namespaceID.match(NAMESPACE_RULE) !== null);\n}\n\nfunction isNameAvailable(fullyQualifiedName) {\n  return _config.config.network.getNameInfo(fullyQualifiedName).then(function () {\n    return false;\n  }).catch(function (e) {\n    if (e.message === 'Name not found') {\n      return true;\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction isNamespaceAvailable(namespaceID) {\n  return _config.config.network.getNamespaceInfo(namespaceID).then(function () {\n    return false;\n  }).catch(function (e) {\n    if (e.message === 'Namespace not found') {\n      return true;\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction ownsName(fullyQualifiedName, ownerAddress) {\n  return _config.config.network.getNameInfo(fullyQualifiedName).then(function (nameInfo) {\n    return nameInfo.address === ownerAddress;\n  }).catch(function (e) {\n    if (e.message === 'Name not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction revealedNamespace(namespaceID, revealAddress) {\n  return _config.config.network.getNamespaceInfo(namespaceID).then(function (namespaceInfo) {\n    return namespaceInfo.recipient_address === revealAddress;\n  }).catch(function (e) {\n    if (e.message === 'Namespace not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction namespaceIsReady(namespaceID) {\n  return _config.config.network.getNamespaceInfo(namespaceID).then(function (namespaceInfo) {\n    return namespaceInfo.ready;\n  }).catch(function (e) {\n    if (e.message === 'Namespace not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction namespaceIsRevealed(namespaceID) {\n  return _config.config.network.getNamespaceInfo(namespaceID).then(function (namespaceInfo) {\n    return !namespaceInfo.ready;\n  }).catch(function (e) {\n    if (e.message === 'Namespace not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction isInGracePeriod(fullyQualifiedName) {\n  var network = _config.config.network;\n  return Promise.all([network.getNameInfo(fullyQualifiedName), network.getBlockHeight(), network.getGracePeriod(fullyQualifiedName)]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        nameInfo = _ref2[0],\n        blockHeight = _ref2[1],\n        gracePeriod = _ref2[2];\n\n    var expiresAt = nameInfo.expire_block;\n    return blockHeight >= expiresAt && blockHeight < gracePeriod + expiresAt;\n  }).catch(function (e) {\n    if (e.message === 'Name not found') {\n      return false;\n    } else {\n      throw e;\n    }\n  });\n}\n\nfunction addressCanReceiveName(address) {\n  return _config.config.network.getNamesOwned(address).then(function (names) {\n    return Promise.all(names.map(function (name) {\n      return isNameValid(name);\n    })).then(function (validNames) {\n      return validNames.filter(function (nameValid) {\n        return nameValid;\n      }).length < 25;\n    });\n  });\n}\n\nfunction isAccountSpendable(address, tokenType, blockHeight) {\n  return _config.config.network.getAccountStatus(address, tokenType).then(function (accountStatus) {\n    return accountStatus.transfer_send_block_id >= blockHeight;\n  });\n}\n\nvar safety = {\n  addressCanReceiveName: addressCanReceiveName,\n  isInGracePeriod: isInGracePeriod,\n  ownsName: ownsName,\n  isNameAvailable: isNameAvailable,\n  isNameValid: isNameValid,\n  isNamespaceValid: isNamespaceValid,\n  isNamespaceAvailable: isNamespaceAvailable,\n  revealedNamespace: revealedNamespace,\n  namespaceIsReady: namespaceIsReady,\n  namespaceIsRevealed: namespaceIsRevealed,\n  isAccountSpendable: isAccountSpendable\n};\nexports.safety = safety;","map":null,"metadata":{},"sourceType":"script"}