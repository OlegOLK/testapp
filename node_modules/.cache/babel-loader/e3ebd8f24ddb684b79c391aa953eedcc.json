{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"uuid/v4\"));\n\nvar _keys = require(\"blockstack/lib/keys\");\n\nvar _encryption = require(\"blockstack/lib/encryption\");\n\nvar _wolfy87Eventemitter = _interopRequireDefault(require(\"wolfy87-eventemitter\"));\n\nvar _helpers = require(\"./helpers\");\n\nvar _api = require(\"./api\");\n\nvar _streamer = _interopRequireDefault(require(\"./streamer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar EVENT_NAME = 'MODEL_STREAM_EVENT';\n\nvar Model =\n/*#__PURE__*/\nfunction () {\n  _createClass(Model, null, [{\n    key: \"fromSchema\",\n    value: function fromSchema(schema) {\n      this.schema = schema;\n      return this;\n    }\n  }, {\n    key: \"fetchList\",\n    value: function () {\n      var _fetchList = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _selector,\n            _ref,\n            _ref$decrypt,\n            decrypt,\n            selector,\n            _ref2,\n            results,\n            Clazz,\n            modelDecryptions,\n            models,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _selector = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, _ref$decrypt = _ref.decrypt, decrypt = _ref$decrypt === void 0 ? true : _ref$decrypt;\n                selector = _objectSpread({}, _selector, {\n                  radiksType: this.modelName()\n                });\n                _context.next = 5;\n                return (0, _api.find)(selector);\n\n              case 5:\n                _ref2 = _context.sent;\n                results = _ref2.results;\n                Clazz = this;\n                modelDecryptions = results.map(function (doc) {\n                  var model = new Clazz(doc);\n\n                  if (decrypt) {\n                    return model.decrypt();\n                  }\n\n                  return Promise.resolve(model);\n                });\n                _context.next = 11;\n                return Promise.all(modelDecryptions);\n\n              case 11:\n                models = _context.sent;\n                return _context.abrupt(\"return\", models);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchList() {\n        return _fetchList.apply(this, arguments);\n      }\n\n      return fetchList;\n    }()\n  }, {\n    key: \"findOne\",\n    value: function () {\n      var _findOne = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _selector,\n            options,\n            selector,\n            results,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _selector = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {\n                  decrypt: true\n                };\n                selector = _objectSpread({}, _selector, {\n                  limit: 1\n                });\n                _context2.next = 5;\n                return this.fetchList(selector, options);\n\n              case 5:\n                results = _context2.sent;\n                return _context2.abrupt(\"return\", results[0]);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function findOne() {\n        return _findOne.apply(this, arguments);\n      }\n\n      return findOne;\n    }()\n  }, {\n    key: \"findById\",\n    value: function () {\n      var _findById = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_id, fetchOptions) {\n        var Clazz, model;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                Clazz = this;\n                model = new Clazz({\n                  _id: _id\n                });\n                return _context3.abrupt(\"return\", model.fetch(fetchOptions));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function findById(_x, _x2) {\n        return _findById.apply(this, arguments);\n      }\n\n      return findById;\n    }()\n    /**\n     * Fetch all models that are owned by the current user.\n     * This only includes 'personally' owned models, and not those created\n     * as part of a UserGroup\n     *\n     * @param {Object} _selector - A query to include when fetching models\n     */\n\n  }, {\n    key: \"fetchOwnList\",\n    value: function fetchOwnList() {\n      var _selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _id = (0, _helpers.userGroupKeys)().personal._id;\n\n      var selector = _objectSpread({}, _selector, {\n        signingKeyId: _id\n      });\n\n      return this.fetchList(selector);\n    }\n  }]);\n\n  function Model() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Model);\n\n    _defineProperty(this, \"schema\", void 0);\n\n    _defineProperty(this, \"_id\", void 0);\n\n    _defineProperty(this, \"attrs\", void 0);\n\n    var _this$constructor = this.constructor,\n        schema = _this$constructor.schema,\n        defaults = _this$constructor.defaults;\n    var name = this.modelName();\n    this.schema = schema;\n    this._id = attrs._id || (0, _v.default)().replace('-', '');\n    this.attrs = _objectSpread({}, defaults, attrs, {\n      radiksType: name\n    });\n  }\n\n  _createClass(Model, [{\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", new Promise(\n                /*#__PURE__*/\n                function () {\n                  var _ref3 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee4(resolve, reject) {\n                    var now, encrypted, gaiaURL;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _context4.prev = 0;\n\n                            if (!_this2.beforeSave) {\n                              _context4.next = 4;\n                              break;\n                            }\n\n                            _context4.next = 4;\n                            return _this2.beforeSave();\n\n                          case 4:\n                            now = new Date().getTime();\n                            _this2.attrs.createdAt = _this2.attrs.createdAt || now;\n                            _this2.attrs.updatedAt = now;\n                            _context4.next = 9;\n                            return _this2.sign();\n\n                          case 9:\n                            _context4.next = 11;\n                            return _this2.encrypted();\n\n                          case 11:\n                            encrypted = _context4.sent;\n                            _context4.next = 14;\n                            return _this2.saveFile(encrypted);\n\n                          case 14:\n                            gaiaURL = _context4.sent;\n                            _context4.next = 17;\n                            return (0, _api.sendNewGaiaUrl)(gaiaURL);\n\n                          case 17:\n                            resolve(_this2);\n                            _context4.next = 23;\n                            break;\n\n                          case 20:\n                            _context4.prev = 20;\n                            _context4.t0 = _context4[\"catch\"](0);\n                            reject(_context4.t0);\n\n                          case 23:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, null, [[0, 20]]);\n                  }));\n\n                  return function (_x3, _x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"encrypted\",\n    value: function encrypted() {\n      return (0, _helpers.encryptObject)(this);\n    }\n  }, {\n    key: \"saveFile\",\n    value: function saveFile(encrypted) {\n      var userSession = (0, _helpers.requireUserSession)();\n      return userSession.putFile(this.blockstackPath(), JSON.stringify(encrypted), {\n        encrypt: false\n      });\n    }\n  }, {\n    key: \"blockstackPath\",\n    value: function blockstackPath() {\n      var path = \"\".concat(this.modelName(), \"/\").concat(this._id);\n      return path;\n    }\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var _ref4,\n            _ref4$decrypt,\n            decrypt,\n            query,\n            _ref5,\n            results,\n            _results,\n            attrs,\n            _args6 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _ref4 = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {}, _ref4$decrypt = _ref4.decrypt, decrypt = _ref4$decrypt === void 0 ? true : _ref4$decrypt;\n                query = {\n                  _id: this._id\n                };\n                _context6.next = 4;\n                return (0, _api.find)(query);\n\n              case 4:\n                _ref5 = _context6.sent;\n                results = _ref5.results;\n                _results = _slicedToArray(results, 1), attrs = _results[0];\n                this.attrs = _objectSpread({}, this.attrs, attrs);\n\n                if (!decrypt) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _context6.next = 11;\n                return this.decrypt();\n\n              case 11:\n                _context6.next = 13;\n                return this.afterFetch();\n\n              case 13:\n                return _context6.abrupt(\"return\", this);\n\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return (0, _helpers.decryptObject)(this.attrs, this);\n\n              case 2:\n                this.attrs = _context7.sent;\n                return _context7.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function decrypt() {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n  }, {\n    key: \"update\",\n    value: function update(attrs) {\n      this.attrs = _objectSpread({}, this.attrs, attrs);\n    }\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8() {\n        var signingKey, privateKey, contentToSign, _ref6, signature;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(this.attrs.updatable === false)) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", true);\n\n              case 2:\n                signingKey = this.getSigningKey();\n                this.attrs.signingKeyId = this.attrs.signingKeyId || signingKey._id;\n                privateKey = signingKey.privateKey;\n                contentToSign = [this._id];\n\n                if (this.attrs.updatedAt) {\n                  contentToSign.push(this.attrs.updatedAt);\n                }\n\n                _ref6 = (0, _encryption.signECDSA)(privateKey, contentToSign.join('-')), signature = _ref6.signature;\n                this.attrs.radiksSignature = signature;\n                return _context8.abrupt(\"return\", this);\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function sign() {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"getSigningKey\",\n    value: function getSigningKey() {\n      if (this.attrs.userGroupId) {\n        var _ref7 = (0, _helpers.userGroupKeys)(),\n            userGroups = _ref7.userGroups,\n            signingKeys = _ref7.signingKeys;\n\n        var _id = userGroups[this.attrs.userGroupId];\n        var privateKey = signingKeys[_id];\n        return {\n          _id: _id,\n          privateKey: privateKey\n        };\n      }\n\n      return (0, _helpers.userGroupKeys)().personal;\n    }\n  }, {\n    key: \"encryptionPublicKey\",\n    value: function () {\n      var _encryptionPublicKey = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", (0, _keys.getPublicKeyFromPrivate)(this.encryptionPrivateKey()));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function encryptionPublicKey() {\n        return _encryptionPublicKey.apply(this, arguments);\n      }\n\n      return encryptionPublicKey;\n    }()\n  }, {\n    key: \"encryptionPrivateKey\",\n    value: function encryptionPrivateKey() {\n      var privateKey;\n\n      if (this.attrs.userGroupId) {\n        var _ref8 = (0, _helpers.userGroupKeys)(),\n            userGroups = _ref8.userGroups,\n            signingKeys = _ref8.signingKeys;\n\n        privateKey = signingKeys[userGroups[this.attrs.userGroupId]];\n      } else {\n        privateKey = (0, _helpers.requireUserSession)().loadUserData().appPrivateKey;\n      }\n\n      return privateKey;\n    }\n  }, {\n    key: \"modelName\",\n    value: function modelName() {\n      var modelName = this.constructor.modelName;\n      return modelName.apply(this.constructor);\n    }\n  }, {\n    key: \"isOwnedByUser\",\n    value: function isOwnedByUser() {\n      var _this3 = this;\n\n      var keys = (0, _helpers.userGroupKeys)();\n\n      if (this.attrs.signingKeyId === keys.personal._id) {\n        return true;\n      }\n\n      if (this.attrs.userGroupId) {\n        var isOwned = false;\n        Object.keys(keys.userGroups).forEach(function (groupId) {\n          if (groupId === _this3.attrs.userGroupId) {\n            isOwned = true;\n          }\n        });\n        return isOwned;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.sign();\n\n              case 2:\n                return _context10.abrupt(\"return\", (0, _api.destroyModel)(this));\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n\n      return destroy;\n    }() // @abstract\n\n  }, {\n    key: \"beforeSave\",\n    value: function beforeSave() {} // @abstract\n\n  }, {\n    key: \"afterFetch\",\n    value: function afterFetch() {}\n  }], [{\n    key: \"modelName\",\n    value: function modelName() {\n      return this.className || this.name;\n    }\n  }, {\n    key: \"addStreamListener\",\n    value: function addStreamListener(callback) {\n      var _this4 = this;\n\n      if (!this.emitter) {\n        this.emitter = new _wolfy87Eventemitter.default();\n      }\n\n      if (this.emitter.getListeners().length === 0) {\n        _streamer.default.addListener(function (args) {\n          _this4.onStreamEvent(_this4, args);\n        });\n      }\n\n      this.emitter.addListener(EVENT_NAME, callback);\n    }\n  }, {\n    key: \"removeStreamListener\",\n    value: function removeStreamListener(callback) {\n      this.emitter.removeListener(EVENT_NAME, callback);\n\n      if (this.emitter.getListeners().length === 0) {\n        _streamer.default.removeListener(this.onStreamEvent);\n      }\n    }\n  }]);\n\n  return Model;\n}();\n\nexports.default = Model;\n\n_defineProperty(Model, \"schema\", void 0);\n\n_defineProperty(Model, \"defaults\", {});\n\n_defineProperty(Model, \"className\", void 0);\n\n_defineProperty(Model, \"emitter\", void 0);\n\n_defineProperty(Model, \"onStreamEvent\", function (_this, _ref9) {\n  var _ref10 = _slicedToArray(_ref9, 1),\n      event = _ref10[0];\n\n  try {\n    var data = event.data;\n    var attrs = JSON.parse(data);\n\n    if (attrs && attrs.radiksType === _this.modelName()) {\n      var model = new _this(attrs);\n\n      if (model.isOwnedByUser()) {\n        model.decrypt().then(function () {\n          _this.emitter.emit(EVENT_NAME, model);\n        });\n      } else {\n        _this.emitter.emit(EVENT_NAME, model);\n      }\n    }\n  } catch (error) {// console.error(error.message);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}