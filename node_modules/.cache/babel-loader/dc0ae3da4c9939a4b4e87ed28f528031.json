{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Repository\\\\testapp\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nexports.__esModule = true;\nexports.Github = void 0;\n\nvar _service = require(\"./service\");\n\nvar Github =\n/*#__PURE__*/\nfunction (_service$Service) {\n  _inherits(Github, _service$Service);\n\n  function Github() {\n    _classCallCheck(this, Github);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Github).apply(this, arguments));\n  }\n\n  _createClass(Github, null, [{\n    key: \"getBaseUrls\",\n    value: function getBaseUrls() {\n      var baseUrls = ['https://gist.github.com/', 'http://gist.github.com', 'gist.github.com'];\n      return baseUrls;\n    }\n  }, {\n    key: \"getProofUrl\",\n    value: function getProofUrl(proof) {\n      var baseUrls = this.getBaseUrls();\n      var proofUrl = proof.proof_url.toLowerCase();\n      proofUrl = _get(_getPrototypeOf(Github), \"prefixScheme\", this).call(this, proofUrl);\n\n      for (var i = 0; i < baseUrls.length; i++) {\n        var requiredPrefix = \"\".concat(baseUrls[i]).concat(proof.identifier).toLowerCase();\n\n        if (proofUrl.startsWith(requiredPrefix)) {\n          var raw = proofUrl.endsWith('/') ? 'raw' : '/raw';\n          return \"\".concat(proofUrl).concat(raw);\n        }\n      }\n\n      throw new Error(\"Proof url \".concat(proof.proof_url, \" is not valid for service \").concat(proof.service));\n    }\n  }]);\n\n  return Github;\n}(_service.Service);\n\nexports.Github = Github;","map":null,"metadata":{},"sourceType":"script"}