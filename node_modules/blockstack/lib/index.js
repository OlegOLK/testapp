"use strict";

exports.__esModule = true;
var _exportNames = {
  makeDIDFromAddress: true,
  makeDIDFromPublicKey: true,
  getDIDType: true,
  getAddressFromDID: true,
  getEntropy: true,
  makeECPrivateKey: true,
  publicKeyToAddress: true,
  getPublicKeyFromPrivate: true,
  nextYear: true,
  nextMonth: true,
  nextHour: true,
  makeUUID4: true,
  updateQueryStringParameter: true,
  isLaterVersion: true,
  isSameOriginAbsoluteUrl: true,
  hexStringToECPair: true,
  ecPairToHexString: true,
  ecPairToAddress: true,
  transactions: true,
  safety: true,
  TransactionSigner: true,
  PubkeyHashSigner: true,
  addUTXOsToFund: true,
  estimateTXBytes: true,
  BlockstackWallet: true,
  IdentityKeyPair: true,
  network: true,
  decodeToken: true,
  config: true,
  encryptMnemonic: true,
  decryptMnemonic: true,
  UserSession: true
};
exports.UserSession = exports.decryptMnemonic = exports.encryptMnemonic = exports.config = exports.decodeToken = exports.network = exports.IdentityKeyPair = exports.BlockstackWallet = exports.estimateTXBytes = exports.addUTXOsToFund = exports.PubkeyHashSigner = exports.TransactionSigner = exports.safety = exports.transactions = exports.ecPairToAddress = exports.ecPairToHexString = exports.hexStringToECPair = exports.isSameOriginAbsoluteUrl = exports.isLaterVersion = exports.updateQueryStringParameter = exports.makeUUID4 = exports.nextHour = exports.nextMonth = exports.nextYear = exports.getPublicKeyFromPrivate = exports.publicKeyToAddress = exports.makeECPrivateKey = exports.getEntropy = exports.getAddressFromDID = exports.getDIDType = exports.makeDIDFromPublicKey = exports.makeDIDFromAddress = void 0;

var _queryString = _interopRequireDefault(require("query-string"));

var _auth = require("./auth");

Object.keys(_auth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _auth[key];
});

var _profiles = require("./profiles");

Object.keys(_profiles).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _profiles[key];
});

var _storage = require("./storage");

Object.keys(_storage).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  exports[key] = _storage[key];
});

var _dids = require("./dids");

exports.makeDIDFromAddress = _dids.makeDIDFromAddress;
exports.makeDIDFromPublicKey = _dids.makeDIDFromPublicKey;
exports.getDIDType = _dids.getDIDType;
exports.getAddressFromDID = _dids.getAddressFromDID;

var _keys = require("./keys");

exports.getEntropy = _keys.getEntropy;
exports.makeECPrivateKey = _keys.makeECPrivateKey;
exports.publicKeyToAddress = _keys.publicKeyToAddress;
exports.getPublicKeyFromPrivate = _keys.getPublicKeyFromPrivate;

var _utils = require("./utils");

exports.nextYear = _utils.nextYear;
exports.nextMonth = _utils.nextMonth;
exports.nextHour = _utils.nextHour;
exports.makeUUID4 = _utils.makeUUID4;
exports.updateQueryStringParameter = _utils.updateQueryStringParameter;
exports.isLaterVersion = _utils.isLaterVersion;
exports.isSameOriginAbsoluteUrl = _utils.isSameOriginAbsoluteUrl;
exports.hexStringToECPair = _utils.hexStringToECPair;
exports.ecPairToHexString = _utils.ecPairToHexString;
exports.ecPairToAddress = _utils.ecPairToAddress;

var _operations = require("./operations");

exports.transactions = _operations.transactions;
exports.safety = _operations.safety;
exports.TransactionSigner = _operations.TransactionSigner;
exports.PubkeyHashSigner = _operations.PubkeyHashSigner;
exports.addUTXOsToFund = _operations.addUTXOsToFund;
exports.estimateTXBytes = _operations.estimateTXBytes;

var _wallet = require("./wallet");

exports.BlockstackWallet = _wallet.BlockstackWallet;
exports.IdentityKeyPair = _wallet.IdentityKeyPair;

var _network = require("./network");

exports.network = _network.network;

var _jsontokens = require("jsontokens");

exports.decodeToken = _jsontokens.decodeToken;

var _config = require("./config");

exports.config = _config.config;

var _encryption = require("./encryption");

exports.encryptMnemonic = _encryption.encryptMnemonic;
exports.decryptMnemonic = _encryption.decryptMnemonic;

var _userSession = require("./auth/userSession");

exports.UserSession = _userSession.UserSession;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: Putting in here so it executes ASAP. There is probably a better place to put this.
// Note: This prototype is designed to work as a drop-in-replacement (non-breaking upgrade)
// for apps using blockstack.js. That requires doing this hacky global & immediate detection. 
// A more proper approach would require developers to call an additional blockstack.js method 
// for invoking this detection method.
(function protocolEchoReplyDetection() {
  // Check that the `window` APIs exist
  if (typeof window !== 'object' || !window.location || !window.localStorage) {
    // Exit detection function - we are not running in a browser environment.
    return;
  } // Check if the location query string contains a protocol-echo reply.
  // If so, this page was only re-opened to signal back the originating 
  // tab that the protocol handler is installed. 


  const queryDict = _queryString.default.parse(window.location.search);

  if (queryDict.echoReply) {
    // Use localStorage to notify originated tab that protocol handler is available and working.
    const echoReplyKey = `echo-reply-${queryDict.echoReply}`; // Set the echo-reply result in localStorage for the other window to see.

    window.localStorage.setItem(echoReplyKey, 'success'); // Redirect back to the localhost auth url, as opposed to another protocol launch.
    // This will re-use the same tab rather than creating another useless one.

    window.setTimeout(() => {
      window.location = decodeURIComponent(queryDict.authContinuation);
    }, 10);
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwcm90b2NvbEVjaG9SZXBseURldGVjdGlvbiIsIndpbmRvdyIsImxvY2F0aW9uIiwibG9jYWxTdG9yYWdlIiwicXVlcnlEaWN0IiwicXVlcnlTdHJpbmciLCJwYXJzZSIsInNlYXJjaCIsImVjaG9SZXBseSIsImVjaG9SZXBseUtleSIsInNldEl0ZW0iLCJzZXRUaW1lb3V0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXV0aENvbnRpbnVhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBOEJBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0E7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUVBOzs7Ozs7O0FBSUE7Ozs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7OztBQU1BOzs7Ozs7Ozs7QUFLQTs7Ozs7QUFFQTs7OztBQUVBOzs7O0FBRUE7Ozs7QUFFQTs7Ozs7QUFFQTs7Ozs7O0FBN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxVQUFTQSwwQkFBVCxHQUFzQztBQUNyQztBQUNBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUFsQixJQUE4QixDQUFDQSxNQUFNLENBQUNDLFFBQXRDLElBQWtELENBQUNELE1BQU0sQ0FBQ0UsWUFBOUQsRUFBNEU7QUFDMUU7QUFDQTtBQUNELEdBTG9DLENBTXJDO0FBQ0E7QUFDQTs7O0FBQ0EsUUFBTUMsU0FBUyxHQUFHQyxxQkFBWUMsS0FBWixDQUFrQkwsTUFBTSxDQUFDQyxRQUFQLENBQWdCSyxNQUFsQyxDQUFsQjs7QUFDQSxNQUFJSCxTQUFTLENBQUNJLFNBQWQsRUFBeUI7QUFDdkI7QUFDQSxVQUFNQyxZQUFZLEdBQUksY0FBYUwsU0FBUyxDQUFDSSxTQUFVLEVBQXZELENBRnVCLENBR3ZCOztBQUNBUCxJQUFBQSxNQUFNLENBQUNFLFlBQVAsQ0FBb0JPLE9BQXBCLENBQTRCRCxZQUE1QixFQUEwQyxTQUExQyxFQUp1QixDQUt2QjtBQUNBOztBQUNBUixJQUFBQSxNQUFNLENBQUNVLFVBQVAsQ0FBa0IsTUFBTTtBQUN0QlYsTUFBQUEsTUFBTSxDQUFDQyxRQUFQLEdBQWtCVSxrQkFBa0IsQ0FBQ1IsU0FBUyxDQUFDUyxnQkFBWCxDQUFwQztBQUNELEtBRkQsRUFFRyxFQUZIO0FBR0Q7QUFDRixDQXJCQSxHQUFEIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IHF1ZXJ5U3RyaW5nIGZyb20gJ3F1ZXJ5LXN0cmluZydcblxuLy8gVE9ETzogUHV0dGluZyBpbiBoZXJlIHNvIGl0IGV4ZWN1dGVzIEFTQVAuIFRoZXJlIGlzIHByb2JhYmx5IGEgYmV0dGVyIHBsYWNlIHRvIHB1dCB0aGlzLlxuLy8gTm90ZTogVGhpcyBwcm90b3R5cGUgaXMgZGVzaWduZWQgdG8gd29yayBhcyBhIGRyb3AtaW4tcmVwbGFjZW1lbnQgKG5vbi1icmVha2luZyB1cGdyYWRlKVxuLy8gZm9yIGFwcHMgdXNpbmcgYmxvY2tzdGFjay5qcy4gVGhhdCByZXF1aXJlcyBkb2luZyB0aGlzIGhhY2t5IGdsb2JhbCAmIGltbWVkaWF0ZSBkZXRlY3Rpb24uIFxuLy8gQSBtb3JlIHByb3BlciBhcHByb2FjaCB3b3VsZCByZXF1aXJlIGRldmVsb3BlcnMgdG8gY2FsbCBhbiBhZGRpdGlvbmFsIGJsb2Nrc3RhY2suanMgbWV0aG9kIFxuLy8gZm9yIGludm9raW5nIHRoaXMgZGV0ZWN0aW9uIG1ldGhvZC5cbihmdW5jdGlvbiBwcm90b2NvbEVjaG9SZXBseURldGVjdGlvbigpIHtcbiAgLy8gQ2hlY2sgdGhhdCB0aGUgYHdpbmRvd2AgQVBJcyBleGlzdFxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ29iamVjdCcgfHwgIXdpbmRvdy5sb2NhdGlvbiB8fCAhd2luZG93LmxvY2FsU3RvcmFnZSkge1xuICAgIC8vIEV4aXQgZGV0ZWN0aW9uIGZ1bmN0aW9uIC0gd2UgYXJlIG5vdCBydW5uaW5nIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICByZXR1cm5cbiAgfVxuICAvLyBDaGVjayBpZiB0aGUgbG9jYXRpb24gcXVlcnkgc3RyaW5nIGNvbnRhaW5zIGEgcHJvdG9jb2wtZWNobyByZXBseS5cbiAgLy8gSWYgc28sIHRoaXMgcGFnZSB3YXMgb25seSByZS1vcGVuZWQgdG8gc2lnbmFsIGJhY2sgdGhlIG9yaWdpbmF0aW5nIFxuICAvLyB0YWIgdGhhdCB0aGUgcHJvdG9jb2wgaGFuZGxlciBpcyBpbnN0YWxsZWQuIFxuICBjb25zdCBxdWVyeURpY3QgPSBxdWVyeVN0cmluZy5wYXJzZSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKVxuICBpZiAocXVlcnlEaWN0LmVjaG9SZXBseSkge1xuICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgdG8gbm90aWZ5IG9yaWdpbmF0ZWQgdGFiIHRoYXQgcHJvdG9jb2wgaGFuZGxlciBpcyBhdmFpbGFibGUgYW5kIHdvcmtpbmcuXG4gICAgY29uc3QgZWNob1JlcGx5S2V5ID0gYGVjaG8tcmVwbHktJHtxdWVyeURpY3QuZWNob1JlcGx5fWBcbiAgICAvLyBTZXQgdGhlIGVjaG8tcmVwbHkgcmVzdWx0IGluIGxvY2FsU3RvcmFnZSBmb3IgdGhlIG90aGVyIHdpbmRvdyB0byBzZWUuXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGVjaG9SZXBseUtleSwgJ3N1Y2Nlc3MnKVxuICAgIC8vIFJlZGlyZWN0IGJhY2sgdG8gdGhlIGxvY2FsaG9zdCBhdXRoIHVybCwgYXMgb3Bwb3NlZCB0byBhbm90aGVyIHByb3RvY29sIGxhdW5jaC5cbiAgICAvLyBUaGlzIHdpbGwgcmUtdXNlIHRoZSBzYW1lIHRhYiByYXRoZXIgdGhhbiBjcmVhdGluZyBhbm90aGVyIHVzZWxlc3Mgb25lLlxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IGRlY29kZVVSSUNvbXBvbmVudChxdWVyeURpY3QuYXV0aENvbnRpbnVhdGlvbilcbiAgICB9LCAxMClcbiAgfVxufSgpKVxuXG5leHBvcnQgKiBmcm9tICcuL2F1dGgnXG5leHBvcnQgKiBmcm9tICcuL3Byb2ZpbGVzJ1xuZXhwb3J0ICogZnJvbSAnLi9zdG9yYWdlJ1xuXG5leHBvcnQge1xuICBtYWtlRElERnJvbUFkZHJlc3MsIG1ha2VESURGcm9tUHVibGljS2V5LCBnZXRESURUeXBlLCBnZXRBZGRyZXNzRnJvbURJRFxufSBmcm9tICcuL2RpZHMnXG5cbmV4cG9ydCB7XG4gIGdldEVudHJvcHksIG1ha2VFQ1ByaXZhdGVLZXksIHB1YmxpY0tleVRvQWRkcmVzcywgZ2V0UHVibGljS2V5RnJvbVByaXZhdGVcbn0gZnJvbSAnLi9rZXlzJ1xuXG5leHBvcnQge1xuICBuZXh0WWVhciwgbmV4dE1vbnRoLCBuZXh0SG91ciwgbWFrZVVVSUQ0LCB1cGRhdGVRdWVyeVN0cmluZ1BhcmFtZXRlcixcbiAgaXNMYXRlclZlcnNpb24sIGlzU2FtZU9yaWdpbkFic29sdXRlVXJsLCBoZXhTdHJpbmdUb0VDUGFpciwgZWNQYWlyVG9IZXhTdHJpbmcsXG4gIGVjUGFpclRvQWRkcmVzc1xufSBmcm9tICcuL3V0aWxzJ1xuXG5leHBvcnQge1xuICB0cmFuc2FjdGlvbnMsIHNhZmV0eSwgVHJhbnNhY3Rpb25TaWduZXIsXG4gIFB1YmtleUhhc2hTaWduZXIsIGFkZFVUWE9zVG9GdW5kLCBlc3RpbWF0ZVRYQnl0ZXNcbn0gZnJvbSAnLi9vcGVyYXRpb25zJ1xuXG5leHBvcnQgeyBCbG9ja3N0YWNrV2FsbGV0LCBJZGVudGl0eUtleVBhaXIgfSBmcm9tICcuL3dhbGxldCdcblxuZXhwb3J0IHsgbmV0d29yayB9IGZyb20gJy4vbmV0d29yaydcblxuZXhwb3J0IHsgZGVjb2RlVG9rZW4gfSBmcm9tICdqc29udG9rZW5zJ1xuXG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IHsgZW5jcnlwdE1uZW1vbmljLCBkZWNyeXB0TW5lbW9uaWMgfSBmcm9tICcuL2VuY3J5cHRpb24nXG5cbmV4cG9ydCB7IFVzZXJTZXNzaW9uIH0gIGZyb20gJy4vYXV0aC91c2VyU2Vzc2lvbidcbiJdfQ==